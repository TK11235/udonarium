/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$===', '$getCheckResult', '$getRegistResult', '$getCombineRoll', '$match', '$to_i', '$[]', '$>', '$+', '$roll', '$getCheckResultText', '$floor', '$/', '$*', '$<', '$<=', '$>=', '$-', '$include?', '$debug', '$==']);
  return (function($base, $super, $parent_nesting) {
    function $Cthulhu(){};
    var self = $Cthulhu = $klass($base, $super, 'Cthulhu', $Cthulhu);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Cthulhu_initialize_1, TMP_Cthulhu_gameName_2, TMP_Cthulhu_gameType_3, TMP_Cthulhu_getHelpMessage_4, TMP_Cthulhu_rollDiceCommand_5, TMP_Cthulhu_getCheckResult_6, TMP_Cthulhu_getCheckResultText_7, TMP_Cthulhu_getRegistResult_8, TMP_Cthulhu_getCombineRoll_9;

    def.special_percentage = def.critical_percentage = def.fumble_percentage = nil;
    
    self.$setPrefixes(["CC(B)?\\(\\d+\\)", "CC(B)?.*", "RES(B)?.*", "CBR(B)?\\(\\d+,\\d+\\)"]);
    
    Opal.defn(self, '$initialize', TMP_Cthulhu_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_Cthulhu_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Cthulhu_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Cthulhu_initialize_1, false), $zuper, $iter);
      self.special_percentage = 20;
      self.critical_percentage = 1;
      return (self.fumble_percentage = 1);
    }, TMP_Cthulhu_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_Cthulhu_gameName_2 = function $$gameName() {
      var self = this;

      return "クトゥルフ"
    }, TMP_Cthulhu_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_Cthulhu_gameType_3 = function $$gameType() {
      var self = this;

      return "Cthulhu"
    }, TMP_Cthulhu_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_Cthulhu_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "c=クリティカル値 ／ f=ファンブル値 ／ s=スペシャル\n" + "\n" + "1d100<=n    c・f・sすべてオフ（単純な数値比較判定のみ行います）\n" + "\n" + "・cfs判定付き判定コマンド\n" + "\n" + "CC\t 1d100ロールを行う c=1、f=100\n" + "CCB  同上、c=5、f=96\n" + "\n" + "例：CC<=80  （技能値80で行為判定。1%ルールでcf適用）\n" + "例：CCB<=55 （技能値55で行為判定。5%ルールでcf適用）\n" + "\n" + "・組み合わせロールについて\n" + "\n" + "CBR(x,y)\tc=1、f=100\n" + "CBRB(x,y)\tc=5、f=96\n" + "\n" + "・抵抗表ロールについて\n" + "RES(x-y)\tc=1、f=100\n" + "RESB(x-y)\tc=5、f=96\n" + "\n" + "※故障ナンバー判定\n" + "\n" + "・CC(x) c=1、f=100\n" + "x=故障ナンバー。出目x以上が出た上で、ファンブルが同時に発生した場合、共に出力する（テキスト「ファンブル＆故障」）\n" + "ファンブルでない場合、成功・失敗に関わらずテキスト「故障」のみを出力する（成功・失敗を出力せず、上書きしたものを出力する形）\n" + "\n" + "・CCB(x) c=5、f=96\n" + "同上\n" + "\n"
    }, TMP_Cthulhu_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_Cthulhu_rollDiceCommand_5 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      
      $case = command;
      if (/CCB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getCheckResult(command);}
      else if (/CC/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getCheckResult(command);}
      else if (/RESB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getRegistResult(command);}
      else if (/CBRB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getCombineRoll(command);}
      else if (/RES/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getRegistResult(command);}
      else if (/CBR/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getCombineRoll(command);};
      return nil;
    }, TMP_Cthulhu_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$getCheckResult', TMP_Cthulhu_getCheckResult_6 = function $$getCheckResult(command) {
      var $a, $b, self = this, broken_num = nil, diff = nil, m = nil, output = nil, total_n = nil;

      
      broken_num = 0;
      diff = 0;
      if ($truthy((m = /CC(B)?(\d+)<=(\d+)/i.$match(command)))) {
        
        broken_num = m['$[]'](2).$to_i();
        diff = m['$[]'](3).$to_i();
      } else if ($truthy((m = /CC(B)?<=(\d+)/i.$match(command)))) {
        diff = m['$[]'](2).$to_i()};
      output = "";
      if ($truthy($rb_gt(diff, 0))) {
        
        output = "" + "(1D100<=" + (diff) + ")";
        if ($truthy($rb_gt(broken_num, 0))) {
          output = $rb_plus(output, "" + " 故障ナンバー[" + (broken_num) + "]")};
        $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
        output = $rb_plus(output, "" + " ＞ " + (total_n));
        output = $rb_plus(output, "" + " ＞ " + (self.$getCheckResultText(total_n, diff, broken_num)));
        } else {
        
        $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
        output = "" + "(1D100) ＞ " + (total_n);
      };
      return output;
    }, TMP_Cthulhu_getCheckResult_6.$$arity = 1);
    
    Opal.defn(self, '$getCheckResultText', TMP_Cthulhu_getCheckResultText_7 = function $$getCheckResultText(total_n, diff, broken_num) {
      var $a, self = this, result = nil, diff_special = nil, fumble = nil;

      if (broken_num == null) {
        broken_num = 0;
      }
      
      result = "";
      diff_special = 0;
      fumble = false;
      if ($truthy($rb_gt(self.special_percentage, 0))) {
        
        diff_special = $rb_divide($rb_times(diff, self.special_percentage), 100).$floor();
        if ($truthy($rb_lt(diff_special, 1))) {
          diff_special = 1};};
      if ($truthy(($truthy($a = $rb_le(total_n, diff)) ? $rb_lt(total_n, 100) : $a))) {
        
        result = "成功";
        if ($truthy($rb_gt(diff_special, 0))) {
          if ($truthy($rb_le(total_n, self.critical_percentage))) {
            if ($truthy($rb_le(total_n, diff_special))) {
              result = "決定的成功/スペシャル"
              } else {
              result = "決定的成功"
            }
          } else if ($truthy($rb_le(total_n, diff_special))) {
            result = "スペシャル"}};
        } else {
        
        result = "失敗";
        if ($truthy($rb_gt(diff_special, 0))) {
          if ($truthy(($truthy($a = $rb_ge(total_n, $rb_minus(101, self.fumble_percentage))) ? $rb_lt(diff, 100) : $a))) {
            
            result = "致命的失敗";
            fumble = true;}};
      };
      if ($truthy($rb_gt(broken_num, 0))) {
        if ($truthy($rb_ge(total_n, broken_num))) {
          if ($truthy(fumble)) {
            result = $rb_plus(result, "/故障")
            } else {
            result = "故障"
          }}};
      return result;
    }, TMP_Cthulhu_getCheckResultText_7.$$arity = -3);
    
    Opal.defn(self, '$getRegistResult', TMP_Cthulhu_getRegistResult_8 = function $$getRegistResult(command) {
      var $a, $b, self = this, m = nil, value = nil, target = nil, total_n = nil, result = nil;

      
      m = /RES(B)?([-\d]+)/i.$match(command);
      if ($truthy(m)) {
        } else {
        return "1"
      };
      value = m['$[]'](2).$to_i();
      target = $rb_plus($rb_times(value, 5), 50);
      if ($truthy($rb_lt(target, 5))) {
        return "" + "(1d100<=" + (target) + ") ＞ 自動失敗"};
      if ($truthy($rb_gt(target, 95))) {
        return "" + "(1d100<=" + (target) + ") ＞ 自動成功"};
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
      result = self.$getCheckResultText(total_n, target);
      return "" + "(1d100<=" + (target) + ") ＞ " + (total_n) + " ＞ " + (result);
    }, TMP_Cthulhu_getRegistResult_8.$$arity = 1);
    return (Opal.defn(self, '$getCombineRoll', TMP_Cthulhu_getCombineRoll_9 = function $$getCombineRoll(command) {
      var $a, $b, self = this, m = nil, diff_1 = nil, diff_2 = nil, total = nil, result_1 = nil, result_2 = nil, successList = nil, succesCount = nil, rank = nil;

      
      m = /CBR(B)?\((\d+),(\d+)\)/i.$match(command);
      if ($truthy(m)) {
        } else {
        return "1"
      };
      diff_1 = m['$[]'](2).$to_i();
      diff_2 = m['$[]'](3).$to_i();
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), $b;
      result_1 = self.$getCheckResultText(total, diff_1);
      result_2 = self.$getCheckResultText(total, diff_2);
      successList = ["決定的成功/スペシャル", "決定的成功", "スペシャル", "成功"];
      succesCount = 0;
      if ($truthy(successList['$include?'](result_1))) {
        succesCount = $rb_plus(succesCount, 1)};
      if ($truthy(successList['$include?'](result_2))) {
        succesCount = $rb_plus(succesCount, 1)};
      self.$debug("succesCount", succesCount);
      rank = (function() {if ($truthy($rb_ge(succesCount, 2))) {
        return "成功"
      } else if (succesCount['$=='](1)) {
        return "部分的成功"
        } else {
        return "失敗"
      }; return nil; })();
      return "" + "(1d100<=" + (diff_1) + "," + (diff_2) + ") ＞ " + (total) + "[" + (result_1) + "," + (result_2) + "] ＞ " + (rank);
    }, TMP_Cthulhu_getCombineRoll_9.$$arity = 1), nil) && 'getCombineRoll';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
