/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$check_nD6', '$debug', '$>=', '$==']);
  return (function($base, $super, $parent_nesting) {
    function $Arianrhod(){};
    var self = $Arianrhod = $klass($base, $super, 'Arianrhod', $Arianrhod);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Arianrhod_initialize_1, TMP_Arianrhod_gameName_2, TMP_Arianrhod_gameType_3, TMP_Arianrhod_getHelpMessage_4, TMP_Arianrhod_check_2D6_5, TMP_Arianrhod_check_nD6_6;

    
    
    Opal.defn(self, '$initialize', TMP_Arianrhod_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_Arianrhod_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Arianrhod_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Arianrhod_initialize_1, false), $zuper, $iter);
      self.sendMode = 2;
      self.sortType = 1;
      return (self.d66Type = 1);
    }, TMP_Arianrhod_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_Arianrhod_gameName_2 = function $$gameName() {
      var self = this;

      return "アリアンロッド"
    }, TMP_Arianrhod_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_Arianrhod_gameType_3 = function $$gameType() {
      var self = this;

      return "Arianrhod"
    }, TMP_Arianrhod_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_Arianrhod_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・クリティカル、ファンブルの自動判定を行います。(クリティカル時の追加ダメージも表示されます)\n" + "・D66ダイスあり\n"
    }, TMP_Arianrhod_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$check_2D6', TMP_Arianrhod_check_2D6_5 = function $$check_2D6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max) {
      var self = this;

      return self.$check_nD6(total_n, dice_n, signOfInequality, diff, dice_cnt, dice_max, n1, n_max)
    }, TMP_Arianrhod_check_2D6_5.$$arity = 8);
    return (Opal.defn(self, '$check_nD6', TMP_Arianrhod_check_nD6_6 = function $$check_nD6(total_n, _dice_n, signOfInequality, diff, dice_cnt, _dice_max, n1, n_max) {
      var self = this, result = nil;

      
      self.$debug("check_nD6 begin");
      if ($truthy($rb_ge(n1, dice_cnt))) {
        return " ＞ ファンブル"};
      if ($truthy($rb_ge(n_max, 2))) {
        return "" + " ＞ クリティカル(+" + (n_max) + "D6)"};
      result = "";
      if (signOfInequality['$=='](">=")) {
        } else {
        return result
      };
      if (diff['$==']("?")) {
        return result};
      if ($truthy($rb_ge(total_n, diff))) {
        return " ＞ 成功"};
      return " ＞ 失敗";
    }, TMP_Arianrhod_check_nD6_6.$$arity = 8), nil) && 'check_nD6';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
