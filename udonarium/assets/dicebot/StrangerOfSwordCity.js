/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$debug', '$upcase', '$checkRoll', '$empty?', '$===', '$to_i', '$last_match', '$roll', '$sort', '$collect', '$split', '$+', '$getModifyText', '$join', '$getCriticalResult', '$nil?', '$isFumble', '$>=', '$==', '$<', '$to_s', '$size', '$select']);
  return (function($base, $super, $parent_nesting) {
    function $StrangerOfSwordCity(){};
    var self = $StrangerOfSwordCity = $klass($base, $super, 'StrangerOfSwordCity', $StrangerOfSwordCity);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StrangerOfSwordCity_initialize_1, TMP_StrangerOfSwordCity_gameName_2, TMP_StrangerOfSwordCity_gameType_3, TMP_StrangerOfSwordCity_getHelpMessage_4, TMP_StrangerOfSwordCity_rollDiceCommand_5, TMP_StrangerOfSwordCity_checkRoll_7, TMP_StrangerOfSwordCity_getModifyText_8, TMP_StrangerOfSwordCity_getCriticalResult_10, TMP_StrangerOfSwordCity_isFumble_12;

    
    self.$setPrefixes(["\\d+SR.*"]);
    
    Opal.defn(self, '$initialize', TMP_StrangerOfSwordCity_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_StrangerOfSwordCity_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_StrangerOfSwordCity_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_StrangerOfSwordCity_initialize_1, false), $zuper, $iter);
      self.sendMode = 2;
      self.sortType = 1;
      self.d66Type = 1;
      return (self.fractionType = "omit");
    }, TMP_StrangerOfSwordCity_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_StrangerOfSwordCity_gameName_2 = function $$gameName() {
      var self = this;

      return "剣の街の異邦人TRPG"
    }, TMP_StrangerOfSwordCity_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_StrangerOfSwordCity_gameType_3 = function $$gameType() {
      var self = this;

      return "StrangerOfSwordCity"
    }, TMP_StrangerOfSwordCity_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_StrangerOfSwordCity_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this, info = nil;

      return (info = "" + "・判定　xSR or xSRy or xSR+y or xSR-y or xSR+y>=z\n" + "　x=ダイス数、y=修正値(省略可、±省略時は＋として扱う)、z=難易度(省略可)\n" + "　判定時はクリティカル、ファンブルの自動判定を行います。\n" + "・通常のnD6ではクリティカル、ファンブルの自動判定は行いません。\n" + "・D66ダイスあり\n")
    }, TMP_StrangerOfSwordCity_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_StrangerOfSwordCity_rollDiceCommand_5 = function $$rollDiceCommand(command) {
      var self = this, result = nil;

      
      self.$debug("rollDiceCommand command", command);
      command = command.$upcase();
      result = "";
      result = self.$checkRoll(command);
      if ($truthy(result['$empty?']())) {
        } else {
        return result
      };
      return result;
    }, TMP_StrangerOfSwordCity_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$checkRoll', TMP_StrangerOfSwordCity_checkRoll_7 = function $$checkRoll(command) {
      var $a, $b, TMP_6, self = this, result = nil, diceCount = nil, modify = nil, difficulty = nil, dice = nil, diceText = nil, diceList = nil, totalValue = nil, modifyText = nil, criticalResult = nil;

      
      self.$debug("checkRoll begin command", command);
      result = "";
      if ($truthy(/^(\d+)SR([\+\-]?\d+)?(>=(\d+))?$/i['$==='](command))) {
        } else {
        return result
      };
      diceCount = Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i();
      modify = Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i();
      if ($truthy(Opal.const_get_relative($nesting, 'Regexp').$last_match(4))) {
        difficulty = Opal.const_get_relative($nesting, 'Regexp').$last_match(4).$to_i()};
      $b = self.$roll(diceCount, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      diceList = $send(diceText.$split(/,/), 'collect', [], (TMP_6 = function(i){var self = TMP_6.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6)).$sort();
      totalValue = $rb_plus(dice, modify);
      modifyText = self.$getModifyText(modify);
      result = $rb_plus(result, "" + "(" + (command) + ") ＞ " + (dice) + "[" + (diceList.$join(",")) + "]" + (modifyText) + " ＞ " + (totalValue));
      criticalResult = self.$getCriticalResult(diceList);
      if ($truthy(criticalResult['$nil?']())) {
        } else {
        
        result = $rb_plus(result, "" + " ＞ クリティカル(+" + (criticalResult) + "D6)");
        return result;
      };
      if ($truthy(self.$isFumble(diceList, diceCount))) {
        
        result = $rb_plus(result, " ＞ ファンブル");
        return result;};
      if ($truthy(difficulty['$nil?']())) {
        } else {
        result = $rb_plus(result, (function() {if ($truthy($rb_ge(totalValue, difficulty))) {
          return " ＞ 成功"
          } else {
          return " ＞ 失敗"
        }; return nil; })())
      };
      return result;
    }, TMP_StrangerOfSwordCity_checkRoll_7.$$arity = 1);
    
    Opal.defn(self, '$getModifyText', TMP_StrangerOfSwordCity_getModifyText_8 = function $$getModifyText(modify) {
      var self = this;

      
      if (modify['$=='](0)) {
        return ""};
      if ($truthy($rb_lt(modify, 0))) {
        return modify.$to_s()};
      return "" + "+" + (modify);
    }, TMP_StrangerOfSwordCity_getModifyText_8.$$arity = 1);
    
    Opal.defn(self, '$getCriticalResult', TMP_StrangerOfSwordCity_getCriticalResult_10 = function $$getCriticalResult(diceList) {
      var TMP_9, self = this, dice6Count = nil;

      
      dice6Count = $send(diceList, 'select', [], (TMP_9 = function(i){var self = TMP_9.$$s || this;
if (i == null) i = nil;
      return i['$=='](6)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9)).$size();
      if ($truthy($rb_ge(dice6Count, 2))) {
        return dice6Count.$to_s()};
      return nil;
    }, TMP_StrangerOfSwordCity_getCriticalResult_10.$$arity = 1);
    return (Opal.defn(self, '$isFumble', TMP_StrangerOfSwordCity_isFumble_12 = function $$isFumble(diceList, diceCount) {
      var TMP_11, self = this;

      
      return $rb_ge($send(diceList, 'select', [], (TMP_11 = function(i){var self = TMP_11.$$s || this;
if (i == null) i = nil;
      return i['$=='](1)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11)).$size(), diceCount);
    }, TMP_StrangerOfSwordCity_isFumble_12.$$arity = 2), nil) && 'isFumble';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
