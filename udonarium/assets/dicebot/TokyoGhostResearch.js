/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$upcase', '$===', '$getCheckResult', '$tgr_opening_table', '$tgr_common_trouble_table', '$=~', '$to_i', '$last_match', '$>', '$+', '$roll', '$to_s', '$getCheckResultText', '$>=', '$get_1d10_table_result', '$get_table_by_number', '$get_table_result']);
  return (function($base, $super, $parent_nesting) {
    function $TokyoGhostResearch(){};
    var self = $TokyoGhostResearch = $klass($base, $super, 'TokyoGhostResearch', $TokyoGhostResearch);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TokyoGhostResearch_initialize_1, TMP_TokyoGhostResearch_gameName_2, TMP_TokyoGhostResearch_gameType_3, TMP_TokyoGhostResearch_getHelpMessage_4, TMP_TokyoGhostResearch_rollDiceCommand_5, TMP_TokyoGhostResearch_getCheckResult_6, TMP_TokyoGhostResearch_getCheckResultText_7, TMP_TokyoGhostResearch_tgr_opening_table_8, TMP_TokyoGhostResearch_tgr_common_trouble_table_9, TMP_TokyoGhostResearch_get_1d10_table_result_10, TMP_TokyoGhostResearch_get_table_result_11;

    
    self.$setPrefixes(["OP", "TB", "TK?\\(\\d+\\)"]);
    
    Opal.defn(self, '$initialize', TMP_TokyoGhostResearch_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_TokyoGhostResearch_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_TokyoGhostResearch_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_TokyoGhostResearch_initialize_1, false), $zuper, $iter)
    }, TMP_TokyoGhostResearch_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_TokyoGhostResearch_gameName_2 = function $$gameName() {
      var self = this;

      return "東京ゴーストリサーチ"
    }, TMP_TokyoGhostResearch_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_TokyoGhostResearch_gameType_3 = function $$gameType() {
      var self = this;

      return "TokyoGhostResearch"
    }, TMP_TokyoGhostResearch_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_TokyoGhostResearch_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "判定\n" + "・タスク処理は目標値以上の値で成功となります。\n" + "  1d10>={目標値}\n" + "  例：目標値「5」の場合、5～0で成功\n" + "各種表\n" + "  ・導入表  OP\n" + "  ・一般トラブル表  TB\n"
    }, TMP_TokyoGhostResearch_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_TokyoGhostResearch_rollDiceCommand_5 = function $$rollDiceCommand(command) {
      var self = this, output = nil, $case = nil;

      
      output = (function() {$case = command.$upcase();
      if (/TK/i['$===']($case)) {return self.$getCheckResult(command)}
      else if ("OP"['$===']($case)) {return self.$tgr_opening_table()}
      else if ("TB"['$===']($case)) {return self.$tgr_common_trouble_table()}
      else { return nil }})();
      return output;
    }, TMP_TokyoGhostResearch_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$getCheckResult', TMP_TokyoGhostResearch_getCheckResult_6 = function $$getCheckResult(command) {
      var $a, $b, self = this, output = nil, diff = nil, total_n = nil;

      
      output = "";
      diff = 0;
      if ($truthy(/TK?<=(\d+)/i['$=~'](command))) {
        diff = Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i()};
      if ($truthy($rb_gt(diff, 0))) {
        
        output = $rb_plus(output, "" + "(1D10<=" + (diff) + ")");
        $b = self.$roll(1, 10), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
        output = $rb_plus(output, $rb_plus(" ＞ ", total_n.$to_s()));
        output = $rb_plus(output, $rb_plus(" ＞ ", self.$getCheckResultText(total_n, diff)));};
      return output;
    }, TMP_TokyoGhostResearch_getCheckResult_6.$$arity = 1);
    
    Opal.defn(self, '$getCheckResultText', TMP_TokyoGhostResearch_getCheckResultText_7 = function $$getCheckResultText(total_n, diff) {
      var self = this, result = nil;

      
      if ($truthy($rb_ge(total_n, diff))) {
        result = "成功"
        } else {
        result = "失敗"
      };
      return result;
    }, TMP_TokyoGhostResearch_getCheckResultText_7.$$arity = 2);
    
    Opal.defn(self, '$tgr_opening_table', TMP_TokyoGhostResearch_tgr_opening_table_8 = function $$tgr_opening_table() {
      var self = this, name = nil, table = nil;

      
      name = "導入表";
      table = [[1, "【病休中断】体調不良または怪我で療養中だったが強制召喚された。"], [2, "【忙殺中】別の業務で忙殺中であった。"], [3, "【出張帰り】遠方での仕事から戻ったばかり。"], [4, "【休暇取り消し】休暇中だったが呼び戻された。"], [5, "【平常運転】いつもどおりの仕事中だった。"], [6, "【休暇明け】十分に休養をとったあとで、心身ともに充実している。"], [7, "【人生の岐路】人生の岐路にまさに差し掛かったところであった。"], [8, "【同窓会】かつての同級生に会い、差を実感したばかりだった。"], [9, "【転職活動中】転職を考えて求人サイトを見ているところだった。"], [10, "【サボリ中】仕事をサボっているところに呼び出しがあった。"]];
      return self.$get_1d10_table_result(name, table);
    }, TMP_TokyoGhostResearch_tgr_opening_table_8.$$arity = 0);
    
    Opal.defn(self, '$tgr_common_trouble_table', TMP_TokyoGhostResearch_tgr_common_trouble_table_9 = function $$tgr_common_trouble_table() {
      var self = this, name = nil, table = nil;

      
      name = "一般トラブル表";
      table = [[1, "トラブルが生じたが、間一髪、危機を脱した。【ダメージなし】"], [2, "どうにかタスクを処理したが、非常に疲労してしまった。【肉体ダメージ1点】"], [3, "タスク処理の過程で負傷してしまった。【肉体ダメージ1点】"], [4, "恐怖や混乱、ストレスなどで精神の均衡を崩してしまった。【精神ダメージ1点】"], [5, "過去のトラウマなどを思い出し、気分が沈んでしまった。【精神ダメージ1点】"], [6, "自身の信用をキズつけたり、汚名を背負ってしまった。【環境ダメージ1点】"], [7, "会社や上司の不興を買ってしまった。【環境ダメージ1点】"], [8, "疲労困憊で動くこともままならない。【肉体ダメージ1点＋精神ダメージ1点】"], [9, "負傷したうえ、会社に損害を与えてしまった。【肉体ダメージ1点＋環境ダメージ1点】"], [10, "上司から厳しく叱責され、まずい立場になった。【精神ダメージ1点＋環境ダメージ1点】"]];
      return self.$get_1d10_table_result(name, table);
    }, TMP_TokyoGhostResearch_tgr_common_trouble_table_9.$$arity = 0);
    
    Opal.defn(self, '$get_1d10_table_result', TMP_TokyoGhostResearch_get_1d10_table_result_10 = function $$get_1d10_table_result(name, table) {
      var $a, $b, self = this, dice = nil, output = nil;

      
      $b = self.$roll(1, 10), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
      output = self.$get_table_by_number(dice, table);
      return self.$get_table_result(name, dice, output);
    }, TMP_TokyoGhostResearch_get_1d10_table_result_10.$$arity = 2);
    return (Opal.defn(self, '$get_table_result', TMP_TokyoGhostResearch_get_table_result_11 = function $$get_table_result(name, dice, output) {
      var self = this;

      return "" + (name) + "(" + (dice) + ") ＞ " + (output)
    }, TMP_TokyoGhostResearch_get_table_result_11.$$arity = 3), nil) && 'get_table_result';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
