/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$debug', '$===', '$to_i', '$last_match', '$getDiceType', '$==', '$parren_killer', '$+', '$getDiffculty', '$getRollValue', '$getResultText', '$empty?', '$getModifyString', '$getBaseText', '$!=', '$isValidDiceOne', '$isValidDice', '$floor', '$/', '$%', '$include?', '$nil?', '$rand', '$isFamble', '$isCritical', '$>=', '$>', '$to_s', '$<']);
  return (function($base, $super, $parent_nesting) {
    function $Ryutama(){};
    var self = $Ryutama = $klass($base, $super, 'Ryutama', $Ryutama);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Ryutama_initialize_1, TMP_Ryutama_gameName_2, TMP_Ryutama_gameType_3, TMP_Ryutama_getHelpMessage_4, TMP_Ryutama_rollDiceCommand_5, TMP_Ryutama_getDiceType_6, TMP_Ryutama_isValidDice_7, TMP_Ryutama_isValidDiceOne_8, TMP_Ryutama_getDiffculty_9, TMP_Ryutama_getRollValue_10, TMP_Ryutama_getResultText_11, TMP_Ryutama_isFamble_12, TMP_Ryutama_isCritical_13, TMP_Ryutama_getBaseText_14, TMP_Ryutama_getModifyString_15;

    def.validDiceTypes = nil;
    
    self.$setPrefixes(["R\\d+.*"]);
    
    Opal.defn(self, '$initialize', TMP_Ryutama_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_Ryutama_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Ryutama_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Ryutama_initialize_1, false), $zuper, $iter);
      return (self.validDiceTypes = [20, 12, 10, 8, 6, 4, 2]);
    }, TMP_Ryutama_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_Ryutama_gameName_2 = function $$gameName() {
      var self = this;

      return "りゅうたま"
    }, TMP_Ryutama_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_Ryutama_gameType_3 = function $$gameType() {
      var self = this;

      return "Ryutama"
    }, TMP_Ryutama_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_Ryutama_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・判定\n" + "　Rx,y>=t（x,y：使用する能力値、t：目標値）\n" + "　1ゾロ、クリティカルも含めて判定結果を表示します\n" + "　能力値１つでの判定は Rx>=t で行えます\n" + "例）R8,6>=13\n"
    }, TMP_Ryutama_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_Ryutama_rollDiceCommand_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, modifyString = nil, difficulty = nil, modify = nil, value1 = nil, value2 = nil, total = nil, result = nil, value1Text = nil, value2Text = nil, modifyText = nil, baseText = nil, output = nil;

      
      self.$debug("rollDiceCommand begin");
      if ($truthy(/^R(\d+)(,(\d+))?([\+\-\d]+)?(>=(\d+))?/['$==='](command))) {
        } else {
        
        self.$debug("unmatched!");
        return "";
      };
      self.$debug("matched");
      dice1 = Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i();
      dice2 = Opal.const_get_relative($nesting, 'Regexp').$last_match(3).$to_i();
      modifyString = Opal.const_get_relative($nesting, 'Regexp').$last_match(4);
      difficulty = Opal.const_get_relative($nesting, 'Regexp').$last_match(6);
      $b = self.$getDiceType(dice1, dice2), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), (dice2 = ($a[1] == null ? nil : $a[1])), $b;
      if (dice1['$=='](0)) {
        return ""};
      modifyString = ($truthy($a = modifyString) ? $a : "");
      modify = self.$parren_killer($rb_plus($rb_plus("(", modifyString), ")")).$to_i();
      difficulty = self.$getDiffculty(difficulty);
      value1 = self.$getRollValue(dice1);
      value2 = self.$getRollValue(dice2);
      total = $rb_plus($rb_plus(value1, value2), modify);
      result = self.$getResultText(value1, value2, dice1, dice2, difficulty, total);
      if ($truthy(result['$empty?']())) {
        } else {
        result = "" + " ＞ " + (result)
      };
      value1Text = "" + (value1) + "(" + (dice1) + ")";
      value2Text = (function() {if (value2['$=='](0)) {
        return ""
        } else {
        return "" + "+" + (value2) + "(" + (dice2) + ")"
      }; return nil; })();
      modifyText = self.$getModifyString(modify);
      baseText = self.$getBaseText(dice1, dice2, modify, difficulty);
      output = "" + "(" + (baseText) + ") ＞ " + (value1Text) + (value2Text) + (modifyText) + " ＞ " + (total) + (result);
      return output;
    }, TMP_Ryutama_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$getDiceType', TMP_Ryutama_getDiceType_6 = function $$getDiceType(dice1, dice2) {
      var self = this, diceBase = nil;

      
      self.$debug("getDiceType begin");
      if ($truthy(dice2['$!='](0))) {
        if ($truthy(self.$isValidDiceOne(dice1))) {
          return [dice1, dice2]
          } else {
          return [0, 0]
        }};
      if ($truthy(self.$isValidDice(dice1, dice2))) {
        return [dice1, dice2]};
      diceBase = dice1;
      dice1 = $rb_divide(diceBase, 10).$floor();
      dice2 = diceBase['$%'](10);
      if ($truthy(self.$isValidDice(dice1, dice2))) {
        return [dice1, dice2]};
      dice1 = $rb_divide(diceBase, 100).$floor();
      dice2 = diceBase['$%'](100);
      if ($truthy(self.$isValidDice(dice1, dice2))) {
        return [dice1, dice2]};
      if ($truthy(self.$isValidDiceOne(diceBase))) {
        return [diceBase, 0]};
      return [0, 0];
    }, TMP_Ryutama_getDiceType_6.$$arity = 2);
    
    Opal.defn(self, '$isValidDice', TMP_Ryutama_isValidDice_7 = function $$isValidDice(dice1, dice2) {
      var $a, self = this;

      return ($truthy($a = self.$isValidDiceOne(dice1)) ? self.$isValidDiceOne(dice2) : $a)
    }, TMP_Ryutama_isValidDice_7.$$arity = 2);
    
    Opal.defn(self, '$isValidDiceOne', TMP_Ryutama_isValidDiceOne_8 = function $$isValidDiceOne(dice) {
      var self = this;

      return self.validDiceTypes['$include?'](dice)
    }, TMP_Ryutama_isValidDiceOne_8.$$arity = 1);
    
    Opal.defn(self, '$getDiffculty', TMP_Ryutama_getDiffculty_9 = function $$getDiffculty(difficulty) {
      var self = this;

      
      if ($truthy(difficulty['$nil?']())) {
        } else {
        difficulty = difficulty.$to_i()
      };
      return difficulty;
    }, TMP_Ryutama_getDiffculty_9.$$arity = 1);
    
    Opal.defn(self, '$getRollValue', TMP_Ryutama_getRollValue_10 = function $$getRollValue(dice) {
      var self = this, value = nil;

      
      if (dice['$=='](0)) {
        return 0};
      value = $rb_plus(self.$rand(dice), 1);
      return value;
    }, TMP_Ryutama_getRollValue_10.$$arity = 1);
    
    Opal.defn(self, '$getResultText', TMP_Ryutama_getResultText_11 = function $$getResultText(value1, value2, dice1, dice2, difficulty, total) {
      var self = this;

      
      if ($truthy(self.$isFamble(value1, value2))) {
        return "１ゾロ【１ゾロポイント＋１】"};
      if ($truthy(self.$isCritical(value1, value2, dice1, dice2))) {
        return "クリティカル成功"};
      if ($truthy(difficulty['$nil?']())) {
        return ""};
      if ($truthy($rb_ge(total, difficulty))) {
        return "成功"};
      return "失敗";
    }, TMP_Ryutama_getResultText_11.$$arity = 6);
    
    Opal.defn(self, '$isFamble', TMP_Ryutama_isFamble_12 = function $$isFamble(value1, value2) {
      var $a, self = this;

      return ($truthy($a = value1['$=='](1)) ? value2['$=='](1) : $a)
    }, TMP_Ryutama_isFamble_12.$$arity = 2);
    
    Opal.defn(self, '$isCritical', TMP_Ryutama_isCritical_13 = function $$isCritical(value1, value2, dice1, dice2) {
      var $a, self = this;

      
      if (value2['$=='](0)) {
        return false};
      if ($truthy(($truthy($a = value1['$=='](6)) ? value2['$=='](6) : $a))) {
        return true};
      if ($truthy(($truthy($a = value1['$=='](dice1)) ? value2['$=='](dice2) : $a))) {
        return true};
      return false;
    }, TMP_Ryutama_isCritical_13.$$arity = 4);
    
    Opal.defn(self, '$getBaseText', TMP_Ryutama_getBaseText_14 = function $$getBaseText(dice1, dice2, modify, difficulty) {
      var self = this, baseText = nil;

      
      baseText = "" + "R" + (dice1);
      if ($truthy(dice2['$!='](0))) {
        baseText = $rb_plus(baseText, "" + "," + (dice2))};
      baseText = $rb_plus(baseText, self.$getModifyString(modify));
      if ($truthy(difficulty['$nil?']())) {
        } else {
        baseText = $rb_plus(baseText, "" + ">=" + (difficulty))
      };
      return baseText;
    }, TMP_Ryutama_getBaseText_14.$$arity = 4);
    return (Opal.defn(self, '$getModifyString', TMP_Ryutama_getModifyString_15 = function $$getModifyString(modify) {
      var self = this;

      
      if ($truthy($rb_gt(modify, 0))) {
        return $rb_plus("+", modify.$to_s())
      } else if ($truthy($rb_lt(modify, 0))) {
        return modify.$to_s()};
      return "";
    }, TMP_Ryutama_getModifyString_15.$$arity = 1), nil) && 'getModifyString';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
