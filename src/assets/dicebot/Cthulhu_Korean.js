/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$===', '$getCheckResult', '$getRegistResult', '$getCombineRoll', '$match', '$to_i', '$[]', '$>', '$+', '$roll', '$getCheckResultText', '$floor', '$/', '$*', '$<', '$<=', '$>=', '$-', '$include?', '$debug', '$==']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Cthulhu_Korean');

    var $nesting = [self].concat($parent_nesting), $Cthulhu_Korean_initialize$1, $Cthulhu_Korean_rollDiceCommand$2, $Cthulhu_Korean_getCheckResult$3, $Cthulhu_Korean_getCheckResultText$4, $Cthulhu_Korean_getRegistResult$5, $Cthulhu_Korean_getCombineRoll$6;

    self.$$prototype.special_percentage = self.$$prototype.critical_percentage = self.$$prototype.fumble_percentage = nil;
    
    Opal.const_set($nesting[0], 'ID', "Cthulhu:Korean");
    Opal.const_set($nesting[0], 'NAME', "크툴루");
    Opal.const_set($nesting[0], 'SORT_KEY', "国際化:Korean:크툴루의부름7");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "c=크리티컬치 ／ f=펌블치 ／ s=스페셜\n" + "\n" + "1d100<=n    c・f・s 모두 오프（단순하게 수치만을 뽑아낼 때 사용）\n" + "\n" + "・cfs이 붙는 판정의 커맨드\n" + "\n" + "CC\t 1d100 판정을 행함 c=1、f=100\n" + "CCB  위와 동일、c=5、f=96\n" + "\n" + "예：CC<=80  （기능치 80로 행휘판정. 1%룰으로 cf적용）\n" + "예：CCB<=55 （기능치 55로 행휘판정. 5%룰으로 cf적용）\n" + "\n" + "・경우의 수 판정에 대해서\n" + "\n" + "CBR(x,y)\tc=1、f=100\n" + "CBRB(x,y)\tc=5、f=96\n" + "\n" + "・저항 판정에 대해서\n" + "RES(x-y)\tc=1、f=100\n" + "RESB(x-y)\tc=5、f=96\n" + "\n" + "※고장 넘버 판정\n" + "\n" + "・CC(x) c=1、f=100\n" + "x=고장 넘버. 주사위 눈x이상이 나온 후에, 펌블이 동시에 발생했을 경우. 모두 출력한다. （텍스트 「펌블＆고장」）\n" + "펌블이 아닌 경우, 성공・실패에 관련되지 않고 「고장」만을 출력한다. （성공・실패를 출력하지 않고 덧쓰기한 것을 출력하는 형태）\n" + "\n" + "・CCB(x) c=5、f=96\n" + "위와 동일\n");
    self.$setPrefixes(["CC(B)?\\(\\d+\\)", "CC(B)?.*", "RES(B)?.*", "CBR(B)?\\(\\d+,\\d+\\)"]);
    
    Opal.def(self, '$initialize', $Cthulhu_Korean_initialize$1 = function $$initialize() {
      var $iter = $Cthulhu_Korean_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Cthulhu_Korean_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Cthulhu_Korean_initialize$1, false), $zuper, $iter);
      self.special_percentage = 20;
      self.critical_percentage = 1;
      return (self.fumble_percentage = 1);
    }, $Cthulhu_Korean_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $Cthulhu_Korean_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      
      $case = command;
      if (/CCB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getCheckResult(command);}
      else if (/CC/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getCheckResult(command);}
      else if (/RESB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getRegistResult(command);}
      else if (/CBRB/i['$===']($case)) {
      self.critical_percentage = 5;
      self.fumble_percentage = 5;
      return self.$getCombineRoll(command);}
      else if (/RES/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getRegistResult(command);}
      else if (/CBR/i['$===']($case)) {
      self.critical_percentage = 1;
      self.fumble_percentage = 1;
      return self.$getCombineRoll(command);};
      return nil;
    }, $Cthulhu_Korean_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$getCheckResult', $Cthulhu_Korean_getCheckResult$3 = function $$getCheckResult(command) {
      var $a, $b, self = this, broken_num = nil, diff = nil, m = nil, output = nil, total_n = nil;

      
      broken_num = 0;
      diff = 0;
      if ($truthy((m = /CC(B)?(\d+)<=(\d+)/i.$match(command)))) {
        
        broken_num = m['$[]'](2).$to_i();
        diff = m['$[]'](3).$to_i();
      } else if ($truthy((m = /CC(B)?<=(\d+)/i.$match(command)))) {
        diff = m['$[]'](2).$to_i()};
      output = "";
      if ($truthy($rb_gt(diff, 0))) {
        
        output = "" + "(1D100<=" + (diff) + ")";
        if ($truthy($rb_gt(broken_num, 0))) {
          output = $rb_plus(output, "" + " 고장넘버[" + (broken_num) + "]")};
        $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
        output = $rb_plus(output, "" + " ＞ " + (total_n));
        output = $rb_plus(output, "" + " ＞ " + (self.$getCheckResultText(total_n, diff, broken_num)));
      } else {
        
        $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
        output = "" + "(1D100) ＞ " + (total_n);
      };
      return output;
    }, $Cthulhu_Korean_getCheckResult$3.$$arity = 1);
    
    Opal.def(self, '$getCheckResultText', $Cthulhu_Korean_getCheckResultText$4 = function $$getCheckResultText(total_n, diff, broken_num) {
      var $a, self = this, result = nil, diff_special = nil, fumble = nil;

      
      
      if (broken_num == null) {
        broken_num = 0;
      };
      result = "";
      diff_special = 0;
      fumble = false;
      if ($truthy($rb_gt(self.special_percentage, 0))) {
        
        diff_special = $rb_divide($rb_times(diff, self.special_percentage), 100).$floor();
        if ($truthy($rb_lt(diff_special, 1))) {
          diff_special = 1};};
      if ($truthy(($truthy($a = $rb_le(total_n, diff)) ? $rb_lt(total_n, 100) : $a))) {
        
        result = "성공";
        if ($truthy($rb_gt(diff_special, 0))) {
          if ($truthy($rb_le(total_n, self.critical_percentage))) {
            if ($truthy($rb_le(total_n, diff_special))) {
              result = "크리티컬/스페셜"
            } else {
              result = "크리티컬"
            }
          } else if ($truthy($rb_le(total_n, diff_special))) {
            result = "스페셜"}};
      } else {
        
        result = "실패";
        if ($truthy($rb_gt(diff_special, 0))) {
          if ($truthy(($truthy($a = $rb_ge(total_n, $rb_minus(101, self.fumble_percentage))) ? $rb_lt(diff, 100) : $a))) {
            
            result = "펌블";
            fumble = true;}};
      };
      if ($truthy($rb_gt(broken_num, 0))) {
        if ($truthy($rb_ge(total_n, broken_num))) {
          if ($truthy(fumble)) {
            result = $rb_plus(result, "/고장")
          } else {
            result = "고장"
          }}};
      return result;
    }, $Cthulhu_Korean_getCheckResultText$4.$$arity = -3);
    
    Opal.def(self, '$getRegistResult', $Cthulhu_Korean_getRegistResult$5 = function $$getRegistResult(command) {
      var $a, $b, self = this, m = nil, value = nil, target = nil, total_n = nil, result = nil;

      
      m = /RES(B)?([-\d]+)/i.$match(command);
      if ($truthy(m)) {
      } else {
        return "1"
      };
      value = m['$[]'](2).$to_i();
      target = $rb_plus($rb_times(value, 5), 50);
      if ($truthy($rb_lt(target, 5))) {
        return "" + "(1d100<=" + (target) + ") ＞ 자동실패"};
      if ($truthy($rb_gt(target, 95))) {
        return "" + "(1d100<=" + (target) + ") ＞ 자동성공"};
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total_n = ($a[0] == null ? nil : $a[0])), $b;
      result = self.$getCheckResultText(total_n, target);
      return "" + "(1d100<=" + (target) + ") ＞ " + (total_n) + " ＞ " + (result);
    }, $Cthulhu_Korean_getRegistResult$5.$$arity = 1);
    return (Opal.def(self, '$getCombineRoll', $Cthulhu_Korean_getCombineRoll$6 = function $$getCombineRoll(command) {
      var $a, $b, self = this, m = nil, diff_1 = nil, diff_2 = nil, total = nil, result_1 = nil, result_2 = nil, successList = nil, succesCount = nil, rank = nil;

      
      m = /CBR(B)?\((\d+),(\d+)\)/i.$match(command);
      if ($truthy(m)) {
      } else {
        return "1"
      };
      diff_1 = m['$[]'](2).$to_i();
      diff_2 = m['$[]'](3).$to_i();
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), $b;
      result_1 = self.$getCheckResultText(total, diff_1);
      result_2 = self.$getCheckResultText(total, diff_2);
      successList = ["크리티컬/스페셜", "크리티컬", "스페셜", "성공"];
      succesCount = 0;
      if ($truthy(successList['$include?'](result_1))) {
        succesCount = $rb_plus(succesCount, 1)};
      if ($truthy(successList['$include?'](result_2))) {
        succesCount = $rb_plus(succesCount, 1)};
      self.$debug("succesCount", succesCount);
      rank = (function() {if ($truthy($rb_ge(succesCount, 2))) {
        return "성공"
      } else if (succesCount['$=='](1)) {
        return "부분적 성공"
      } else {
        return "실패"
      }; return nil; })();
      return "" + "(1d100<=" + (diff_1) + "," + (diff_2) + ") ＞ " + (total) + "[" + (result_1) + "," + (result_2) + "] ＞ " + (rank);
    }, $Cthulhu_Korean_getCombineRoll$6.$$arity = 1), nil) && 'getCombineRoll';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
