/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$div', '$%', '$>', '$<=', '$/']);
  return (function($base, $super, $parent_nesting) {
    function $Chill3(){};
    var self = $Chill3 = $klass($base, $super, 'Chill3', $Chill3);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Chill3_gameName_1, TMP_Chill3_gameType_2, TMP_Chill3_getHelpMessage_3, TMP_Chill3_check_1D100_4;

    
    
    Opal.defn(self, '$gameName', TMP_Chill3_gameName_1 = function $$gameName() {
      var self = this;

      return "Chill 3"
    }, TMP_Chill3_gameName_1.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_Chill3_gameType_2 = function $$gameType() {
      var self = this;

      return "Chill3"
    }, TMP_Chill3_gameType_2.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_Chill3_getHelpMessage_3 = function $$getHelpMessage() {
      var self = this;

      return "" + "・1D100で判定時に成否、Botchを判定\n" + "　例）1D100<=50\n" + "　　　Chill3 : (1D100<=50) ＞ 55 ＞ Botch\n"
    }, TMP_Chill3_getHelpMessage_3.$$arity = 0);
    return (Opal.defn(self, '$check_1D100', TMP_Chill3_check_1D100_4 = function $$check_1D100(total_n, dice_n, signOfInequality, diff, _dice_cnt, _dice_max, _n1, _n_max) {
      var $a, self = this, s10 = nil, s1 = nil;

      
      if (signOfInequality['$==']("<=")) {
        } else {
        return ""
      };
      s10 = dice_n.$div(10);
      s1 = dice_n['$%'](10);
      if (s10['$=='](10)) {
        s10 = 0};
      if (s10['$=='](s1)) {
        
        if ($truthy(($truthy($a = $rb_gt(total_n, diff)) ? $a : dice_n['$=='](100)))) {
          
          if ($truthy($rb_gt(diff, 100))) {
            return " ＞ 失敗"};
          return " ＞ Botch";};
        return " ＞ Ｃ成功";};
      if ($truthy(($truthy($a = $rb_le(total_n, diff)) ? $a : dice_n['$=='](1)))) {
        
        if ($truthy($rb_le(total_n, $rb_divide(diff, 2)))) {
          return " ＞ Ｈ成功"};
        return " ＞ Ｌ成功";};
      return " ＞ 失敗";
    }, TMP_Chill3_check_1D100_4.$$arity = 8), nil) && 'check_1D100';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
