/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$setPrefixes', '$debug', '$===', '$last_match', '$to_i', '$[]', '$checkRoll', '$+', '$empty?', '$getValue', '$<', '$>', '$format_modifier', '$roll', '$sort', '$collect', '$split', '$join', '$getRollResultString', '$getSuccessInfo', '$==', '$!=', '$getSuccessResultText', '$<=', '$to_s', '$>=', '$each']);
  
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CodeLayerd');

    var $nesting = [self].concat($parent_nesting), $CodeLayerd_isGetOriginalMessage$1, $CodeLayerd_rollDiceCommand$2, $CodeLayerd_checkRoll$3, $CodeLayerd_getRollResultString$5, $CodeLayerd_getSuccessResultText$6, $CodeLayerd_getSuccessInfo$7, $CodeLayerd_getValue$9;

    
    self.$include($$($nesting, 'ModifierFormatter'));
    Opal.const_set($nesting[0], 'ID', "CodeLayerd");
    Opal.const_set($nesting[0], 'NAME', "コード：レイヤード");
    Opal.const_set($nesting[0], 'SORT_KEY', "こおとれいやあと");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定（nCL@m[c]+x または nCL+x@m[c]） クリティカル・ファンブル判定あり\n" + "  (ダイス数)CL+(修正値)@(判定値)[(クリティカル値)]+(修正値2)\n" + "\n" + "  @m,[c],+xは省略可能。(@6[1]として処理)\n" + "  n個のD10でmを判定値、cをクリティカル値とした行為判定を行う。\n" + "  例）\n" + "  7CL>=5 ：サイコロ7個で判定値6のロールを行い、目標値5に対して判定\n" + "  4CL@7  ：サイコロ4個で判定値7のロールを行い達成値を出す\n" + "  4CL+2@7 または 4CL@7+2  ：サイコロ4個で判定値7のロールを行い達成値を出し、修正値2を足す。\n" + "  4CL[2] ：サイコロ4個でクリティカル値2のロールを行う。\n");
    self.$setPrefixes(["\\d*CL([+-]\\d+)?[@\\d]*.*"]);
    
    Opal.def(self, '$isGetOriginalMessage', $CodeLayerd_isGetOriginalMessage$1 = function $$isGetOriginalMessage() {
      var self = this;

      return true
    }, $CodeLayerd_isGetOriginalMessage$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $CodeLayerd_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var $a, self = this, result = nil, $case = nil, m = nil, base = nil, modifier1 = nil, target = nil, criticalTarget = nil, modifier2 = nil, diff = nil;

      
      self.$debug("rollDiceCommand command", command);
      result = "";
      $case = command;
      if (/(\d+)?CL([+-]\d+)?(\@(\d))?(\[(\d+)\])?([+-]\d+)?(>=(\d+))?/i['$===']($case)) {
      m = $$($nesting, 'Regexp').$last_match();
      base = ($truthy($a = m['$[]'](1)) ? $a : 1).$to_i();
      modifier1 = m['$[]'](2).$to_i();
      target = ($truthy($a = m['$[]'](4)) ? $a : 6).$to_i();
      criticalTarget = ($truthy($a = m['$[]'](6)) ? $a : 1).$to_i();
      modifier2 = m['$[]'](7).$to_i();
      diff = m['$[]'](9).$to_i();
      result = self.$checkRoll(base, target, criticalTarget, diff, $rb_plus(modifier1, modifier2));};
      if ($truthy(result['$empty?']())) {
        return nil};
      return "" + (command) + " ＞ " + (result);
    }, $CodeLayerd_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$checkRoll', $CodeLayerd_checkRoll$3 = function $$checkRoll(base, target, criticalTarget, diff, modifier) {
      var $a, $b, $$4, self = this, result = nil, _ = nil, diceText = nil, diceList = nil;

      
      result = "";
      base = self.$getValue(base);
      target = self.$getValue(target);
      criticalTarget = self.$getValue(criticalTarget);
      if ($truthy($rb_lt(base, 1))) {
        return result};
      if ($truthy($rb_gt(target, 10))) {
        target = 10};
      result = $rb_plus(result, "" + "(" + (base) + "d10" + (self.$format_modifier(modifier)) + ")");
      $b = self.$roll(base, 10), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      diceList = $send(diceText.$split(/,/), 'collect', [], ($$4 = function(i){var self = $$4.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$4.$$s = self, $$4.$$arity = 1, $$4)).$sort();
      result = $rb_plus(result, "" + " ＞ [" + (diceList.$join(",")) + "]" + (self.$format_modifier(modifier)) + " ＞ ");
      result = $rb_plus(result, self.$getRollResultString(diceList, target, criticalTarget, diff, modifier));
      return result;
    }, $CodeLayerd_checkRoll$3.$$arity = 5);
    
    Opal.def(self, '$getRollResultString', $CodeLayerd_getRollResultString$5 = function $$getRollResultString(diceList, target, criticalTarget, diff, modifier) {
      var $a, $b, self = this, successCount = nil, criticalCount = nil, successTotal = nil, result = nil, successText = nil;

      
      $b = self.$getSuccessInfo(diceList, target, criticalTarget), $a = Opal.to_ary($b), (successCount = ($a[0] == null ? nil : $a[0])), (criticalCount = ($a[1] == null ? nil : $a[1])), $b;
      successTotal = $rb_plus($rb_plus(successCount, criticalCount), modifier);
      result = "";
      result = $rb_plus(result, "" + "判定値[" + (target) + "] ");
      if (criticalTarget['$=='](1)) {
      } else {
        result = $rb_plus(result, "" + "クリティカル値[" + (criticalTarget) + "] ")
      };
      result = $rb_plus(result, "" + "達成値[" + (successCount) + "]");
      if ($truthy($rb_gt(criticalCount, 0))) {
        result = $rb_plus(result, "" + "+クリティカル[" + (criticalCount) + "]")};
      result = $rb_plus(result, self.$format_modifier(modifier));
      if ($truthy(($truthy($a = $rb_gt(criticalCount, 0)) ? $a : modifier['$!='](0)))) {
        result = $rb_plus(result, "" + "=[" + (successTotal) + "]")};
      successText = self.$getSuccessResultText(successTotal, diff);
      result = $rb_plus(result, "" + " ＞ " + (successText));
      return result;
    }, $CodeLayerd_getRollResultString$5.$$arity = 5);
    
    Opal.def(self, '$getSuccessResultText', $CodeLayerd_getSuccessResultText$6 = function $$getSuccessResultText(successTotal, diff) {
      var self = this;

      
      if ($truthy($rb_le(successTotal, 0))) {
        return "ファンブル！"};
      if (diff['$=='](0)) {
        return successTotal.$to_s()};
      if ($truthy($rb_ge(successTotal, diff))) {
        return "成功"};
      return "失敗";
    }, $CodeLayerd_getSuccessResultText$6.$$arity = 2);
    
    Opal.def(self, '$getSuccessInfo', $CodeLayerd_getSuccessInfo$7 = function $$getSuccessInfo(diceList, target, criticalTarget) {
      var $$8, self = this, successCount = nil, criticalCount = nil;

      
      self.$debug("checkSuccess diceList, target, criticalTarget", diceList, target, criticalTarget);
      successCount = 0;
      criticalCount = 0;
      $send(diceList, 'each', [], ($$8 = function(dice){var self = $$8.$$s || this;

      
        
        if (dice == null) {
          dice = nil;
        };
        if ($truthy($rb_le(dice, target))) {
          successCount = $rb_plus(successCount, 1)};
        if ($truthy($rb_le(dice, criticalTarget))) {
          return (criticalCount = $rb_plus(criticalCount, 1))
        } else {
          return nil
        };}, $$8.$$s = self, $$8.$$arity = 1, $$8));
      return [successCount, criticalCount];
    }, $CodeLayerd_getSuccessInfo$7.$$arity = 3);
    return (Opal.def(self, '$getValue', $CodeLayerd_getValue$9 = function $$getValue(number) {
      var self = this;

      
      if ($truthy($rb_gt(number, 100))) {
        return 0};
      return number;
    }, $CodeLayerd_getValue$9.$$arity = 1), nil) && 'getValue';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
