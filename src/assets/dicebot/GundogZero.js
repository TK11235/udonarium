/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>=', '$<=', '$floor', '$/', '$-', '$*', '$+']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Gundog');

    var $nesting = [self].concat($parent_nesting), $Gundog_check_1D100$1, $Gundog_isD9$2;

    
    Opal.const_set($nesting[0], 'ID', "Gundog");
    Opal.const_set($nesting[0], 'NAME', "ガンドッグ");
    Opal.const_set($nesting[0], 'SORT_KEY', "かんとつく");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "失敗、成功、クリティカル、ファンブルとロールの達成値の自動判定を行います。\n" + "nD9ロールも対応。\n");
    
    Opal.def(self, '$check_1D100', $Gundog_check_1D100$1 = function $$check_1D100(total, _dice_total, cmp_op, target) {
      var self = this, dig10 = nil, dig1 = nil;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      if ($truthy($rb_ge(total, 100))) {
        return " ＞ ファンブル"
      } else if ($truthy($rb_le(total, 1))) {
        return " ＞ 絶対成功(達成値1+SL)"
      } else if ($truthy($rb_le(total, target))) {
        
        dig10 = $rb_divide(total, 10).$floor();
        dig1 = $rb_minus(total, $rb_times(dig10, 10));
        if ($truthy($rb_ge(dig10, 10))) {
          dig10 = 0};
        if ($truthy($rb_ge(dig1, 10))) {
          dig1 = 0};
        if ($truthy($rb_le(dig1, 0))) {
          return " ＞ クリティカル(達成値20+SL)"
        } else {
          return "" + " ＞ 成功(達成値" + ($rb_plus(dig10, dig1)) + "+SL)"
        };
      } else {
        return " ＞ 失敗"
      };
    }, $Gundog_check_1D100$1.$$arity = 4);
    return (Opal.def(self, '$isD9', $Gundog_isD9$2 = function $$isD9() {
      var self = this;

      return true
    }, $Gundog_isD9$2.$$arity = 0), nil) && 'isD9';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
Opal.loaded(["diceBot/Gundog.js"]);
/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$setPrefixes', '$upcase', '$=~', '$last_match', '$to_i', '$parren_killer', '$getDamageTypeAndTable', '$getFumbleTypeAndTable', '$empty?', '$+', '$rand', '$<', '$>', '$[]', '$===']);
  
  self.$require("diceBot/Gundog");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GundogZero');

    var $nesting = [self].concat($parent_nesting), $GundogZero_rollDiceCommand$1, $GundogZero_getDamageTypeAndTable$2, $GundogZero_getFumbleTypeAndTable$3;

    
    Opal.const_set($nesting[0], 'ID', "GundogZero");
    Opal.const_set($nesting[0], 'NAME', "ガンドッグ・ゼロ");
    Opal.const_set($nesting[0], 'SORT_KEY', "かんとつくせろ");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "失敗、成功、クリティカル、ファンブルとロールの達成値の自動判定を行います。\n" + "nD9ロールも対応。\n" + "・ダメージペナルティ表　　(〜DPTx) (x:修正)\n" + "　射撃(SDPT)、格闘(MDPT)、車両(VDPT)、汎用(GDPT)の各表を引くことが出来ます。\n" + "　修正を後ろに書くことも出来ます。\n" + "・ファンブル表　　　　　　(〜FTx)  (x:修正)\n" + "　射撃(SFT)、格闘(MFT)、投擲(TFT)の各表を引くことが出来ます。\n" + "　修正を後ろに書くことも出来ます。\n");
    self.$setPrefixes(["(.DPT|.FT)\\d*"]);
    
    Opal.def(self, '$rollDiceCommand', $GundogZero_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, string = nil, table = nil, ttype = nil, type = nil, dice = nil, mod = nil, head = nil, diceOriginalText = nil, output = nil;

      
      string = command.$upcase();
      table = [];
      ttype = "";
      type = "";
      dice = 0;
      mod = 0;
      if ($truthy(/(\w)DPT([\+\-\d]*)/i['$=~'](string))) {
        
        ttype = "ダメージペナルティー";
        head = $$($nesting, 'Regexp').$last_match(1);
        if ($truthy($$($nesting, 'Regexp').$last_match(2))) {
          mod = self.$parren_killer("" + "(0" + ($$($nesting, 'Regexp').$last_match(2)) + ")").$to_i()};
        $b = self.$getDamageTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      if ($truthy(/(\w)FT([\+\-\d]*)/i['$=~'](string))) {
        
        ttype = "ファンブル";
        head = $$($nesting, 'Regexp').$last_match(1);
        if ($truthy($$($nesting, 'Regexp').$last_match(2))) {
          mod = self.$parren_killer("" + "(0" + ($$($nesting, 'Regexp').$last_match(2)) + ")").$to_i()};
        $b = self.$getFumbleTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      if ($truthy(type['$empty?']())) {
        return "1"};
      dice = $rb_plus($rb_plus(self.$rand(10), self.$rand(10)), mod);
      diceOriginalText = dice;
      if ($truthy($rb_lt(dice, 0))) {
        dice = 0};
      if ($truthy($rb_gt(dice, 18))) {
        dice = 18};
      output = "" + (type) + (ttype) + "表[" + (diceOriginalText) + "] ＞ " + (table['$[]'](dice));
      return output;
    }, $GundogZero_rollDiceCommand$1.$$arity = 1);
    
    Opal.def(self, '$getDamageTypeAndTable', $GundogZero_getDamageTypeAndTable$2 = function $$getDamageTypeAndTable(head) {
      var $a, $b, self = this, $case = nil, type = nil, table = nil;

      
      $case = head;
      if ("S"['$===']($case)) {
      type = "射撃";
      table = ["対象は[死亡]", "[追加D]4D6/[出血]2D6/[重傷]-30％/[朦朧判定]15", "[追加D]3D6/[出血]2D6/[重傷]-30％/[朦朧判定]14", "[追加D]3D6/[出血]2D6/[重傷]-20％/[朦朧判定]14", "[追加D]3D6/[出血]1D6/[重傷]-20％/[朦朧判定]12", "[追加D]2D6/[出血]1D6/[重傷]-10％/[朦朧判定]12", "[追加D]2D6/[軽傷]-20％/[朦朧判定]10", "[追加D]2D6/[軽傷]-10％/[朦朧判定]10", "[追加D]2D6/[軽傷]-20％/[朦朧判定]8", "[追加D]2D6/[軽傷]-20％/[朦朧判定]6", "[追加D]2D6/[軽傷]-10％/[朦朧判定]4", "[追加D]1D6/[軽傷]-20％", "[追加D]1D6/[軽傷]-20％", "[追加D]1D6/[軽傷]-10％", "[軽傷]-20％", "[軽傷]-10％", "[軽傷]-10％", "手に持った武器を落とす", "ペナルティー無し"];}
      else if ("M"['$===']($case)) {
      type = "格闘";
      table = ["対象は[死亡]", "[追加D]3D6/[出血]2D6/[重傷]-30％/[朦朧判定]15", "[追加D]2D6/[出血]2D6/[重傷]-30％/[朦朧判定]14", "[追加D]2D6/[出血]1D6/[重傷]-20％/[朦朧判定]14", "[追加D]3D6/[出血]1D6/[重傷]-10％/[朦朧判定]12", "[追加D]2D6/[軽傷]-20％/[朦朧判定]12", "[追加D]2D6/[軽傷]-10％/[朦朧判定]12", "[追加D]2D6/[軽傷]-10％/[朦朧判定]10", "[追加D]1D6/[軽傷]-20％/[朦朧判定]8", "[追加D]1D6/[軽傷]-10％/[朦朧判定]8", "[追加D]1D6/[軽傷]-10％/[朦朧判定]6", "[軽傷]-20％/[朦朧判定]6", "[軽傷]-10％/[朦朧判定]6", "[軽傷]-10％/[朦朧判定]4", "[軽傷]-20％", "[軽傷]-10％", "[軽傷]-10％", "手に持った武器を落とす", "ペナルティー無し"];}
      else if ("V"['$===']($case)) {
      type = "車両";
      table = ["[クラッシュ]する。[チェイス]から除外", "[乗員D]3D6/[操縦性]-20％/[スピン判定]", "[乗員D]3D6/[操縦性]-20％/[スピン判定]", "[乗員D]2D6/[操縦性]-10％/[スピン判定]", "[乗員D]2D6/[操縦性]-10％/[スピン判定]", "[乗員D]3D6/[スピード]-2/[スピン判定]", "[乗員D]3D6/[スピード]-2/[スピン判定]", "[乗員D]2D6/[スピード]-1/[スピン判定]", "[乗員D]2D6/[スピード]-1/[スピン判定]", "[乗員D]2D6/[操縦判定]-20％", "[乗員D]2D6/[操縦判定]-20％", "[乗員D]1D6/[操縦判定]-10％", "[乗員D]1D6/[操縦判定]-10％", "[スピン判定]", "[スピン判定]", "乗員に[ショック]-20％", "乗員に[ショック]-10％", "乗員に[ショック]-10％", "ペナルティー無し"];}
      else if ("G"['$===']($case)) {
      type = "汎用";
      table = ["対象は[死亡]", "[追加D]4D6/[出血]2D6/[重傷]-30％/[朦朧判定]18", "[追加D]4D6/[出血]2D6/[重傷]-30％/[朦朧判定]16", "[追加D]3D6/[出血]2D6/[重傷]-20％/[朦朧判定]14", "[追加D]3D6/[出血]2D6/[重傷]-20％/[朦朧判定]14", "[追加D]3D6/[出血]1D6/[重傷]-10％/[朦朧判定]12", "[追加D]2D6/[出血]1D6/[重傷]-10％/[朦朧判定]12", "[追加D]2D6/[軽傷]-30％/[朦朧判定]12", "[追加D]2D6/[軽傷]-30％/[朦朧判定]10", "[追加D]2D6/[軽傷]-30％/[朦朧判定]8", "[追加D]2D6/[軽傷]-20％/[朦朧判定]8", "[追加D]2D6/[軽傷]-20％/[朦朧判定]6", "[追加D]2D6/[軽傷]-10％/[朦朧判定]6", "[追加D]1D6/[軽傷]-20％/[朦朧判定]4", "[追加D]1D6/[軽傷]-20％", "[追加D]1D6/[軽傷]-10％", "[軽傷]-20％", "[軽傷]-10％", "ペナルティー無し"];}
      else {
      head = "S";
      $b = self.$getDamageTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      return [type, table];
    }, $GundogZero_getDamageTypeAndTable$2.$$arity = 1);
    return (Opal.def(self, '$getFumbleTypeAndTable', $GundogZero_getFumbleTypeAndTable$3 = function $$getFumbleTypeAndTable(head) {
      var $a, $b, self = this, $case = nil, type = nil, table = nil;

      
      $case = head;
      if ("S"['$===']($case)) {
      type = "射撃";
      table = ["銃器が暴発、自分に命中。[貫通D]", "銃器が暴発、自分に命中。[非貫通D]", "誤射。ランダムに味方に命中。[貫通D]", "誤射。ランダムに味方に命中。[非貫通D]", "銃器が完全に故障", "銃器が完全に故障", "故障。〈メカニック〉判定に成功するまで射撃不可", "故障。〈メカニック〉判定に成功するまで射撃不可", "作動不良。[アイテム使用]を2回行って修理するまで射撃不可", "作動不良。[アイテム使用]を2回行って修理するまで射撃不可", "作動不良。[アイテム使用]を行って修理するまで射撃不可", "作動不良。[アイテム使用]を行って修理するまで射撃不可", "姿勢を崩す。[不安定]", "姿勢を崩す。[不安定]", "姿勢を崩す。[ショック]-20％", "姿勢を崩す。[ショック]-20％", "姿勢を崩す。[ショック]-10％", "姿勢を崩す。[ショック]-10％", "ペナルティー無し"];}
      else if ("M"['$===']($case)) {
      type = "格闘";
      table = ["避けられて[転倒]、[朦朧]状態", "ランダムに[至近距離]の味方(居なければ自分)に命中。[貫通D]", "ランダムに[至近距離]の味方(居なければ自分)に命中。[貫通D]", "武器が完全に壊れる", "武器がガタつく。〈手先〉判定に成功するまで使用不可", "武器がガタつく。〈手先〉判定に成功するまで使用不可", "無理な姿勢で筋を伸ばす。[軽傷]-30％", "無理な姿勢で筋を伸ばす。[軽傷]-30％", "無理な姿勢で筋を伸ばす。[軽傷]-20％", "無理な姿勢で筋を伸ばす。[軽傷]-20％", "無理な姿勢で筋を伸ばす。[軽傷]-10％", "無理な姿勢で筋を伸ばす。[軽傷]-10％", "姿勢を崩す。[不安定]", "姿勢を崩す。[不安定]", "姿勢を崩す。[ショック]-20％", "姿勢を崩す。[ショック]-20％", "姿勢を崩す。[ショック]-10％", "姿勢を崩す。[ショック]-10％", "ペナルティー無し"];}
      else if ("T"['$===']($case)) {
      type = "投擲";
      table = ["[転倒]、[朦朧]状態", "自分に命中。[貫通D]", "自分に命中。[非貫通D]", "ランダムに味方(居なければ自分)に命中。[非貫通D]", "ランダムに味方(居なければ自分)に命中。[非貫通D]", "武器が完全に壊れる", "武器が完全に壊れる", "腰を痛める。[軽傷]-30％", "肩を痛める。[軽傷]-20％", "肩を痛める。[軽傷]-20％", "肘に違和感。[軽傷]-10％", "肘に違和感。[軽傷]-10％", "姿勢を崩す。[不安定]", "姿勢を崩す。[不安定]", "姿勢を崩す。[ショック]-20％", "姿勢を崩す。[ショック]-20％", "姿勢を崩す。[ショック]-10％", "姿勢を崩す。[ショック]-10％", "ペナルティー無し"];}
      else {
      head = "S";
      $b = self.$getFumbleTypeAndTable(head), $a = Opal.to_ary($b), (type = ($a[0] == null ? nil : $a[0])), (table = ($a[1] == null ? nil : $a[1])), $b;};
      return [type, table];
    }, $GundogZero_getFumbleTypeAndTable$3.$$arity = 1), nil) && 'getFumbleTypeAndTable';
  })($nesting[0], $$($nesting, 'Gundog'), $nesting);
})(Opal);
