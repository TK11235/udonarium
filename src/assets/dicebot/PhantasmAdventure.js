/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$<', '$-', '$>', '$+', '$roll', '$>=', '$<=', '$sendMode', '$to_s', '$*']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'PhantasmAdventure');

    var $nesting = [self].concat($parent_nesting), $PhantasmAdventure_initialize$1, $PhantasmAdventure_check_1D20$2;

    
    Opal.const_set($nesting[0], 'ID', "PhantasmAdventure");
    Opal.const_set($nesting[0], 'NAME', "ファンタズムアドベンチャー");
    Opal.const_set($nesting[0], 'SORT_KEY', "ふあんたすむあとへんちやあ");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "成功、失敗、決定的成功、決定的失敗の表示とクリティカル・ファンブル値計算の実装。\n");
    
    Opal.def(self, '$initialize', $PhantasmAdventure_initialize$1 = function $$initialize() {
      var $iter = $PhantasmAdventure_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $PhantasmAdventure_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $PhantasmAdventure_initialize$1, false), $zuper, $iter);
      return (self.sendMode = 2);
    }, $PhantasmAdventure_initialize$1.$$arity = 0);
    return (Opal.def(self, '$check_1D20', $PhantasmAdventure_check_1D20$2 = function $$check_1D20(total, _dice_total, cmp_op, diff) {
      var $a, $b, self = this, skill_mod = nil, fumble = nil, critical = nil, dice_now = nil, fum_num = nil, fum_str = nil, crit_num = nil;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      skill_mod = 0;
      if ($truthy($rb_lt(diff, 1))) {
        skill_mod = $rb_minus(diff, 1)
      } else if ($truthy($rb_gt(diff, 20))) {
        skill_mod = $rb_minus(diff, 20)};
      fumble = $rb_plus(20, skill_mod);
      if ($truthy($rb_gt(fumble, 20))) {
        fumble = 20};
      critical = $rb_plus(1, skill_mod);
      $b = self.$roll(1, 20), $a = Opal.to_ary($b), (dice_now = ($a[0] == null ? nil : $a[0])), $b;
      if ($truthy(($truthy($a = $rb_ge(total, fumble)) ? $a : $rb_ge(total, 20)))) {
        
        fum_num = $rb_minus(dice_now, skill_mod);
        if ($truthy($rb_gt(fum_num, 20))) {
          fum_num = 20};
        if ($truthy($rb_lt(fum_num, 1))) {
          fum_num = 1};
        if ($truthy($rb_le(self.$sendMode(), 1))) {
          return "" + " ＞ 致命的失敗(" + (fum_num) + ")"};
        fum_str = dice_now.$to_s();
        if ($truthy($rb_lt(skill_mod, 0))) {
          fum_str = $rb_plus(fum_str, "" + "+" + ($rb_times(skill_mod, -1)) + "=" + (fum_num))
        } else {
          fum_str = $rb_plus(fum_str, "" + "-" + (skill_mod) + "=" + (fum_num))
        };
        return "" + " ＞ 致命的失敗(" + (fum_str) + ")";
      } else if ($truthy(($truthy($a = $rb_le(total, critical)) ? $a : $rb_le(total, 1)))) {
        
        crit_num = $rb_plus(dice_now, skill_mod);
        if ($truthy($rb_gt(crit_num, 20))) {
          crit_num = 20};
        if ($truthy($rb_lt(crit_num, 1))) {
          crit_num = 1};
        if ($truthy($rb_lt(skill_mod, 0))) {
          return " ＞ 成功"};
        if ($truthy($rb_gt(self.$sendMode(), 1))) {
          return "" + " ＞ 決定的成功(" + (dice_now) + "+" + (skill_mod) + "=" + (crit_num) + ")"};
        return "" + " ＞ 決定的成功(" + (crit_num) + ")";
      } else if ($truthy($rb_le(total, diff))) {
        return " ＞ 成功"
      } else {
        return " ＞ 失敗"
      };
    }, $PhantasmAdventure_check_1D20$2.$$arity = 4), nil) && 'check_1D20';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
