/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$upcase', '$===', '$==', '$last_match', '$to_i', '$scan', '$each', '$+', '$checkRoll', '$roll', '$getValueText', '$>=', '$<', '$to_s']);
  return (function($base, $super, $parent_nesting) {
    function $TherapieSein(){};
    var self = $TherapieSein = $klass($base, $super, 'TherapieSein', $TherapieSein);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TherapieSein_initialize_1, TMP_TherapieSein_gameName_2, TMP_TherapieSein_gameType_3, TMP_TherapieSein_getHelpMessage_4, TMP_TherapieSein_rollDiceCommand_6, TMP_TherapieSein_checkRoll_7, TMP_TherapieSein_getValueText_8;

    
    self.$setPrefixes(["(TS|OP)(\\d+)?([\\+\\-]\\d)*(\\@\\d+)?"]);
    
    Opal.defn(self, '$initialize', TMP_TherapieSein_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_TherapieSein_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_TherapieSein_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_TherapieSein_initialize_1, false), $zuper, $iter)
    }, TMP_TherapieSein_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_TherapieSein_gameName_2 = function $$gameName() {
      var self = this;

      return "青春疾患セラフィザイン"
    }, TMP_TherapieSein_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_TherapieSein_gameType_3 = function $$gameType() {
      var self = this;

      return "TherapieSein"
    }, TMP_TherapieSein_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_TherapieSein_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・一般判定：TS[n][±m][@t]　　[]内のコマンドは省略可能。クリティカル無。\n" + "・戦闘判定：OP[n][±m][@t]　　[]内のコマンドは省略可能。クリティカル有。\n" + "\n" + "「n」で能力値修正などを指定。\n" + "「±m」で達成値への修正値を追加指定。+5+1-3のように、複数指定も可能です。\n" + "「@t」で目標値を指定。省略時は達成値のみ表示、指定時は判定の正否を追加表示。\n" + "\n" + "【書式例】\n" + "・TS → ダイスの合計値を達成値として表示。\n" + "・TS4 → ダイス合計+4を達成値表示。\n" + "・TS4-1 → ダイス合計+4-1（計+3）を達成値表示。\n" + "・TS2+1@10 → ダイス合計+2+1（計+3）の達成値と、判定の成否を表示。\n" + "・OP4+3+1 → ダイス合計+4+3+1（計+8）を達成値＆クリティカル表示。\n" + "・OP3@12 → ダイス合計+3の達成値＆クリティカル、判定の成否を表示。\n"
    }, TMP_TherapieSein_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_TherapieSein_rollDiceCommand_6 = function $$rollDiceCommand(command) {
      var $a, TMP_5, self = this, output = nil, $case = nil, hasCritical = nil, target = nil, modify = nil, modifyAddString = nil, modify_list = nil;

      
      output = (function() {$case = command.$upcase();
      if (/(TS|OP)(\d+)?(([\+\-]\d+)*)(\@(\d+))?$/i['$===']($case)) {
      hasCritical = Opal.const_get_relative($nesting, 'Regexp').$last_match(1)['$==']("OP");
      target = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(6)) ? $a : 0).$to_i();
      modify = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(2)) ? $a : 0).$to_i();
      modifyAddString = Opal.const_get_relative($nesting, 'Regexp').$last_match(3);
      modify_list = modifyAddString.$scan(/[\+\-]\d+/);
      $send(modify_list, 'each', [], (TMP_5 = function(i){var self = TMP_5.$$s || this;
if (i == null) i = nil;
      return (modify = $rb_plus(modify, i.$to_i()))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
      return self.$checkRoll(hasCritical, modify, target);}
      else { return nil }})();
      return output;
    }, TMP_TherapieSein_rollDiceCommand_6.$$arity = 1);
    
    Opal.defn(self, '$checkRoll', TMP_TherapieSein_checkRoll_7 = function $$checkRoll(hasCritical, modify, target) {
      var $a, $b, self = this, dice = nil, diceText = nil, successValue = nil, modifyText = nil, targetText = nil, result = nil;

      
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      successValue = $rb_plus(dice, modify);
      modifyText = self.$getValueText(modify);
      targetText = (function() {if (target['$=='](0)) {
        return ""
        } else {
        return "" + ">=" + (target)
      }; return nil; })();
      result = "" + "(2D6" + (modifyText) + (targetText) + ")";
      result = $rb_plus(result, "" + " ＞ " + (dice) + "(" + (diceText) + ")" + (modifyText));
      if ($truthy(($truthy($a = hasCritical) ? dice['$=='](12) : $a))) {
        
        result = $rb_plus(result, " ＞ クリティカル！");
        return result;};
      result = $rb_plus(result, "" + " ＞ " + (successValue) + (targetText));
      if (target['$=='](0)) {
        return result};
      if ($truthy($rb_ge(successValue, target))) {
        result = $rb_plus(result, " ＞ 【成功】")
        } else {
        result = $rb_plus(result, " ＞ 【失敗】")
      };
      return result;
    }, TMP_TherapieSein_checkRoll_7.$$arity = 3);
    return (Opal.defn(self, '$getValueText', TMP_TherapieSein_getValueText_8 = function $$getValueText(value) {
      var self = this;

      
      if (value['$=='](0)) {
        return ""};
      if ($truthy($rb_lt(value, 0))) {
        return value.$to_s()};
      return "" + "+" + (value);
    }, TMP_TherapieSein_getValueText_8.$$arity = 1), nil) && 'getValueText';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
