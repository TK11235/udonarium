/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$bcdice', '$set1Deck2Jokers', '$cardTrader', '$card_place=', '$-', '$canTapCard=', '$debug', '$gsub', '$last_match', '$check_barna_kronika', '$=~', '$collect', '$split', '$to_i', '$==', '$roll_barna_kronika', '$+', '$>', '$times', '$rand', '$[]', '$[]=', '$isCriticalCall', '$getAttackStringWhenCriticalCall', '$isNomalAttack', '$getAttackStringWhenNomal', '$!=', '$*', '$<', '$sub', '$getAttackHitLocation', '$get_table_by_number']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BarnaKronika');

    var $nesting = [self].concat($parent_nesting), $BarnaKronika_initialize$1, $BarnaKronika_postSet$2, $BarnaKronika_changeText$3, $BarnaKronika_dice_command_xRn$8, $BarnaKronika_check_barna_kronika$9, $BarnaKronika_roll_barna_kronika$11, $BarnaKronika_isCriticalCall$15, $BarnaKronika_isNomalAttack$16, $BarnaKronika_getAttackStringWhenCriticalCall$17, $BarnaKronika_getAttackStringWhenNomal$18, $BarnaKronika_getAttackHitLocation$19;

    self.$$prototype.isBattleMode = self.$$prototype.nick_e = nil;
    
    Opal.const_set($nesting[0], 'ID', "BarnaKronika");
    Opal.const_set($nesting[0], 'NAME', "バルナ・クロニカ");
    Opal.const_set($nesting[0], 'SORT_KEY', "はるなくろにか");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・通常判定　nBK\n" + "　ダイス数nで判定ロールを行います。\n" + "　セット数が1以上の時はセット数も表示します。\n" + "・攻撃判定　nBA\n" + "　ダイス数nで判定ロールを行い、攻撃値と命中部位も表示します。\n" + "・クリティカルコール　nBKCt　nBACt\n" + "　判定コマンドの後ろに「Ct」を付けるとクリティカルコールです。\n" + "　ダイス数n,コール数tで判定ロールを行います。\n" + "　ダイス数nで判定ロールを行います。\n" + "　セット数が1以上の時はセット数も表示し、攻撃判定の場合は命中部位も表示します。\n");
    self.$setPrefixes(["\\d+BK", "\\d+BA", "\\d+BKC\\d+", "\\d+BAC\\d+"]);
    
    Opal.def(self, '$initialize', $BarnaKronika_initialize$1 = function $$initialize() {
      var $iter = $BarnaKronika_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $BarnaKronika_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $BarnaKronika_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      return (self.sortType = 3);
    }, $BarnaKronika_initialize$1.$$arity = 0);
    
    Opal.def(self, '$postSet', $BarnaKronika_postSet$2 = function $$postSet() {
      var self = this, $writer = nil;

      if ($truthy(self.$bcdice())) {
        
        self.$bcdice().$cardTrader().$set1Deck2Jokers();
        
        $writer = [0];
        $send(self.$bcdice().$cardTrader(), 'card_place=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.$bcdice().$cardTrader(), 'canTapCard=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      } else {
        return nil
      }
    }, $BarnaKronika_postSet$2.$$arity = 0);
    
    Opal.def(self, '$changeText', $BarnaKronika_changeText$3 = function $$changeText(string) {
      var $$4, $$5, $$6, $$7, self = this;

      
      self.$debug("parren_killer_add begin string", string);
      string = $send(string, 'gsub', [/(\d+)BKC(\d)/], ($$4 = function(){var self = $$4.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6[0," + ($$($nesting, 'Regexp').$last_match(2)) + "]"}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      string = $send(string, 'gsub', [/(\d+)BAC(\d)/], ($$5 = function(){var self = $$5.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6[1," + ($$($nesting, 'Regexp').$last_match(2)) + "]"}, $$5.$$s = self, $$5.$$arity = 0, $$5));
      string = $send(string, 'gsub', [/(\d+)BK/], ($$6 = function(){var self = $$6.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6[0,0]"}, $$6.$$s = self, $$6.$$arity = 0, $$6));
      string = $send(string, 'gsub', [/(\d+)BA/], ($$7 = function(){var self = $$7.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6[1,0]"}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      self.$debug("parren_killer_add end string", string);
      return string;
    }, $BarnaKronika_changeText$3.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $BarnaKronika_dice_command_xRn$8 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      
      self.nick_e = nick_e;
      return self.$check_barna_kronika(string);
    }, $BarnaKronika_dice_command_xRn$8.$$arity = 2);
    
    Opal.def(self, '$check_barna_kronika', $BarnaKronika_check_barna_kronika$9 = function $$check_barna_kronika(string) {
      var $a, $b, $$10, self = this, output = nil, option = nil, dice_n = nil, criticalCallDice = nil, battleModeText = nil, dice_str = nil, suc = nil, set = nil, at_str = nil;

      
      output = "1";
      if ($truthy(/(^|\s)S?((\d+)[rR]6(\[([,\d]+)\])?)(\s|$)/i['$=~'](string))) {
      } else {
        return output
      };
      string = $$($nesting, 'Regexp').$last_match(2);
      option = $$($nesting, 'Regexp').$last_match(5);
      dice_n = $$($nesting, 'Regexp').$last_match(3);
      dice_n = ($truthy($a = dice_n) ? $a : 1);
      self.isBattleMode = false;
      criticalCallDice = 0;
      if ($truthy(option)) {
        
        $b = $send(option.$split(","), 'collect', [], ($$10 = function(i){var self = $$10.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i.$to_i();}, $$10.$$s = self, $$10.$$arity = 1, $$10)), $a = Opal.to_ary($b), (battleModeText = ($a[0] == null ? nil : $a[0])), (criticalCallDice = ($a[1] == null ? nil : $a[1])), $b;
        self.isBattleMode = battleModeText['$=='](1);};
      self.$debug("@isBattleMode", self.isBattleMode);
      $b = self.$roll_barna_kronika(dice_n, criticalCallDice), $a = Opal.to_ary($b), (dice_str = ($a[0] == null ? nil : $a[0])), (suc = ($a[1] == null ? nil : $a[1])), (set = ($a[2] == null ? nil : $a[2])), (at_str = ($a[3] == null ? nil : $a[3])), $b;
      output = "" + (self.nick_e) + ": (" + (string) + ") ＞ [" + (dice_str) + "] ＞ ";
      if ($truthy(self.isBattleMode)) {
        output = $rb_plus(output, at_str)
      } else {
        
        self.$debug("suc", suc);
        if ($truthy($rb_gt(suc, 1))) {
          output = $rb_plus(output, "" + "成功数" + (suc))
        } else {
          output = $rb_plus(output, "失敗")
        };
        self.$debug("set", set);
        if ($truthy($rb_gt(set, 0))) {
          output = $rb_plus(output, "" + ",セット" + (set))};
      };
      return output;
    }, $BarnaKronika_check_barna_kronika$9.$$arity = 1);
    
    Opal.def(self, '$roll_barna_kronika', $BarnaKronika_roll_barna_kronika$11 = function $$roll_barna_kronika(dice_n, criticalCallDice) {
      var $$12, $$13, $a, self = this, output = nil, suc = nil, set = nil, at_str = nil, diceCountList = nil, c_cnt = nil;

      
      dice_n = dice_n.$to_i();
      output = "";
      suc = 0;
      set = 0;
      at_str = "";
      diceCountList = [0, 0, 0, 0, 0, 0];
      $send(dice_n, 'times', [], ($$12 = function(_i){var self = $$12.$$s || this, index = nil, $writer = nil;

      
        
        if (_i == null) {
          _i = nil;
        };
        index = self.$rand(6);
        
        $writer = [index, $rb_plus(diceCountList['$[]'](index), 1)];
        $send(diceCountList, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy($rb_gt(diceCountList['$[]'](index), suc))) {
          return (suc = diceCountList['$[]'](index))
        } else {
          return nil
        };}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      $send((6), 'times', [], ($$13 = function(i){var self = $$13.$$s || this, $$14, diceCount = nil;

      
        
        if (i == null) {
          i = nil;
        };
        diceCount = diceCountList['$[]'](i);
        if (diceCount['$=='](0)) {
          return nil;};
        $send(diceCount, 'times', [], ($$14 = function(_j){var self = $$14.$$s || this;

        
          
          if (_j == null) {
            _j = nil;
          };
          return (output = $rb_plus(output, "" + ($rb_plus(i, 1)) + ","));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
        if ($truthy(self.$isCriticalCall(i, criticalCallDice))) {
          
          self.$debug("isCriticalCall");
          at_str = $rb_plus(at_str, self.$getAttackStringWhenCriticalCall(i, diceCount));
        } else if ($truthy(self.$isNomalAttack(criticalCallDice, diceCount))) {
          
          self.$debug("isNomalAttack");
          at_str = $rb_plus(at_str, self.$getAttackStringWhenNomal(i, diceCount));};
        if ($truthy($rb_gt(diceCount, 1))) {
          return (set = $rb_plus(set, 1))
        } else {
          return nil
        };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      if ($truthy(criticalCallDice['$!='](0))) {
        
        c_cnt = diceCountList['$[]']($rb_minus(criticalCallDice, 1));
        suc = $rb_times(c_cnt, 2);
        if ($truthy(c_cnt['$!='](0))) {
          set = 1
        } else {
          set = 0
        };};
      if ($truthy(($truthy($a = self.isBattleMode) ? $rb_lt(suc, 2) : $a))) {
        at_str = "失敗"};
      output = output.$sub(/,$/, "");
      at_str = at_str.$sub(/,$/, "");
      return [output, suc, set, at_str];
    }, $BarnaKronika_roll_barna_kronika$11.$$arity = 2);
    
    Opal.def(self, '$isCriticalCall', $BarnaKronika_isCriticalCall$15 = function $$isCriticalCall(index, criticalCallDice) {
      var self = this;

      
      if ($truthy(self.isBattleMode)) {
      } else {
        return false
      };
      if (criticalCallDice['$=='](0)) {
        return false};
      return criticalCallDice['$==']($rb_plus(index, 1));
    }, $BarnaKronika_isCriticalCall$15.$$arity = 2);
    
    Opal.def(self, '$isNomalAttack', $BarnaKronika_isNomalAttack$16 = function $$isNomalAttack(criticalCallDice, diceCount) {
      var self = this;

      
      if ($truthy(self.isBattleMode)) {
      } else {
        return false
      };
      if ($truthy(criticalCallDice['$!='](0))) {
        return false};
      return $rb_gt(diceCount, 1);
    }, $BarnaKronika_isNomalAttack$16.$$arity = 2);
    
    Opal.def(self, '$getAttackStringWhenCriticalCall', $BarnaKronika_getAttackStringWhenCriticalCall$17 = function $$getAttackStringWhenCriticalCall(index, diceCount) {
      var self = this, hitLocation = nil, attackValue = nil, result = nil;

      
      hitLocation = self.$getAttackHitLocation($rb_plus(index, 1));
      attackValue = $rb_times(diceCount, 2);
      result = $rb_plus(hitLocation, "" + ":攻撃値" + (attackValue) + ",");
      return result;
    }, $BarnaKronika_getAttackStringWhenCriticalCall$17.$$arity = 2);
    
    Opal.def(self, '$getAttackStringWhenNomal', $BarnaKronika_getAttackStringWhenNomal$18 = function $$getAttackStringWhenNomal(index, diceCount) {
      var self = this, hitLocation = nil, attackValue = nil, result = nil;

      
      hitLocation = self.$getAttackHitLocation($rb_plus(index, 1));
      attackValue = diceCount;
      result = $rb_plus(hitLocation, "" + ":攻撃値" + (attackValue) + ",");
      return result;
    }, $BarnaKronika_getAttackStringWhenNomal$18.$$arity = 2);
    return (Opal.def(self, '$getAttackHitLocation', $BarnaKronika_getAttackHitLocation$19 = function $$getAttackHitLocation(num) {
      var self = this, table = nil;

      
      table = [[1, "頭部"], [2, "右腕"], [3, "左腕"], [4, "右脚"], [5, "左脚"], [6, "胴体"]];
      return self.$get_table_by_number(num, table);
    }, $BarnaKronika_getAttackHitLocation$19.$$arity = 1), nil) && 'getAttackHitLocation';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
