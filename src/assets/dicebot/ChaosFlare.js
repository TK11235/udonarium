/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$bcdice', '$set2Decks2Jokers', '$cardTrader', '$card_place=', '$-', '$canTapCard=', '$<=', '$==', '$>=', '$+', '$>']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ChaosFlare');

    var $nesting = [self].concat($parent_nesting), $ChaosFlare_postSet$1, $ChaosFlare_check_2D6$2;

    
    Opal.const_set($nesting[0], 'ID', "Chaos Flare");
    Opal.const_set($nesting[0], 'NAME', "カオスフレア");
    Opal.const_set($nesting[0], 'SORT_KEY', "かおすふれあ");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "失敗、成功の判定。差分値の計算も行います。\n" + "ファンブル時は達成値を-20します。\n");
    
    Opal.def(self, '$postSet', $ChaosFlare_postSet$1 = function $$postSet() {
      var self = this, $writer = nil;

      if ($truthy(self.$bcdice())) {
        
        self.$bcdice().$cardTrader().$set2Decks2Jokers();
        
        $writer = [0];
        $send(self.$bcdice().$cardTrader(), 'card_place=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [false];
        $send(self.$bcdice().$cardTrader(), 'canTapCard=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      } else {
        return nil
      }
    }, $ChaosFlare_postSet$1.$$arity = 0);
    return (Opal.def(self, '$check_2D6', $ChaosFlare_check_2D6$2 = function $$check_2D6(total, dice_total, _dice_list, cmp_op, target) {
      var self = this, output = nil;

      
      output = "";
      if ($truthy($rb_le(dice_total, 2))) {
        
        total = $rb_minus(total, 20);
        output = " ＞ ファンブル(-20)";};
      if (cmp_op['$=='](">=")) {
      } else {
        return output
      };
      if ($truthy($rb_ge(total, target))) {
        
        output = $rb_plus(output, " ＞ 成功");
        if ($truthy($rb_gt(total, target))) {
          output = $rb_plus(output, "" + " ＞ 差分値" + ($rb_minus(total, target)))};
      } else {
        output = $rb_plus(output, "" + " ＞ 失敗 ＞ 差分値" + ($rb_minus(total, target)))
      };
      return output;
    }, $ChaosFlare_check_2D6$2.$$arity = 5), nil) && 'check_2D6';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
