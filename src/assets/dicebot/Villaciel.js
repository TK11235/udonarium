/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$setPrefixes', '$===', '$resolute_action', '$resolute_frontier_action', '$resolute_mining_action', '$resolute_cutting_gem_action', '$use_previous_job_chart', '$use_petit_quest_chart', '$use_accident_chart', '$use_mohumohu_chart', '$use_fishing_chart', '$use_inedible_plant_chart', '$use_edible_plant_chart', '$use_mutant_plant_chart', '$use_improved_species_chart', '$private', '$roll', '$[]', '$+', '$match', '$to_i', '$derive_achievement', '$>=', '$freeze', '$resolute_difficult_action', '$==', '$get_table_by_1d6', '$/', '$-', '$use_6x6_chart', '$%', '$even?', '$use_villaciel_edible_plant_chart', '$<=', '$use_armesear_edible_plant_chart', '$include?']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Villaciel');

    var $nesting = [self].concat($parent_nesting), $Villaciel_initialize$1, $Villaciel_rollDiceCommand$2, $Villaciel_derive_achievement$3, $Villaciel_resolute_action$4, $Villaciel_resolute_frontier_action$5, $Villaciel_resolute_difficult_action$6, $Villaciel_resolute_mining_action$7, $Villaciel_resolute_cutting_gem_action$8, $Villaciel_use_previous_job_chart$9, $Villaciel_use_petit_quest_chart$10, $Villaciel_use_accident_chart$11, $Villaciel_use_6x6_chart$12, $Villaciel_use_mohumohu_chart$13, $Villaciel_use_fishing_chart$14, $Villaciel_use_inedible_plant_chart$15, $Villaciel_use_villaciel_edible_plant_chart$16, $Villaciel_use_armesear_edible_plant_chart$17, $Villaciel_use_edible_plant_chart$18, $Villaciel_use_mutant_plant_chart$19, $Villaciel_use_improved_species_chart$20;

    self.$$prototype.sortType = nil;
    
    Opal.const_set($nesting[0], 'ID', "Villaciel");
    Opal.const_set($nesting[0], 'NAME', "蒼天のヴィラシエル");
    Opal.const_set($nesting[0], 'SORT_KEY', "そうてんのういらしえる");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定　　　　　　　　nVBS[>=d]\n" + "　[]内省略時は達成数の計算のみ。トライアンフあり。\n" + "　n: ダイス数、d: 難易度\n" + "・フロンティア判定　　nVF\n" + "　n: ダイス数\n" + "　nVBSを行い、うでまえ表を参照した結果を表示します。\n" + "・採掘スキル判定　　　nVM\n" + "　n: ダイス数\n" + "　判定に成功した場合、自動的に獲得できるアイテム数も表示されます。\n" + "・宝石加工スキル判定　nVG\n" + "　n: ダイス数\n" + "・前職表　　　　　　　PJ[x]    x=V,A\n" + "　[]内は省略可能。\n" + "　PJ, PJV: 「蒼天のヴィラシエル」掲載の前職表　PJA: 「白雲のアルメサール」掲載の前職表\n" + "・ぷちクエスト表　　　PQ[x]    x=V,A\n" + "　[]内は省略可能。\n" + "　PQ, PQV: 「蒼天のヴィラシエル」掲載のぷちクエスト表　PQA: 「白雲のアルメサール」掲載のぷちクエスト表\n" + "・アクシデント表　　　AC\n" + "・もふもふ表　　　　　MMx      x=I,A,V,VV,VA,D\n" + "  MMI: 昆虫　MMA: 動物　MMV, MMVV: ヴィラシエル種（「蒼天のヴィラシエル」掲載）　MMVA: ヴィラシエル種（「白雲のアルメサール」掲載）　MMD: 鋼龍種\n" + "・釣り表　　　　　　　Fx       x=L,R,W,G,B,C,S\n" + "　FL: 湖　FR: 河　FW: 白雲　FG: 灰雲　FB: 黒雲　FC: 共通　FS: 塩湖\n" + "・不食植物表　　　　　IP[x]    x=V,A\n" + "　IP, IPV: 「蒼天のヴィラシエル」掲載の不食植物表　IPA: 「白雲のアルメサール」掲載の不食植物表\n" + "・可食植物表　　　　　EP[x][n] x=V,A\n" + "　[]内は省略可能。\n" + "　n: 可食植物表番号\n" + "　EP[n], EPV[n]: 「蒼天のヴィラシエル」掲載の可食植物表。[]内省略時はnを1D6で決定し、EPVnを実行。ただし、1D6の出目が6ならば、「好きな表を選んでおっけー！」と表示。\n" + "　EPA[n]: 「白雲のアルメサール」掲載の可食植物表。[]内省略時は1D6を振り、出目が偶数ならばEPA1、奇数ならばEPA2を実行。\n" + "・変異植物表　　　　　MP\n" + "・改良種表　　　　　　IS\n");
    self.$setPrefixes(["\\d+VBS(>=\\d+)?", "\\d+VF", "\\d+VM", "\\d+VG", "PJ[VA]?", "PQ[VA]?", "AC", "MM([IAD]|V[VA]?)", "F[LRWGBCS]", "IP[VA]?", "EP[VA]?\\d?", "MP", "IS"]);
    
    Opal.def(self, '$initialize', $Villaciel_initialize$1 = function $$initialize() {
      var $iter = $Villaciel_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Villaciel_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Villaciel_initialize$1, false), $zuper, $iter);
      self.sortType = 0;
      self.d66Type = 1;
      return (self.fractionType = "roundUp");
    }, $Villaciel_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $Villaciel_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if (/\d+VBS/['$===']($case)) {return self.$resolute_action(command)}
      else if (/\d+VF/['$===']($case)) {return self.$resolute_frontier_action(command)}
      else if (/\d+VM/['$===']($case)) {return self.$resolute_mining_action(command)}
      else if (/\d+VG/['$===']($case)) {return self.$resolute_cutting_gem_action(command)}
      else if (/PJ[VA]?/['$===']($case)) {return self.$use_previous_job_chart(command)}
      else if (/PQ[VA]?/['$===']($case)) {return self.$use_petit_quest_chart(command)}
      else if ("AC"['$===']($case)) {return self.$use_accident_chart(command)}
      else if (/MM([IAD]|V[VA]?)/['$===']($case)) {return self.$use_mohumohu_chart(command)}
      else if (/F[LRWGBCS]/['$===']($case)) {return self.$use_fishing_chart(command)}
      else if (/IP[VA]?/['$===']($case)) {return self.$use_inedible_plant_chart(command)}
      else if (/EP[VA]?\d?/['$===']($case)) {return self.$use_edible_plant_chart(command)}
      else if ("MP"['$===']($case)) {return self.$use_mutant_plant_chart(command)}
      else if ("IS"['$===']($case)) {return self.$use_improved_species_chart(command)}
      else { return nil }})()
    }, $Villaciel_rollDiceCommand$2.$$arity = 1);
    self.$private();
    Opal.const_set($nesting[0], 'D6', 6);
    Opal.const_set($nesting[0], 'LEAST_SUCCESS_ROLL', 4);
    Opal.const_set($nesting[0], 'SUCCESS_STR', " ＞ 成功");
    Opal.const_set($nesting[0], 'FAILURE_STR', " ＞ 失敗");
    
    Opal.def(self, '$derive_achievement', $Villaciel_derive_achievement$3 = function $$derive_achievement(num_dices, command) {
      var self = this, roll_results = nil, dice_str = nil, num_triumph_dices = nil, num_successes = nil, achievement = nil, output = nil;

      
      roll_results = self.$roll(num_dices, $$($nesting, 'D6'), self.sortType, 0, ">=", $$($nesting, 'LEAST_SUCCESS_ROLL'));
      dice_str = roll_results['$[]'](1);
      num_triumph_dices = roll_results['$[]'](3);
      num_successes = roll_results['$[]'](5);
      achievement = $rb_plus(num_successes, num_triumph_dices);
      output = "" + "(" + (command) + ") ＞ [" + (dice_str) + "] ＞ 達成数: " + (achievement);
      return [achievement, output];
    }, $Villaciel_derive_achievement$3.$$arity = 2);
    
    Opal.def(self, '$resolute_action', $Villaciel_resolute_action$4 = function $$resolute_action(command) {
      var $a, $b, self = this, match_data = nil, num_dices = nil, achievement = nil, output = nil, difficulty = nil;

      
      match_data = command.$match(/(\d+)VBS(>=(\d+))?/);
      num_dices = match_data['$[]'](1).$to_i();
      $b = self.$derive_achievement(num_dices, command), $a = Opal.to_ary($b), (achievement = ($a[0] == null ? nil : $a[0])), (output = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(match_data['$[]'](2))) {
      } else {
        return output
      };
      difficulty = match_data['$[]'](3).$to_i();
      return (output = $rb_plus(output, (function() {if ($truthy($rb_ge(achievement, difficulty))) {
        return $$($nesting, 'SUCCESS_STR')
      } else {
        return $$($nesting, 'FAILURE_STR')
      }; return nil; })()));
    }, $Villaciel_resolute_action$4.$$arity = 1);
    Opal.const_set($nesting[0], 'SKILL_CHART', ["左に3マス、上に3マス動かす", "左に2マス、上に2マス動かす", "右か下に1マス動かしてもよい", "右に1マス、下に1マス動かす", "好きな方向に最大で3マス動かしてもよい（1マスでも良い）", "好きな方向に最大で5マス動かしてもよい（1〜3マスでもよい）"].$freeze());
    
    Opal.def(self, '$resolute_frontier_action', $Villaciel_resolute_frontier_action$5 = function $$resolute_frontier_action(command) {
      var $a, $b, self = this, num_dices = nil, achievement = nil, output = nil, $case = nil;

      
      num_dices = command.$match(/(\d+)VF/)['$[]'](1).$to_i();
      $b = self.$derive_achievement(num_dices, command), $a = Opal.to_ary($b), (achievement = ($a[0] == null ? nil : $a[0])), (output = ($a[1] == null ? nil : $a[1])), $b;
      output = $rb_plus(output, " ＞ ");
      return (output = $rb_plus(output, (function() {$case = achievement;
      if ((0)['$===']($case)) {return $$($nesting, 'SKILL_CHART')['$[]'](0)}
      else if ((1)['$===']($case)) {return $$($nesting, 'SKILL_CHART')['$[]'](1)}
      else if ((2)['$===']($case)) {return $$($nesting, 'SKILL_CHART')['$[]'](2)}
      else if ((3)['$===']($case) || (4)['$===']($case)) {return $$($nesting, 'SKILL_CHART')['$[]'](3)}
      else if ($range(5, 8, false)['$===']($case)) {return $$($nesting, 'SKILL_CHART')['$[]'](4)}
      else {return $$($nesting, 'SKILL_CHART')['$[]'](5)}})()));
    }, $Villaciel_resolute_frontier_action$5.$$arity = 1);
    
    Opal.def(self, '$resolute_difficult_action', $Villaciel_resolute_difficult_action$6 = function $$resolute_difficult_action(num_dices, least_success_roll, command) {
      var self = this, roll_results = nil, dice_str = nil, largest_roll = nil, is_successful = nil, output = nil;

      
      roll_results = self.$roll(num_dices, $$($nesting, 'D6'), self.sortType);
      dice_str = roll_results['$[]'](1);
      largest_roll = roll_results['$[]'](4);
      is_successful = $rb_ge(largest_roll, least_success_roll);
      output = "" + "(" + (command) + ") ＞ [" + (dice_str) + "]";
      output = $rb_plus(output, (function() {if ($truthy(is_successful)) {
        return $$($nesting, 'SUCCESS_STR')
      } else {
        return $$($nesting, 'FAILURE_STR')
      }; return nil; })());
      return [output, is_successful];
    }, $Villaciel_resolute_difficult_action$6.$$arity = 3);
    Opal.const_set($nesting[0], 'LEAST_MINING_SUCCESS_ROLL', 5);
    Opal.const_set($nesting[0], 'LEAST_GEM_SUCCESS_ROLL', 6);
    
    Opal.def(self, '$resolute_mining_action', $Villaciel_resolute_mining_action$7 = function $$resolute_mining_action(command) {
      var $a, $b, self = this, num_dices = nil, output = nil, is_successful = nil, roll_result = nil;

      
      num_dices = command.$match(/(\d+)VM/)['$[]'](1).$to_i();
      $b = self.$resolute_difficult_action(num_dices, $$($nesting, 'LEAST_MINING_SUCCESS_ROLL'), command), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (is_successful = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(is_successful)) {
      } else {
        return output
      };
      $b = self.$roll(1, $$($nesting, 'D6')), $a = Opal.to_ary($b), (roll_result = ($a[0] == null ? nil : $a[0])), $b;
      return (output = $rb_plus(output, "" + " ＞ (1D6) ＞ [" + (roll_result) + "] ＞ アイテムを" + (roll_result) + "個獲得"));
    }, $Villaciel_resolute_mining_action$7.$$arity = 1);
    
    Opal.def(self, '$resolute_cutting_gem_action', $Villaciel_resolute_cutting_gem_action$8 = function $$resolute_cutting_gem_action(command) {
      var self = this, num_dices = nil;

      
      num_dices = command.$match(/(\d+)VG/)['$[]'](1).$to_i();
      return self.$resolute_difficult_action(num_dices, $$($nesting, 'LEAST_GEM_SUCCESS_ROLL'), command)['$[]'](0);
    }, $Villaciel_resolute_cutting_gem_action$8.$$arity = 1);
    Opal.const_set($nesting[0], 'VILLACIEL_PREVIOUS_JOB_CHART', [["農家: 知力+1 器用さ+1 開拓／1Lv", "漁師: 知力+1 ひらめき+1 釣り／1Lv", "狩人: 武力+1 ひらめき+1 穴掘り／1Lv", "鍛冶職人: 武力+1 器用さ+1 採掘／1Lv", "牧場主: 仲良し+2 開拓／1Lv", "採掘師: 器用さ+1 ひらめき+1 採掘／1Lv"].$freeze(), ["家事手伝い: 器用さ+1 仲良し+1 調理／1Lv", "調理師: 知力+1 ひらめき+1 調理／1Lv", "細工師: 器用さ+2 採掘／1Lv", "大工: 武力+1 器用さ+1 木こり／1Lv", "荒くれ者: 武力+2 穴掘り／1Lv", "王国騎士: 武力+1 知力+1 木こり／1Lv"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'ARMESEAR_PREVIOUS_JOB_CHART', [["農家: 知力+1 器用さ+1 開拓／1Lv", "漁師: 知力+1 ひらめき+1 釣り／1Lv", "狩人: 武力+1 ひらめき+1 穴掘り／1Lv", "鍛冶職人: 武力+1 器用さ+1 採掘／1Lv", "牧場主: 仲良し+2 開拓／1Lv", "採掘師: 器用さ+1 ひらめき+1 採掘／1Lv"].$freeze(), ["羊飼い: 仲良し+2 もふもふ／1Lv", "芽拾い: 知力+1 武力+1 採集／1Lv", "服屋見習い: 器用さ+2 裁縫／1Lv", "革細工見習い: 知力+2 裁縫／1Lv", "商人: 知力+1 仲良し+1 基礎になるスキル／1Lv", "旅人: 武力+1 知力+1 基礎になるスキル／1Lv"].$freeze(), ["家事手伝い: 器用さ+1 仲良し+1 調理／1Lv", "調理師: 知力+1 ひらめき+1 調理／1Lv", "細工師: 器用さ+2 採掘／1Lv or 調合・細工／1Lv", "大工: 武力+1 器用さ+1 木こり／1Lv", "荒くれ者: 武力+2 穴掘り／1Lv", "王国騎士: 武力+1 知力+1 木こり／1Lv"].$freeze()].$freeze());
    
    Opal.def(self, '$use_previous_job_chart', $Villaciel_use_previous_job_chart$9 = function $$use_previous_job_chart(command) {
      var $a, $b, self = this, match_data = nil, chart_symbol = nil, roll_result1 = nil, $case = nil, chart_text = nil, roll_result2 = nil, chart_title = nil;

      
      match_data = command.$match(/PJ([VA]?)/);
      chart_symbol = (function() {if (match_data['$[]'](1)['$==']("")) {
        return "V"
      } else {
        return match_data['$[]'](1)
      }; return nil; })();
      $b = self.$roll(1, $$($nesting, 'D6')), $a = Opal.to_ary($b), (roll_result1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = (function() {$case = chart_symbol;
      if ("V"['$===']($case)) {return self.$get_table_by_1d6($$($nesting, 'VILLACIEL_PREVIOUS_JOB_CHART')['$[]']($rb_divide($rb_minus(roll_result1, 1), 3)))}
      else if ("A"['$===']($case)) {return self.$get_table_by_1d6($$($nesting, 'ARMESEAR_PREVIOUS_JOB_CHART')['$[]']($rb_divide($rb_minus(roll_result1, 1), 2)))}
      else { return nil }})(), $a = Opal.to_ary($b), (chart_text = ($a[0] == null ? nil : $a[0])), (roll_result2 = ($a[1] == null ? nil : $a[1])), $b;
      chart_title = (function() {$case = chart_symbol;
      if ("V"['$===']($case)) {return "前職表（ヴィラシエル）"}
      else if ("A"['$===']($case)) {return "前職表（アルメサール）"}
      else { return nil }})();
      return "" + (chart_title) + " ＞ [" + (roll_result1) + "," + (roll_result2) + "] ＞ " + (chart_text);
    }, $Villaciel_use_previous_job_chart$9.$$arity = 1);
    Opal.const_set($nesting[0], 'VILLACIEL_PETIT_QUEST_CHART', [["家の補強のために: 【目的：木を1個納品】【報酬：各自2プサイ】見えを張っていい木材で家を作ったら木材が枯渇しちまった。頼む、原木を分けてくれないか？", "孫のために: 【目的：花を1個納品】【報酬：各自2プサイ】綺麗な花があればいい色に染められるだろうと思うてな。孫のために必要なの。", "人間界の草: 【目的：草を2個納品】【報酬：各自3プサイ】魔界にはない草が生えていると噂で聞いたことがある。その草がほしい。", "種の生存のために: 【目的：可食植物（改良種を除く）を1個納品】【報酬：各自1プサイ】育ちが悪い同種の植物と掛け合わせてみたいのでサンプルがほしい。", "にんげんのたべもの！: 【目的：可食植物（改良種を除く）を1個納品】【報酬：各自2プサイ】ひゅーいあはなにをたべるの！ たべたい！", "まかいのたべものって？: 【目的：可食植物の改良種を2個納品】【報酬：各自3プサイ】まぞくさんはなにたべるですか！ おしえてください。"].$freeze(), ["おうちなおしたいの！: 【目的：石材を1個納品】【報酬：各自1プサイ】おうちがぼろぼろだから、ママのかわりになおしたいの。", "娘の結婚式に必要なんだ！: 【目的：宝石を2個納品】【報酬：各自3プサイ】ちょっとさきなんですが、娘が結婚するので結婚式用の宝石を集めています。", "金属がたりない！: 【目的：金属を1個納品】【報酬：各自2プサイ】いい武器にはいい金属を。今回必要なのは……。", "村の聖堂を直したいんだ！: 【目的：石材を1個納品】【報酬：各自2プサイ】聖堂を直していたが石材がたりない！", "弟の甲冑に使うんだ！: 【目的：金属を2個納品】【報酬：各自3プサイ】最近、近くの鉱山から「ある金属」が姿を消した。", "おねえちゃんのたんじょうびに: 【目的：宝石を1個納品】【報酬：各自2プサイ】たんじょうびぷれぜんとにほうせきあげたらおねえちゃんよろこぶかな？"].$freeze(), ["パパのために: 【目的：木材の家具を1個納品】【報酬：各自2プサイ】はたらいてばっかりのパパにプレゼントしたいの。おねがいします！", "癒やされたい……: 【目的：石材の家具を1個納品】【報酬：各自2プサイ】仕事時間は短いとはいえ、激務。めちゃつらい。癒しになる家具がほしい。", "いい家具に囲まれてみたい: 【目的：金属の家具を1個納品】【報酬：各自2プサイ】開拓も最高だけど、他の島の人とも交流したい。人を呼べるような家を作るためには最高の家具が必要！", "家具の在庫不足: 【目的：木材の装飾品を1個納品】【報酬：各自3プサイ】困ったことに職人に逃げられた！ このままじゃ、お店開けない！！", "と、ともだちにあげるの！: 【目的：石材の装飾品を1個納品】【報酬：各自3プサイ】えっと、お、おきにいりのともだちがいるんだ。そ、そのこのたんじょうびだから、プレゼントしたくって。", "親の木に飾りを: 【目的：金属の装飾品を1個納品】【報酬：各自3プサイ】元気のない親の木を心配してペッコ達が大騒ぎしているんだ。君はいつまでも美しいよと伝えたくてね。一つ助力をお願いするよ。"].$freeze(), ["そちらの河魚を食してみたい: 【目的：河魚を2個納品】【報酬：各自3プサイ】おいしい河魚がいるときいたことがあるのです。さぁ、はやく、釣ってきてくださいまし。", "研究に使用したい: 【目的：湖魚を1個納品】【報酬：各自1プサイ】そちらの世界にある同名の魚が本当にこちらの世界にいるものと一緒か確かめたいのです。", "しろいくもにすむおさかながみたい！: 【目的：白雲の雲魚を1個納品】【報酬：各自2プサイ】こっちにはしろいくもってなかなかないの！ しろいくものおさかな、たべてみたいな。", "釣り師がいないのでお魚がほしい: 【目的：灰雲の雲魚を2個納品】【報酬：各自3プサイ】野菜や肉もいいが魚も食べたい……。頼む、魚を釣ってきてくれないか？", "まっくろなくもにすむおさかな！: 【目的：黒雲の雲魚を1個納品】【報酬：各自2プサイ】まっくろなくもにはどんなさかながすんでるの？ みせて、みせて！", "人間界では見られない魚が見たい！: 【目的：共通の雲魚を1個納品】【報酬：各自2プサイ】他の魚の雲を利用して泳ぎ回る魚がいると聞いたよ。ぜひ見せてほしいな。"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'ARMESEAR_PETIT_QUEST_CHART', [["お祭り用の布が足りないの！: 【目的：布を2個納品】【報酬：各自4プサイ】お祭り前なのに、布職人が腰を痛めちゃったの！", "お洋服がぼろぼろになっちゃったの: 【目的：布を1個納品】【報酬：各自2プサイ】おばあちゃんに作ってもらった服がボロボロになっちゃったから、なおしたいの。", "ぎっくり腰からのヘルプ: 【目的：薪を3個納品】【報酬：各自3プサイ】仕事してたらぎっくり腰になっちゃったのだ。頼むのだ。", "不調には栄養たっぷりのミルクを: 【目的：ミルクを1個納品】【報酬：各自3プサイ】体調を崩しちゃったの。栄養満点のミルクを頂戴。", "材料がたりない！: 【目的：？？？の粗皮を1個納品】【報酬：各自3プサイ】革細工師を目指してるんだけど、皮が足りないんだ。種類は問わないから、早めに頼むよ。", "愛しのガードナーのために: 【目的：？？？の肉を1個納品】【報酬：各自3プサイ】ガードナーの調子が悪いから、栄養をつけさせたいんだ。肉はなんだっていい、とびっきりのを頼むよ。"].$freeze(), ["灯火をひとつ: 【目的：キャンドルを1個納品】【報酬：各自3プサイ】家の裏に知らない建物があるんだ。まっくらだから明かりが必要で……。", "布の色を頂戴: 【目的：染料を1個納品】【報酬：各自2プサイ】んー、コンテストのために布を織ったのだけど、色が決められないんだ。お願いするよ。", "きれいなのお花を: 【目的：花を1個納品】【報酬：各自2プサイ】パパの誕生日プレゼントを妹と作りたいんだ。お願いできる？", "旅立ちのために: 【目的：衣類を1個納品】【報酬：各自15プサイ】旅立つ弟に服をプレゼントしたいんだ。", "納品物が足りない！: 【目的：革を1個納品】【報酬：各自4プサイ】どうしても納品する皮がたりない……頼む、なんとか用意できないか？", "求）照明: 【目的：照明を1個納品】【報酬：各自10プサイ】引っ越しする最中に照明を壊してしまった！ 明日から明かりがないのはつらい……。作ってくれないか？"].$freeze(), ["装備の修復のため: 【目的：革を2個納品】【報酬：各自5プサイ】大事な装備が壊れちゃったんだ！ 直すのに必要なんだけど、革を持っているかい？", "主に祝いの品を: 【目的：敷物を1個納品】【報酬：各自15プサイ】誕生日を迎える主にささやかなながらわたしからも祝いの品を送りたいのです。", "手料理を求めて: 【目的：出来栄え5の料理を1個納品】【報酬：各自5プサイ】たまには誰かの料理が食べたいんだ。", "釣り竿が折れちゃって……: 【目的：塩魚を2個納品】【報酬：各自3プサイ】釣り竿が折れちゃったから釣りができないんだ。一匹頼める？", "蝋がほしいの: 【目的：蝋を1個納品】【報酬：各自2プサイ】お兄ちゃんとパパの誕生日プレゼントを作るの。見つからないからお願いできる？", "美しさを求めて: 【目的：アルメサール産の花を1個納品】【報酬：各自3プサイ】美しいお花を摘んで来てくださらない？ 美のために必要でしてよ。"].$freeze()].$freeze());
    
    Opal.def(self, '$use_petit_quest_chart', $Villaciel_use_petit_quest_chart$10 = function $$use_petit_quest_chart(command) {
      var $a, $b, self = this, match_data = nil, chart_symbol = nil, roll_result1 = nil, $case = nil, chart_index = nil, chart_text = nil, roll_result2 = nil, chart_title = nil;

      
      match_data = command.$match(/PQ([VA]?)/);
      chart_symbol = (function() {if (match_data['$[]'](1)['$==']("")) {
        return "V"
      } else {
        return match_data['$[]'](1)
      }; return nil; })();
      $b = self.$roll(1, $$($nesting, 'D6')), $a = Opal.to_ary($b), (roll_result1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = (function() {$case = chart_symbol;
      if ("V"['$===']($case)) {
      chart_index = (function() {$case = roll_result1;
      if ((1)['$===']($case) || (2)['$===']($case)) {return 0}
      else if ((3)['$===']($case) || (4)['$===']($case)) {return 1}
      else if ((5)['$===']($case)) {return 2}
      else if ((6)['$===']($case)) {return 3}
      else { return nil }})();
      return self.$get_table_by_1d6($$($nesting, 'VILLACIEL_PETIT_QUEST_CHART')['$[]'](chart_index));}
      else if ("A"['$===']($case)) {return self.$get_table_by_1d6($$($nesting, 'ARMESEAR_PETIT_QUEST_CHART')['$[]']($rb_divide($rb_minus(roll_result1, 1), 2)))}
      else { return nil }})(), $a = Opal.to_ary($b), (chart_text = ($a[0] == null ? nil : $a[0])), (roll_result2 = ($a[1] == null ? nil : $a[1])), $b;
      chart_title = (function() {$case = chart_symbol;
      if ("V"['$===']($case)) {return "ぷちクエスト表（ヴィラシエル）"}
      else if ("A"['$===']($case)) {return "ぷちクエスト表（アルメサール）"}
      else { return nil }})();
      return "" + (chart_title) + " ＞ [" + (roll_result1) + "," + (roll_result2) + "] ＞ " + (chart_text);
    }, $Villaciel_use_petit_quest_chart$10.$$arity = 1);
    Opal.const_set($nesting[0], 'ACCIDENT_CHART', ["飛び猪襲来！: 空飛ぶ猪が浮遊島めがけて突撃してきた！ 建物が粉砕される前に迎撃だ！（「蒼天のヴィラシエル」P.46）", "嵐がくるぞ！: 嵐が来るらしいぞ！ どれだけ対策できるかが鍵だ！（「蒼天のヴィラシエル」P.47）", "雨が降らないぞ！: おかしいなぁ、雨が降らないぞぉ……？ こうなったら雨乞いの踊りだ！（「蒼天のヴィラシエル」P.48）", "トビウオ流星群: きらきら光る流れ星……いや待て！ あれはトビウオの群れだー！？（「蒼天のヴィラシエル」P.49）", "すごい雷雨: すごい。ごろごろばりばり聞こえてくる。これは早々に対策しないと直撃するぞ！（「蒼天のヴィラシエル」P.50）", "野菜泥棒出現！: 畑の野菜が盗まれているぞ……？ これは犯人を捕まえないと！（「蒼天のヴィラシエル」P.51）"].$freeze());
    
    Opal.def(self, '$use_accident_chart', $Villaciel_use_accident_chart$11 = function $$use_accident_chart(_command) {
      var $a, $b, self = this, chart_text = nil, roll_result = nil;

      
      $b = self.$get_table_by_1d6($$($nesting, 'ACCIDENT_CHART')), $a = Opal.to_ary($b), (chart_text = ($a[0] == null ? nil : $a[0])), (roll_result = ($a[1] == null ? nil : $a[1])), $b;
      return "" + "アクシデント表 ＞ [" + (roll_result) + "] ＞ " + (chart_text);
    }, $Villaciel_use_accident_chart$11.$$arity = 1);
    
    Opal.def(self, '$use_6x6_chart', $Villaciel_use_6x6_chart$12 = function $$use_6x6_chart(chart, chart_name) {
      var $a, $b, self = this, y_roll = nil, cell_text = nil, x_roll = nil;

      
      $b = self.$roll(1, $$($nesting, 'D6')), $a = Opal.to_ary($b), (y_roll = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$get_table_by_1d6(chart['$[]']($rb_minus(y_roll, 1))), $a = Opal.to_ary($b), (cell_text = ($a[0] == null ? nil : $a[0])), (x_roll = ($a[1] == null ? nil : $a[1])), $b;
      return "" + (chart_name) + " ＞ [" + (y_roll) + "," + (x_roll) + "] ＞ 下" + (y_roll) + "マス、右" + (x_roll) + "マス ＞ " + (cell_text);
    }, $Villaciel_use_6x6_chart$12.$$arity = 2);
    Opal.const_set($nesting[0], 'MOHUMOHU_INSECT_CHART', [["小さな虫", "小さな虫", "カマキリ", "カマキリ", "バッタ", "クワガタ"].$freeze(), ["小さな虫", "カラスアゲハ", "カマキリ", "バッタ", "オオスカシバ", "カイコ"].$freeze(), ["ハンミョウ", "カラスアゲハ", "カマキリ", "バッタ", "カイコ", "トンボ"].$freeze(), ["ハンミョウ", "カラスアゲハ", "カラスアゲハ", "チッチハチ", "トンボ", "トンボ"].$freeze(), ["クワガタ", "カラスアゲハ", "チッチハチ", "チッチハチ", "アリ", "アリ"].$freeze(), ["クワガタ", "チッチハチ", "チッチハチ", "チッチハチ", "アリ", "アリ"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'MOHUMOHU_ANIMAL_CHART', [["トリサン", "トリサン", "ブタ", "ヒツジ", "タヌキ", "タヌキ"].$freeze(), ["トリサン", "ブタ", "ヒツジ", "ウッシ", "キツネ", "タヌキ"].$freeze(), ["ブタ", "オグマ", "ヒツジ", "キツネ", "キツネ", "アタウサギ"].$freeze(), ["ブタ", "ヒツジ", "ヒツジ", "リス", "シシ", "ヴィラシエル種(MMV)"].$freeze(), ["ウッシ", "ウサギ", "ウサギ", "シシ", "アタウサギ", "オオカミ"].$freeze(), ["ウッシ", "オグマ", "クーマ", "シシ", "オオカミ", "ヴィラシエル種(MMV)"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'MOHUMOHU_VILLACIEL_CHART', [["ウドン", "ウドン", "オボン", "オボン", "オボン", "オワン"].$freeze(), ["ウドン", "ウドン", "オボン", "オワン", "オワン", "オワン"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'MOHUMOHU_VILLACIEL2_CHART', [["すねーくあし", "すねーくあし", "すねーくあし", "ウタヒ", "オオトリサン", "オオトリサン"].$freeze(), ["すねーくあし", "すねーくあし", "ホネホネ", "オオトリサン", "アマアマガニ", "ホワホワ"].$freeze(), ["すねーくあし", "ホネホネ", "オオトリサン", "ウタヒ", "アマアマガニ", "ペロリ"].$freeze(), ["オオトリサン", "オオトリサン", "ホネホネ", "ホネホネ", "ホワホワ", "アマアマガニ"].$freeze(), ["ホネホネ", "ウタヒ", "アマアマガニ", "ペロリ", "ペロリ", "ペロリ"].$freeze(), ["オオトリサン", "ホワホワ", "ホワホワ", "アマアマガニ", "ペロリ", "ペロリ"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'MOHUMOHU_DRAGON_CHART', [["モドモドリス", "テロメ", "モドモドリス", "オジサン", "オジサン", "グロッチ"].$freeze(), ["テロメ", "モドモドリス", "オジサン", "テロメ", "ニホンツノ", "グロッチ"].$freeze(), ["テロメ", "グロッチ", "グロッチ", "グロッチ", "オジサン", "コディ"].$freeze(), ["モドモドリス", "グロッチ", "ニホンツノ", "テロメ", "テーリー", "ケラプス"].$freeze(), ["オジサン", "テロメ", "テロメ", "コディ", "コディ", "ケラプス"].$freeze(), ["コディ", "テーリー", "テーリー", "コディ", "ケラプス", "アサール・ゴッツ"].$freeze()].$freeze());
    
    Opal.def(self, '$use_mohumohu_chart', $Villaciel_use_mohumohu_chart$13 = function $$use_mohumohu_chart(command) {
      var $a, $b, self = this, $case = nil, match_data = nil, chart_symbol = nil, y_roll = nil, cell_text = nil, x_roll = nil;

      return (function() {$case = command;
      if ("MMI"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'MOHUMOHU_INSECT_CHART'), "もふもふ表・昆虫")}
      else if ("MMA"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'MOHUMOHU_ANIMAL_CHART'), "もふもふ表・動物")}
      else if (/MMV[VA]?/['$===']($case)) {
      match_data = command.$match(/MMV([VA]?)/);
      chart_symbol = (function() {if (match_data['$[]'](1)['$==']("")) {
        return "V"
      } else {
        return match_data['$[]'](1)
      }; return nil; })();
      return (function() {$case = chart_symbol;
      if ("V"['$===']($case)) {
      $b = self.$roll(1, $$($nesting, 'D6')), $a = Opal.to_ary($b), (y_roll = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$get_table_by_1d6($$($nesting, 'MOHUMOHU_VILLACIEL_CHART')['$[]']($rb_minus(1, y_roll['$%'](2)))), $a = Opal.to_ary($b), (cell_text = ($a[0] == null ? nil : $a[0])), (x_roll = ($a[1] == null ? nil : $a[1])), $b;
      return "" + "もふもふ表・ヴィラシエル種（ヴィラシエル） ＞ [" + (y_roll) + "," + (x_roll) + "] ＞ 下" + ((function() {if ($truthy(y_roll['$even?']())) {
        return "偶数"
      } else {
        return "奇数"
      }; return nil; })()) + "、右" + (x_roll) + "マス ＞ " + (cell_text);}
      else if ("A"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'MOHUMOHU_VILLACIEL2_CHART'), "もふもふ表・ヴィラシエル種（アルメサール）")}
      else { return nil }})();}
      else if ("MMD"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'MOHUMOHU_DRAGON_CHART'), "もふもふ表・鋼龍種")}
      else { return nil }})()
    }, $Villaciel_use_mohumohu_chart$13.$$arity = 1);
    Opal.const_set($nesting[0], 'FISHING_LAKE_CHART', [["ヤマアイズリ", "ヤマアイズリ", "ヤマアイズリ", "シコウチャ", "シコウチャ", "ハナロクショウ"].$freeze(), ["ヤマアイズリ", "ヤマアイズリ", "ヤマアイズリ", "シコウチャ", "ハナロクショウ", "ハナロクショウ"].$freeze(), ["ヤマアイズリ", "ヤマアイズリ", "シコウチャ", "シコウチャ", "ハナモエギ", "トノチャ"].$freeze(), ["ヤマアイズリ", "カラスアゲハ", "シコウチャ", "ハナロクショウ", "トノチャ", "ハナモエギ"].$freeze(), ["シコウチャ", "シコウチャ", "ハナロクショウ", "ハナロクショウ", "トノチャ", "ハナモエギ"].$freeze(), ["シコウチャ", "ハナロクショウ", "トノチャ", "トノチャ", "ハナモエギ", "シンペキ"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'FISHING_RIVER_CHART', [["ケイカンセキ", "ケイカンセキ", "ケイカンセキ", "ケイカンセキ", "カナリア", "イワヌ"].$freeze(), ["ケイカンセキ", "ケイカンセキ", "カナリア", "カナリア", "カナリア", "イワヌ"].$freeze(), ["ケイカンセキ", "ケイカンセキ", "カナリア", "イワヌ", "イワヌ", "ヤマブキ"].$freeze(), ["ケイカンセキ", "カナリア", "イワヌ", "アメイロ", "アメイロ", "ヤマブキ"].$freeze(), ["カナリア", "カナリア", "イワヌ", "アメイロ", "ヤマブキ", "ヤマブキ"].$freeze(), ["カナリア", "イワヌ", "アメイロ", "アメイロ", "ヤマブキ", "コハク"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'FISHING_WHITE_CHART', [["ウメガサネ", "ウメガサネ", "ウメガサネ", "ウメガサネ", "ハネズ", "ユルシ"].$freeze(), ["ウメガサネ", "ウメガサネ", "ウメガサネ", "ハネズ", "ソホ", "シンク"].$freeze(), ["ウメガサネ", "ウメガサネ", "ハネズ", "ソホ", "ユルシ", "ユルシ"].$freeze(), ["ウメガサネ", "ハネズ", "ソホ", "ユルシ", "シンク", "シンク"].$freeze(), ["ハネズ", "ソホ", "ソホ", "ユルシ", "シンク", "共通(FC)"].$freeze(), ["ハネズ", "ソホ", "ユルシ", "シンク", "共通(FC)", "シュアン"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'FISHING_GRAY_CHART', [["ウメガサネ", "ウメガサネ", "セイラン", "セイラン", "ミハナダ", "ミハナダ"].$freeze(), ["ウメガサネ", "セイラン", "セイラン", "ミハナダ", "ミハナダ", "ミハナダ"].$freeze(), ["ウメガサネ", "ユルシ", "ミハナダ", "ミハナダ", "ミハナダ", "リンドウ"].$freeze(), ["ユルシ", "ユルシ", "セイラン", "リンドウ", "リンドウ", "スミレ"].$freeze(), ["ユルシ", "ユルシ", "リンドウ", "スミレ", "スミレ", "共通(FC)"].$freeze(), ["ユルシ", "リンドウ", "スミレ", "スミレ", "共通(FC)", "シゴク"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'FISHING_BLACK_CHART', [["セイラン", "セイラン", "テツコン", "テツコン", "ウスハナ", "ウスハナ"].$freeze(), ["セイラン", "セイラン", "テツコン", "ウスハナ", "ウスハナ", "フカガワネズミ"].$freeze(), ["セイラン", "テツコン", "ウスハナ", "ウスハナ", "ミハナダ", "フカガワネズミ"].$freeze(), ["セイラン", "テツコン", "ミハナダ", "ウスハナ", "フカガワネズミ", "フカガワネズミ"].$freeze(), ["セイラン", "ウスハナ", "ミハナダ", "ミハナダ", "ミハナダ", "共通(FC)"].$freeze(), ["テツコン", "ウスハナ", "ミハナダ", "フカガワネズミ", "共通(FC)", "ルリ"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'FISHING_COMMON_CHART', [["トビウオ", "トビウオ", "トビウオ", "オオガメ", "ロブスター", "オオサンショウウオ"].$freeze(), ["トビウオ", "トビウオ", "エイ", "オオガメ", "クジラ", "ロブスター"].$freeze(), ["トビウオ", "エイ", "マグロ", "マグロ", "カジキ", "イタチザメ"].$freeze(), ["トビウオ", "ミズダコ", "クラゲ", "マグロ", "オオクラゲ", "ハンマーヘッド・シャーク"].$freeze(), ["トビウオ", "エイ", "オオガメ", "オオガメ", "イタチザメ", "ミズダコ"].$freeze(), ["トビウオ", "クラゲ", "ロブスター", "ハンマーヘッド・シャーク", "ミズダコ", "ダイオウイカ"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'FISHING_SALT_LAKE_CHART', [["シラユリ", "シラユリ", "シラユリ", "ゲッパク", "ゲッパク", "ゲッパク"].$freeze(), ["シラユリ", "シラユリ", "シラユリ", "ゲッパク", "スズ", "ナマリ"].$freeze(), ["シラユリ", "ゲッパク", "ゲッパク", "スズ", "ナマリ", "ナマリ"].$freeze(), ["シラユリ", "シラユリ", "ナマリ", "ナマリ", "ナマリ", "ナマリ"].$freeze(), ["ゲッパク", "ゲッパク", "スズ", "スズ", "ロイロ", "ロイロ"].$freeze(), ["ナマリ", "スズ", "スズ", "スズ", "ロイロ", "クロツルバミ"].$freeze()].$freeze());
    
    Opal.def(self, '$use_fishing_chart', $Villaciel_use_fishing_chart$14 = function $$use_fishing_chart(command) {
      var self = this, $case = nil;

      return (function() {$case = command;
      if ("FL"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'FISHING_LAKE_CHART'), "釣り・湖表")}
      else if ("FR"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'FISHING_RIVER_CHART'), "釣り・河表")}
      else if ("FW"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'FISHING_WHITE_CHART'), "釣り・白雲表")}
      else if ("FG"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'FISHING_GRAY_CHART'), "釣り・灰雲表")}
      else if ("FB"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'FISHING_BLACK_CHART'), "釣り・黒雲表")}
      else if ("FC"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'FISHING_COMMON_CHART'), "釣り・共通表")}
      else if ("FS"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'FISHING_SALT_LAKE_CHART'), "釣り・塩湖表")}
      else { return nil }})()
    }, $Villaciel_use_fishing_chart$14.$$arity = 1);
    Opal.const_set($nesting[0], 'INEDIBLE_PLANT_CHART', [["シュイの花", "ダデオの花", "ロキの花", "シェラの花", "トトイト", "ポロネイマ"].$freeze(), ["シュイの花", "ロキの花", "アウディの花", "イディウの花", "トトイト", "ポロネイマ"].$freeze(), ["ダデオの花", "アウディの花", "イディウの花", "マトイト", "ポポトマ", "ルタタ"].$freeze(), ["シュイの花", "ミカギの花", "ロトイト", "ロトイト", "ツルイド", "ルタタ"].$freeze(), ["ミカギの花", "ロトイト", "ロトイト", "ツルイド", "ルタタ", "変異植物(MP)"].$freeze(), ["トトイト", "マトイト", "ポポトマ", "ツルイド", "変異植物(MP)", "サボサボ"].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'INEDIBLE_PLANT2_CHART', [["マトラの花", "マトラの花", "蜜蝋", "ポルラの花", "ウェスドの花", "ポルラの花"].$freeze(), ["マトラの花", "ホイの花", "マトラの花", "ウェスドの花", "蜜蝋", "ロロの花"].$freeze(), ["ホイの花", "ポルラの花", "ウェスドの花", "ホイの花", "ポルラの花", "ポルラの花"].$freeze(), ["ポルラの花", "ホイの花", "ロロの花", "ウェスドの花", "ポルラの花", "ドダの実"].$freeze(), ["ポルラの花", "ウェスドの花", "ロロの花", "ロロの花", "ロロの花", "ロロの花"].$freeze(), ["ウェスドの花", "ロロの花", "ポルラの花", "ロロの花", "ドダの実", "ロロの花"].$freeze()].$freeze());
    
    Opal.def(self, '$use_inedible_plant_chart', $Villaciel_use_inedible_plant_chart$15 = function $$use_inedible_plant_chart(command) {
      var self = this, match_data = nil, chart_symbol = nil, $case = nil;

      
      match_data = command.$match(/IP([VA]?)/);
      chart_symbol = (function() {if (match_data['$[]'](1)['$==']("")) {
        return "V"
      } else {
        return match_data['$[]'](1)
      }; return nil; })();
      return (function() {$case = chart_symbol;
      if ("V"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'INEDIBLE_PLANT_CHART'), "不食植物表（ヴィラシエル）")}
      else if ("A"['$===']($case)) {return self.$use_6x6_chart($$($nesting, 'INEDIBLE_PLANT2_CHART'), "不食植物表（アルメサール）")}
      else { return nil }})();
    }, $Villaciel_use_inedible_plant_chart$15.$$arity = 1);
    Opal.const_set($nesting[0], 'EDIBLE_PLANT_CHARTS', [[["小麦", "小麦", "さつまいも", "ねぎ", "白菜", "きゅうり"].$freeze(), ["小麦", "さつまいも", "さといも", "白菜", "白菜", "とうもろこし"].$freeze(), ["さといも", "さといも", "ねぎ", "白菜", "とうもろこし", "枝豆"].$freeze(), ["シソ", "ひらたけ", "エリンギ", "枝豆", "枝豆", "ラズベリー"].$freeze(), ["シソ", "ひらたけ", "ひらたけ", "エリンギ", "ラズベリー", "さといも"].$freeze(), ["ナシ", "ナシ", "ナシ", "ラズベリー", "ラズベリー", "さといも"].$freeze()].$freeze(), [["米", "米", "にんじん", "じゃがいも", "ふき", "まいたけ"].$freeze(), ["米", "じゃがいも", "じゃがいも", "にら", "ふき", "きくらげ"].$freeze(), ["冬瓜", "しょうが", "冬瓜", "ふき", "ふき", "きくらげ"].$freeze(), ["しょうが", "冬瓜", "ビワ", "にら", "まいたけ", "まいたけ"].$freeze(), ["ビワ", "ビワ", "もも", "かぼちゃ", "グリーンピース", "まいたけ"].$freeze(), ["ビワ", "もも", "もも", "かぼちゃ", "かぼちゃ", "かぼちゃ"].$freeze()].$freeze(), [["もち米", "トマト", "オクラ", "とうがらし", "大根", "グミ"].$freeze(), ["もち米", "オクラ", "オクラ", "大根", "大根", "とうがらし"].$freeze(), ["しいたけ", "マッシュルーム", "オクラ", "グミ", "玉ねぎ", "小松菜"].$freeze(), ["ブロッコリー", "しいたけ", "トマト", "玉ねぎ", "さやえんどう", "玉ねぎ"].$freeze(), ["しいたけ", "マッシュルーム", "ブロッコリー", "小松菜", "さやえんどう", "改良種(IS)"].$freeze(), ["マッシュルーム", "ブロッコリー", "マッシュルーム", "小松菜", "改良種(IS)", "グミ"].$freeze()].$freeze(), [["大豆", "大豆", "にんにく", "そらまめ", "しめじ", "みかん"].$freeze(), ["かぶ", "大豆", "かぶ", "キャベツ", "そらまめ", "みかん"].$freeze(), ["にんにく", "かぶ", "にんにく", "しめじ", "クランベリー", "ピーマン"].$freeze(), ["キャベツ", "キャベツ", "ほうれん草", "しめじ", "レタス", "ピーマン"].$freeze(), ["ほうれん草", "ほうれん草", "クランベリー", "レタス", "ピーマン", "改良種(IS)"].$freeze(), ["松茸", "ほうれん草", "松茸", "レタス", "クランベリー", "改良種(IS)"].$freeze()].$freeze(), [["小豆", "れんこん", "みつば", "やまのいも", "デコポン", "イチゴ"].$freeze(), ["れんこん", "れんこん", "小豆", "なめこ", "かいわれ大根", "なめこ"].$freeze(), ["やまのいも", "アスパラガス", "なす", "なめこ", "やまのいも", "デコポン"].$freeze(), ["なす", "やまのいも", "みつば", "えのきたけ", "かいわれ大根", "デコポン"].$freeze(), ["アスパラガス", "アスパラガス", "やまのいも", "みつば", "なめこ", "改良種(IS)"].$freeze(), ["なす", "もやし", "えのきたけ", "えのきたけ", "改良種(IS)", "イチゴ"].$freeze()].$freeze()].$freeze());
    Opal.const_set($nesting[0], 'EDIBLE_PLANT2_CHARTS', [[["テンサイ", "バノ", "テンサイ", "サトウモロ", "サトウモロ", "パンノミ"].$freeze(), ["テンサイ", "バノ", "サトウモロ", "バノ", "ミソレグア", "パンノミ"].$freeze(), ["テンサイ", "サトウモロ", "バノ", "ニクニク", "パンノミ", "メーズム"].$freeze(), ["バノ", "バノ", "バノ", "パンノミ", "ミソレグア", "メーズム"].$freeze(), ["テンサイ", "パンノミ", "ニクニク", "ニクニク", "メーズム", "ミソレグア"].$freeze(), ["サトウモロ", "ニクニク", "メーズム", "ミソレグア", "メーズム", "メーズム"].$freeze()].$freeze(), [["アロアベリー", "パンノミ", "ミソレグア", "サイングア", "パンノミ", "アロアベリー"].$freeze(), ["パンノミ", "サイングア", "パンノミ", "ミソレグア", "アロアベリー", "ミソレグア"].$freeze(), ["パンノミ", "アロアベリー", "サイングア", "パンノミ", "パンノミ", "トロアベリア"].$freeze(), ["パンノミ", "アロアベリー", "パンノミ", "ミソレグア", "ミソレグア", "トロアベリア"].$freeze(), ["サイングア", "パンノミ", "トロアベリア", "ミソレグア", "アロアベリー", "サイングア"].$freeze(), ["ミソレグア", "トロアベリア", "サイングア", "アロアベリー", "トロアベリア", "トロアベリア"].$freeze()].$freeze()].$freeze());
    
    Opal.def(self, '$use_villaciel_edible_plant_chart', $Villaciel_use_villaciel_edible_plant_chart$16 = function $$use_villaciel_edible_plant_chart(chart_id, output) {
      var self = this;

      return (output = $rb_plus(output, self.$use_6x6_chart($$($nesting, 'EDIBLE_PLANT_CHARTS')['$[]']($rb_minus(chart_id, 1)), "" + "可食植物表" + (chart_id) + "（ヴィラシエル）")))
    }, $Villaciel_use_villaciel_edible_plant_chart$16.$$arity = 2);
    
    Opal.def(self, '$use_armesear_edible_plant_chart', $Villaciel_use_armesear_edible_plant_chart$17 = function $$use_armesear_edible_plant_chart(chart_id, output) {
      var self = this;

      return (output = $rb_plus(output, self.$use_6x6_chart($$($nesting, 'EDIBLE_PLANT2_CHARTS')['$[]']($rb_minus(chart_id, 1)), "" + "可食植物表" + (chart_id) + "（アルメサール）")))
    }, $Villaciel_use_armesear_edible_plant_chart$17.$$arity = 2);
    
    Opal.def(self, '$use_edible_plant_chart', $Villaciel_use_edible_plant_chart$18 = function $$use_edible_plant_chart(command) {
      var $a, $b, self = this, match_data = nil, chart_symbol = nil, $case = nil, roll_result = nil, chart_id = nil;

      
      match_data = command.$match(/EP([VA]?)(\d?)/);
      chart_symbol = (function() {if (match_data['$[]'](1)['$==']("")) {
        return "V"
      } else {
        return match_data['$[]'](1)
      }; return nil; })();
      return (function() {$case = chart_symbol;
      if ("V"['$===']($case)) {return (function() {$case = match_data['$[]'](2);
      if (""['$===']($case)) {
      $b = self.$roll(1, $$($nesting, 'D6')), $a = Opal.to_ary($b), (roll_result = ($a[0] == null ? nil : $a[0])), $b;
      if (roll_result['$==']($$($nesting, 'D6'))) {
        return "(1D6) ＞ [6] ＞ 好きな表を選んでおっけー！"};
      return self.$use_villaciel_edible_plant_chart(roll_result, "" + "(1D6) ＞ [" + (roll_result) + "] ＞ ");}
      else {
      chart_id = match_data['$[]'](2).$to_i();
      if ($truthy(($truthy($a = $rb_ge(chart_id, 1)) ? $rb_le(chart_id, 5) : $a))) {
      } else {
        return ""
      };
      return self.$use_villaciel_edible_plant_chart(chart_id, "");}})()}
      else if ("A"['$===']($case)) {return (function() {$case = match_data['$[]'](2);
      if (""['$===']($case)) {
      $b = self.$roll(1, $$($nesting, 'D6')), $a = Opal.to_ary($b), (roll_result = ($a[0] == null ? nil : $a[0])), $b;
      return self.$use_armesear_edible_plant_chart((function() {if ($truthy(roll_result['$even?']())) {
        return 1
      } else {
        return 2
      }; return nil; })(), "" + "(1D6) ＞ [" + (roll_result) + "] ＞ ");}
      else {
      chart_id = match_data['$[]'](2).$to_i();
      if ($truthy([1, 2]['$include?'](chart_id))) {
      } else {
        return ""
      };
      return self.$use_armesear_edible_plant_chart(chart_id, "");}})()}
      else { return nil }})();
    }, $Villaciel_use_edible_plant_chart$18.$$arity = 1);
    Opal.const_set($nesting[0], 'MUTANT_PLANT_CHART', [["ガドゴン", "ガドゴン", "レディダン", "ボディア", "ブタマル", "ブタマル"].$freeze(), ["レディダン", "レディダン", "ボディア", "トロコッコ", "ブタマル", "ツァイド"].$freeze(), ["ボディア", "ボディア", "マメノキ", "ナッキュ", "ツァイド", "ボディア"].$freeze(), ["ナッキュ", "マメノキ", "ナッキュ", "ガドゴン", "レディダン", "レディダン"].$freeze(), ["ポメラマ", "ポメラマ", "ナッキュ", "ツァイド", "ガドゴン", "ボディア"].$freeze(), ["ナッキュ", "ツァイド", "ツァイド", "ツァイド", "ボディア", "グラディエゴ"].$freeze()].$freeze());
    
    Opal.def(self, '$use_mutant_plant_chart', $Villaciel_use_mutant_plant_chart$19 = function $$use_mutant_plant_chart(_command) {
      var self = this;

      return self.$use_6x6_chart($$($nesting, 'MUTANT_PLANT_CHART'), "変異植物表")
    }, $Villaciel_use_mutant_plant_chart$19.$$arity = 1);
    Opal.const_set($nesting[0], 'IMPROVED_SPECIES_CHART', [["ワワ", "ワワ", "ブラックカロット", "ビーズ", "レモン", "ブラッドオレンジ"].$freeze(), ["ポポ", "ポポ", "グランツェ", "オオカサゲ", "ブラッドオレンジ", "レモン"].$freeze(), ["ヒットト", "グランツェ", "ブラックベリー", "ピマット", "ブラッドオレンジ", "レモン"].$freeze(), ["ブルーベリー", "ヒットト", "グランツェ", "ブラッドオレンジ", "ユズ", "ブラックベリー"].$freeze(), ["ビーズ", "ピマット", "オオカサゲ", "ライム", "ブルーベリー", "ユズ"].$freeze(), ["ビーズ", "レッドキャベツ", "ライム", "オオカサゲ", "ライム", "リンゴ"].$freeze()].$freeze());
    return (Opal.def(self, '$use_improved_species_chart', $Villaciel_use_improved_species_chart$20 = function $$use_improved_species_chart(_command) {
      var self = this;

      return self.$use_6x6_chart($$($nesting, 'IMPROVED_SPECIES_CHART'), "改良種表")
    }, $Villaciel_use_improved_species_chart$20.$$arity = 1), nil) && 'use_improved_species_chart';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
