/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$=~', '$gsub', '$last_match', '$check_roll', '$!=', '$==', '$>=', '$match', '$[]', '$to_i', '$parren_killer', '$marshalSignOfInequality', '$get_dice', '$inject', '$to_proc', '$comparison_operator', '$+', '$check_result', '$abs', '$roll', '$shift', '$collect', '$split', '$times', '$<', '$-', '$<=', '$===', '$get_horidasibukuro_table', '$debug', '$/']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DarkBlaze');

    var $nesting = [self].concat($parent_nesting), $DarkBlaze_initialize$1, $DarkBlaze_changeText$2, $DarkBlaze_dice_command_xRn$8, $DarkBlaze_check_nD6$9, $DarkBlaze_check_roll$10, $DarkBlaze_get_dice$11, $DarkBlaze_rollDiceCommand$14, $DarkBlaze_get_horidasibukuro_table$15;

    
    Opal.const_set($nesting[0], 'ID', "DarkBlaze");
    Opal.const_set($nesting[0], 'NAME', "ダークブレイズ");
    Opal.const_set($nesting[0], 'SORT_KEY', "たあくふれいす");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定　(DBxy#n)\n" + "　行為判定専用のコマンドです。\n" + "　\"DB(能力)(技能)#(修正)\"でロールします。Rコマンド(3R6+n[x,y]>=m mは難易度)に読替をします。\n" + "　クリティカルとファンブルも自動で処理されます。\n" + "　DB@x@y#m と DBx,y#m にも対応しました。\n" + "　例）DB33　　　DB32#-1　　　DB@3@1#1　　　DB3,2　　　DB23#1>=4　　　3R6+1[3,3]>=4\n" + "\n" + "・掘り出し袋表　(BTx)\n" + "　\"BT(ダイス数)\"で掘り出し袋表を自動で振り、結果を表示します。\n" + "　例）BT1　　　BT2　　　BT[1...3]\n");
    self.$setPrefixes(["DB.*", "BT.*"]);
    
    Opal.def(self, '$initialize', $DarkBlaze_initialize$1 = function $$initialize() {
      var $iter = $DarkBlaze_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $DarkBlaze_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $DarkBlaze_initialize$1, false), $zuper, $iter);
      return (self.sendMode = 2);
    }, $DarkBlaze_initialize$1.$$arity = 0);
    
    Opal.def(self, '$changeText', $DarkBlaze_changeText$2 = function $$changeText(string) {
      var $$3, $$4, $$5, $$6, $$7, self = this;

      
      if ($truthy(string['$=~'](/DB/i))) {
      } else {
        return string
      };
      string = $send(string, 'gsub', [/DB(\d),(\d)/], ($$3 = function(){var self = $$3.$$s || this;

      return "" + "DB" + ($$($nesting, 'Regexp').$last_match(1)) + ($$($nesting, 'Regexp').$last_match(2))}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'gsub', [/DB\@(\d)\@(\d)/], ($$4 = function(){var self = $$4.$$s || this;

      return "" + "DB" + ($$($nesting, 'Regexp').$last_match(1)) + ($$($nesting, 'Regexp').$last_match(2))}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      string = $send(string, 'gsub', [/DB(\d)(\d)(#([\d][\+\-\d]*))/], ($$5 = function(){var self = $$5.$$s || this;

      return "" + "3R6+" + ($$($nesting, 'Regexp').$last_match(4)) + "[" + ($$($nesting, 'Regexp').$last_match(1)) + "," + ($$($nesting, 'Regexp').$last_match(2)) + "]"}, $$5.$$s = self, $$5.$$arity = 0, $$5));
      string = $send(string, 'gsub', [/DB(\d)(\d)(#([\+\-\d]*))/], ($$6 = function(){var self = $$6.$$s || this;

      return "" + "3R6" + ($$($nesting, 'Regexp').$last_match(4)) + "[" + ($$($nesting, 'Regexp').$last_match(1)) + "," + ($$($nesting, 'Regexp').$last_match(2)) + "]"}, $$6.$$s = self, $$6.$$arity = 0, $$6));
      string = $send(string, 'gsub', [/DB(\d)(\d)/], ($$7 = function(){var self = $$7.$$s || this;

      return "" + "3R6[" + ($$($nesting, 'Regexp').$last_match(1)) + "," + ($$($nesting, 'Regexp').$last_match(2)) + "]"}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      return string;
    }, $DarkBlaze_changeText$2.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $DarkBlaze_dice_command_xRn$8 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$check_roll(string, nick_e)
    }, $DarkBlaze_dice_command_xRn$8.$$arity = 2);
    
    Opal.def(self, '$check_nD6', $DarkBlaze_check_nD6$9 = function $$check_nD6(total, _dice_total, _dice_list, cmp_op, target) {
      var $a, self = this;

      if ($truthy(($truthy($a = cmp_op['$!='](">=")) ? $a : target['$==']("?")))) {
        return ""
      } else if ($truthy($rb_ge(total, target))) {
        return " ＞ 成功"
      } else {
        return " ＞ 失敗"
      }
    }, $DarkBlaze_check_nD6$9.$$arity = 5);
    
    Opal.def(self, '$check_roll', $DarkBlaze_check_roll$10 = function $$check_roll(string, nick_e) {
      var $a, $b, self = this, output = nil, m = nil, mod = nil, abl = nil, skl = nil, signOfInequality = nil, diff = nil, total = nil, out_str = nil, dice_list = nil, dice_total = nil, cmp_op = nil;

      
      output = "1";
      if ($truthy((m = /(^|\s)S?(3[rR]6([\+\-\d]+)?(\[(\d+),(\d+)\])(([>=]+)(\d+))?)(\s|$)/i.$match(string)))) {
      } else {
        return "1"
      };
      string = m['$[]'](2);
      mod = 0;
      abl = 1;
      skl = 1;
      signOfInequality = "";
      diff = 0;
      if ($truthy(m['$[]'](3))) {
        mod = self.$parren_killer("" + "(0" + (m['$[]'](3)) + ")").$to_i()};
      if ($truthy(m['$[]'](4))) {
        
        abl = m['$[]'](5).$to_i();
        skl = m['$[]'](6).$to_i();};
      if ($truthy(m['$[]'](7))) {
        
        signOfInequality = self.$marshalSignOfInequality(m['$[]'](8));
        diff = m['$[]'](9).$to_i();};
      $b = self.$get_dice(mod, abl, skl), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), (out_str = ($a[1] == null ? nil : $a[1])), (dice_list = ($a[2] == null ? nil : $a[2])), $b;
      output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (out_str);
      if ($truthy(signOfInequality['$!='](""))) {
        
        dice_total = $send(dice_list, 'inject', [], "+".$to_proc());
        cmp_op = $$($nesting, 'Normalize').$comparison_operator(signOfInequality);
        output = $rb_plus(output, self.$check_result(total, dice_total, dice_list, 6, cmp_op, diff));};
      return output;
    }, $DarkBlaze_check_roll$10.$$arity = 2);
    
    Opal.def(self, '$get_dice', $DarkBlaze_get_dice$11 = function $$get_dice(mod, abl, skl) {
      var $$12, $$13, self = this, total = nil, crit = nil, fumble = nil, dice_c = nil, dummy = nil, dice_str = nil, dice_arr = nil, resultText = nil, output = nil;

      
      total = 0;
      crit = 0;
      fumble = 0;
      dice_c = $rb_plus(3, mod.$abs());
      dummy = self.$roll(dice_c, 6, 1);
      dummy.$shift();
      dice_str = dummy.$shift();
      dice_arr = $send(dice_str.$split(/,/), 'collect', [], ($$12 = function(i){var self = $$12.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      $send((3), 'times', [], ($$13 = function(i){var self = $$13.$$s || this, ch = nil;

      
        
        if (i == null) {
          i = nil;
        };
        ch = dice_arr['$[]'](i);
        if ($truthy($rb_lt(mod, 0))) {
          ch = dice_arr['$[]']($rb_minus($rb_minus(dice_c, i), 1))};
        if ($truthy($rb_le(ch, abl))) {
          total = $rb_plus(total, 1)};
        if ($truthy($rb_le(ch, skl))) {
          total = $rb_plus(total, 1)};
        if ($truthy($rb_le(ch, 2))) {
          crit = $rb_plus(crit, 1)};
        if ($truthy($rb_ge(ch, 5))) {
          return (fumble = $rb_plus(fumble, 1))
        } else {
          return nil
        };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      resultText = "";
      if ($truthy($rb_ge(crit, 3))) {
        
        resultText = " ＞ クリティカル";
        total = $rb_plus(6, skl);};
      if ($truthy($rb_ge(fumble, 3))) {
        
        resultText = " ＞ ファンブル";
        total = 0;};
      output = "" + (total) + "[" + (dice_str) + "]" + (resultText);
      return [total, output, dice_arr];
    }, $DarkBlaze_get_dice$11.$$arity = 3);
    
    Opal.def(self, '$rollDiceCommand', $DarkBlaze_rollDiceCommand$14 = function $$rollDiceCommand(command) {
      var $a, self = this, $case = nil, dice = nil;

      
      $case = command;
      if (/BT(\d+)?/i['$===']($case)) {
      dice = $$($nesting, 'Regexp').$last_match(1);
      dice = ($truthy($a = dice) ? $a : 1);
      return self.$get_horidasibukuro_table(dice);};
      return nil;
    }, $DarkBlaze_rollDiceCommand$14.$$arity = 1);
    return (Opal.def(self, '$get_horidasibukuro_table', $DarkBlaze_get_horidasibukuro_table$15 = function $$get_horidasibukuro_table(dice) {
      var $a, $b, self = this, output = nil, material_kind = nil, magic_stone = nil, num1 = nil, num2 = nil, magic_stone_result = nil, type = nil;

      
      output = "1";
      material_kind = ["蟲甲", "金属", "金貨", "植物", "獣皮", "竜鱗", "レアモノ", "レアモノ"];
      magic_stone = ["火炎石", "雷撃石", "氷結石"];
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), (num1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$roll(dice, 6), $a = Opal.to_ary($b), (num2 = ($a[0] == null ? nil : $a[0])), $b;
      self.$debug("dice", dice);
      self.$debug("num1", num1);
      self.$debug("num2", num2);
      if ($truthy($rb_le(num1, 4))) {
        
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (num2 = ($a[0] == null ? nil : $a[0])), $b;
        magic_stone_result = magic_stone['$[]']($rb_minus($rb_divide(num2, 2).$to_i(), 1));
        output = "" + "《" + (magic_stone_result) + "》を" + (dice) + "個獲得";
      } else if (num1['$=='](7)) {
        output = "" + "《金貨》を" + (num2) + "枚獲得"
      } else {
        
        type = material_kind['$[]']($rb_minus(num1, 5));
        if ($truthy($rb_le(num2, 3))) {
          output = "" + "《" + (type) + " I》を1個獲得"
        } else if ($truthy($rb_le(num2, 5))) {
          output = "" + "《" + (type) + " I》を2個獲得"
        } else if ($truthy($rb_le(num2, 7))) {
          output = "" + "《" + (type) + " I》を3個獲得"
        } else if ($truthy($rb_le(num2, 9))) {
          output = "" + "《" + (type) + " II》を1個獲得"
        } else if ($truthy($rb_le(num2, 11))) {
          output = "" + "《" + (type) + " I》を2個《" + (type) + " II》を1個獲得"
        } else if ($truthy($rb_le(num2, 13))) {
          output = "" + "《" + (type) + " I》を2個《" + (type) + " II》を2個獲得"
        } else if ($truthy($rb_le(num2, 15))) {
          output = "" + "《" + (type) + " III》を1個獲得"
        } else if ($truthy($rb_le(num2, 17))) {
          output = "" + "《" + (type) + " II》を2個《" + (type) + " III》を1個獲得"
        } else {
          output = "" + "《" + (type) + " II》を2個《" + (type) + " III》を2個獲得"
        };
      };
      if ($truthy(output['$!=']("1"))) {
        output = "" + "掘り出し袋表[" + (num1) + "," + (num2) + "] ＞ " + (output)};
      return output;
    }, $DarkBlaze_get_horidasibukuro_table$15.$$arity = 1), nil) && 'get_horidasibukuro_table';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
