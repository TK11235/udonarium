/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $range = Opal.range, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$setPrefixes', '$===', '$getCheckResult', '$getCombineRoll', '$getFullAutoResult', '$=~', '$to_i', '$last_match', '$<=', '$include?', '$min', '$max', '$+', '$rollPercentD10', '$getTotalLists', '$getTotal', '$getCheckResultText', '$join', '$roll', '$==', '$abs', '$times', '$*', '$push', '$>=', '$/', '$<', '$debug', '$>', '$rollFullAuto', '$each', '$getNextDifficltyMessage', '$getHitResultInfos', '$getHitResultText', '$getHitType', '$getBulletResults', '$[]', '$[]=', '$-', '$getFumbleable', '$getSuccessListImpaleBulletList', '$getSetOfBullet', '$getHitBulletCountBase', '$to_f', '$!', '$isLastBulletTurn', '$floor', '$ceil', '$getLastHitBulletCount']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Cthulhu7th_Korean');

    var $nesting = [self].concat($parent_nesting), $Cthulhu7th_Korean_initialize$1, $Cthulhu7th_Korean_rollDiceCommand$2, $Cthulhu7th_Korean_getCheckResult$3, $Cthulhu7th_Korean_rollPercentD10$4, $Cthulhu7th_Korean_getTotalLists$5, $Cthulhu7th_Korean_getTotal$7, $Cthulhu7th_Korean_getCheckResultText$8, $Cthulhu7th_Korean_getCombineRoll$9, $Cthulhu7th_Korean_getFullAutoResult$10, $Cthulhu7th_Korean_rollFullAuto$11, $Cthulhu7th_Korean_getHitResultInfos$13, $Cthulhu7th_Korean_getHitResultText$14, $Cthulhu7th_Korean_getHitType$15, $Cthulhu7th_Korean_getBulletResults$16, $Cthulhu7th_Korean_getSuccessListImpaleBulletList$17, $Cthulhu7th_Korean_getNextDifficltyMessage$18, $Cthulhu7th_Korean_getSetOfBullet$19, $Cthulhu7th_Korean_getHitBulletCountBase$20, $Cthulhu7th_Korean_isLastBulletTurn$21, $Cthulhu7th_Korean_getLastHitBulletCount$22, $Cthulhu7th_Korean_getFumbleable$23;

    self.$$prototype.bonus_dice_range = nil;
    
    Opal.const_set($nesting[0], 'ID', "Cthulhu7th:Korean");
    Opal.const_set($nesting[0], 'NAME', "크툴루의 부름 7판");
    Opal.const_set($nesting[0], 'SORT_KEY', "国際化:Korean:크툴루");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・판정　CC(x)<=（목표치）\n" + "　x：보너스, 패널티 주사위：Bonus/Penalty Dice (2~-2). 생략 가능.\n" + "　대실패：Fumble／실패：Failure／보통 성공：Regular success／\n" + "　어려운 성공：Hard success／대단한 성공：Extreme success／\n" + "　대성공：Critical success　을 자동판정.\n" + "예）CC<=30　CC(2)<=50　CC(-1)<=75\n" + "\n" + "・조합 판정　(CBR(x,y))\n" + "　목표치 x 와 y 로 동시에 ％판정을 한다.\n" + "　예）CBR(50,20)\n" + "\n" + "・연사(Full Auto)판정　FAR(w,x,y,z)\n" + "　w：탄수(1~100), x：기능 수치(1~100), y：고장 넘버\n" + "　z：보너스, 패널티 주사위(-2~2). 생략 가능.\n" + "　명중수와 관통수, 잔탄수만을 계산. 데미지는 계산하지 않습니다.\n" + "예）FAR(25,70,98)　FAR(50,80,98,-1)\n");
    self.$setPrefixes(["CC\\(\\d+\\)", "CC.*", "CBR\\(\\d+,\\d+\\)", "FAR\\(\\d+\\)", "FAR.*"]);
    
    Opal.def(self, '$initialize', $Cthulhu7th_Korean_initialize$1 = function $$initialize() {
      var $iter = $Cthulhu7th_Korean_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Cthulhu7th_Korean_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Cthulhu7th_Korean_initialize$1, false), $zuper, $iter);
      return (self.bonus_dice_range = $range(-2, 2, false));
    }, $Cthulhu7th_Korean_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $Cthulhu7th_Korean_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      
      $case = command;
      if (/CC/i['$===']($case)) {return self.$getCheckResult(command)}
      else if (/CBR/i['$===']($case)) {return self.$getCombineRoll(command)}
      else if (/FAR/i['$===']($case)) {return self.$getFullAutoResult(command)};
      return nil;
    }, $Cthulhu7th_Korean_rollDiceCommand$2.$$arity = 1);
    
    Opal.def(self, '$getCheckResult', $Cthulhu7th_Korean_getCheckResult$3 = function $$getCheckResult(command) {
      var self = this, bonus_dice_count = nil, diff = nil, output = nil, units_digit = nil, total_list = nil, total = nil, result_text = nil;

      
      if ($truthy(/^CC([-\d]+)?<=(\d+)/i['$=~'](command))) {
      } else {
        nil
      };
      bonus_dice_count = $$($nesting, 'Regexp').$last_match(1).$to_i();
      diff = $$($nesting, 'Regexp').$last_match(2).$to_i();
      if ($truthy($rb_le(diff, 0))) {
        return "에러. 목표치는 1 이상입니다."};
      if ($truthy(self.bonus_dice_range['$include?'](bonus_dice_count))) {
      } else {
        return "" + "에러. 보너스, 패널티 주사위의 수치는 " + (self.bonus_dice_range.$min()) + "~" + (self.bonus_dice_range.$max()) + "입니다."
      };
      output = "";
      output = $rb_plus(output, "" + "(1D100<=" + (diff) + ")");
      output = $rb_plus(output, "" + " 보너스, 패널티 주사위[" + (bonus_dice_count) + "]");
      units_digit = self.$rollPercentD10();
      total_list = self.$getTotalLists(bonus_dice_count, units_digit);
      total = self.$getTotal(total_list, bonus_dice_count);
      result_text = self.$getCheckResultText(total, diff);
      output = $rb_plus(output, "" + " ＞ " + (total_list.$join(", ")) + " ＞ " + (total) + " ＞ " + (result_text));
      return output;
    }, $Cthulhu7th_Korean_getCheckResult$3.$$arity = 1);
    
    Opal.def(self, '$rollPercentD10', $Cthulhu7th_Korean_rollPercentD10$4 = function $$rollPercentD10() {
      var $a, $b, self = this, dice = nil;

      
      $b = self.$roll(1, 10), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
      if (dice['$=='](10)) {
        dice = 0};
      return dice;
    }, $Cthulhu7th_Korean_rollPercentD10$4.$$arity = 0);
    
    Opal.def(self, '$getTotalLists', $Cthulhu7th_Korean_getTotalLists$5 = function $$getTotalLists(bonus_dice_count, units_digit) {
      var $$6, self = this, total_list = nil, tens_digit_count = nil;

      
      total_list = [];
      tens_digit_count = $rb_plus(1, bonus_dice_count.$abs());
      $send(tens_digit_count, 'times', [], ($$6 = function(){var self = $$6.$$s || this, bonus = nil, total = nil;

      
        bonus = self.$rollPercentD10();
        total = $rb_plus($rb_times(bonus, 10), units_digit);
        if (total['$=='](0)) {
          total = 100};
        return total_list.$push(total);}, $$6.$$s = self, $$6.$$arity = 0, $$6));
      return total_list;
    }, $Cthulhu7th_Korean_getTotalLists$5.$$arity = 2);
    
    Opal.def(self, '$getTotal', $Cthulhu7th_Korean_getTotal$7 = function $$getTotal(total_list, bonus_dice_count) {
      var self = this;

      
      if ($truthy($rb_ge(bonus_dice_count, 0))) {
        return total_list.$min()};
      return total_list.$max();
    }, $Cthulhu7th_Korean_getTotal$7.$$arity = 2);
    
    Opal.def(self, '$getCheckResultText', $Cthulhu7th_Korean_getCheckResultText$8 = function $$getCheckResultText(total, diff, fumbleable) {
      var self = this, fumble_text = nil;

      
      
      if (fumbleable == null) {
        fumbleable = false;
      };
      if ($truthy($rb_le(total, diff))) {
        
        if (total['$=='](1)) {
          return "대성공"};
        if ($truthy($rb_le(total, $rb_divide(diff, 5)))) {
          return "대단한 성공"};
        if ($truthy($rb_le(total, $rb_divide(diff, 2)))) {
          return "어려운 성공"};
        return "보통 성공";};
      fumble_text = "대실패";
      if (total['$=='](100)) {
        return fumble_text};
      if ($truthy($rb_ge(total, 96))) {
        if ($truthy($rb_lt(diff, 50))) {
          return fumble_text
        } else if ($truthy(fumbleable)) {
          return fumble_text}};
      return "실패";
    }, $Cthulhu7th_Korean_getCheckResultText$8.$$arity = -3);
    
    Opal.def(self, '$getCombineRoll', $Cthulhu7th_Korean_getCombineRoll$9 = function $$getCombineRoll(command) {
      var $a, $b, self = this, diff_1 = nil, diff_2 = nil, total = nil, result_1 = nil, result_2 = nil, successList = nil, succesCount = nil, rank = nil;

      
      if ($truthy(/CBR\((\d+),(\d+)\)/i['$=~'](command))) {
      } else {
        return nil
      };
      diff_1 = $$($nesting, 'Regexp').$last_match(1).$to_i();
      diff_2 = $$($nesting, 'Regexp').$last_match(2).$to_i();
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), $b;
      result_1 = self.$getCheckResultText(total, diff_1);
      result_2 = self.$getCheckResultText(total, diff_2);
      successList = ["대성공", "대단한 성공", "어려운 성공", "보통성공"];
      succesCount = 0;
      if ($truthy(successList['$include?'](result_1))) {
        succesCount = $rb_plus(succesCount, 1)};
      if ($truthy(successList['$include?'](result_2))) {
        succesCount = $rb_plus(succesCount, 1)};
      self.$debug("succesCount", succesCount);
      rank = (function() {if ($truthy($rb_ge(succesCount, 2))) {
        return "성공"
      } else if (succesCount['$=='](1)) {
        return "부분적 성공"
      } else {
        return "실패"
      }; return nil; })();
      return "" + "(1d100<=" + (diff_1) + "," + (diff_2) + ") ＞ " + (total) + "[" + (result_1) + "," + (result_2) + "] ＞ " + (rank);
    }, $Cthulhu7th_Korean_getCombineRoll$9.$$arity = 1);
    
    Opal.def(self, '$getFullAutoResult', $Cthulhu7th_Korean_getFullAutoResult$10 = function $$getFullAutoResult(command) {
      var $a, self = this, bullet_count = nil, diff = nil, broken_number = nil, bonus_dice_count = nil, output = nil, bullet_count_limit = nil;

      
      if ($truthy(/^FAR\((-?\d+)(,(-?\d+))(,(-?\d+))(,(-?\d+))?\)/i['$=~'](command))) {
      } else {
        return nil
      };
      bullet_count = $$($nesting, 'Regexp').$last_match(1).$to_i();
      diff = $$($nesting, 'Regexp').$last_match(3).$to_i();
      broken_number = $$($nesting, 'Regexp').$last_match(5).$to_i();
      bonus_dice_count = ($truthy($a = $$($nesting, 'Regexp').$last_match(7)) ? $a : 0).$to_i();
      output = "";
      bullet_count_limit = 100;
      if ($truthy($rb_gt(bullet_count, bullet_count_limit))) {
        
        output = $rb_plus(output, "" + "\n탄약이 너무 많습니다. 장전된 탄약을 " + (bullet_count_limit) + "개로 변경합니다.\n");
        bullet_count = bullet_count_limit;};
      if ($truthy($rb_le(bullet_count, 0))) {
        return "탄약은 1 이상입니다."};
      if ($truthy($rb_le(diff, 0))) {
        return "목표치는 1 이상입니다."};
      if ($truthy($rb_lt(broken_number, 0))) {
        
        output = $rb_plus(output, "\n고장 넘버는 1 이상입니다. 마이너스 기호를 제거합니다.\n");
        broken_number = broken_number.$abs();};
      if ($truthy(self.bonus_dice_range['$include?'](bonus_dice_count))) {
      } else {
        return "" + "\n에러. 보너스, 패널티 주사위의 수치는 " + (self.bonus_dice_range.$min()) + "~" + (self.bonus_dice_range.$max()) + "입니다."
      };
      output = $rb_plus(output, "" + "보너스, 패널티 주사위 [" + (bonus_dice_count) + "]");
      output = $rb_plus(output, self.$rollFullAuto(bullet_count, diff, broken_number, bonus_dice_count));
      return output;
    }, $Cthulhu7th_Korean_getFullAutoResult$10.$$arity = 1);
    
    Opal.def(self, '$rollFullAuto', $Cthulhu7th_Korean_rollFullAuto$11 = function $$rollFullAuto(bullet_count, diff, broken_number, dice_num) {try {

      var $$12, self = this, output = nil, loopCount = nil, counts = nil;

      
      output = "";
      loopCount = 0;
      counts = $hash2(["hit_bullet", "impale_bullet", "bullet"], {"hit_bullet": 0, "impale_bullet": 0, "bullet": bullet_count});
      $send($range(0, 3, false), 'each', [], ($$12 = function(more_difficlty){var self = $$12.$$s || this, $a, $b, $c, hit_result = nil, total = nil, total_list = nil, hit_type = nil, hit_bullet = nil, impale_bullet = nil, lost_bullet = nil, $writer = nil;
        if (self.bonus_dice_range == null) self.bonus_dice_range = nil;

      
        
        if (more_difficlty == null) {
          more_difficlty = nil;
        };
        output = $rb_plus(output, self.$getNextDifficltyMessage(more_difficlty));
        while ($truthy($rb_ge(dice_num, self.bonus_dice_range.$min()))) {
          
          loopCount = $rb_plus(loopCount, 1);
          $c = self.$getHitResultInfos(dice_num, diff, more_difficlty), $b = Opal.to_ary($c), (hit_result = ($b[0] == null ? nil : $b[0])), (total = ($b[1] == null ? nil : $b[1])), (total_list = ($b[2] == null ? nil : $b[2])), $c;
          output = $rb_plus(output, "" + "\n" + (loopCount) + "번째: ＞ " + (total_list.$join(", ")) + " ＞ " + (hit_result));
          if ($truthy($rb_ge(total, broken_number))) {
            
            output = $rb_plus(output, " 총알 걸림");
            Opal.ret(self.$getHitResultText(output, counts));};
          hit_type = self.$getHitType(more_difficlty, hit_result);
          $c = self.$getBulletResults(counts['$[]']("bullet"), hit_type, diff), $b = Opal.to_ary($c), (hit_bullet = ($b[0] == null ? nil : $b[0])), (impale_bullet = ($b[1] == null ? nil : $b[1])), (lost_bullet = ($b[2] == null ? nil : $b[2])), $c;
          
          $writer = ["hit_bullet", $rb_plus(counts['$[]']("hit_bullet"), hit_bullet)];
          $send(counts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["impale_bullet", $rb_plus(counts['$[]']("impale_bullet"), impale_bullet)];
          $send(counts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["bullet", $rb_minus(counts['$[]']("bullet"), lost_bullet)];
          $send(counts, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy($rb_le(counts['$[]']("bullet"), 0))) {
            Opal.ret(self.$getHitResultText(output, counts))};
          dice_num = $rb_minus(dice_num, 1);
        };
        return (dice_num = $rb_plus(dice_num, 1));}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      return self.$getHitResultText(output, counts);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Cthulhu7th_Korean_rollFullAuto$11.$$arity = 4);
    
    Opal.def(self, '$getHitResultInfos', $Cthulhu7th_Korean_getHitResultInfos$13 = function $$getHitResultInfos(dice_num, diff, more_difficlty) {
      var self = this, units_digit = nil, total_list = nil, total = nil, fumbleable = nil, hit_result = nil;

      
      units_digit = self.$rollPercentD10();
      total_list = self.$getTotalLists(dice_num, units_digit);
      total = self.$getTotal(total_list, dice_num);
      fumbleable = self.$getFumbleable(more_difficlty);
      hit_result = self.$getCheckResultText(total, diff, fumbleable);
      return [hit_result, total, total_list];
    }, $Cthulhu7th_Korean_getHitResultInfos$13.$$arity = 3);
    
    Opal.def(self, '$getHitResultText', $Cthulhu7th_Korean_getHitResultText$14 = function $$getHitResultText(output, counts) {
      var self = this;

      return "" + (output) + "\n＞ " + (counts['$[]']("hit_bullet")) + "발이 명중, " + (counts['$[]']("impale_bullet")) + "발이 관통, 잔탄 " + (counts['$[]']("bullet")) + "발"
    }, $Cthulhu7th_Korean_getHitResultText$14.$$arity = 2);
    
    Opal.def(self, '$getHitType', $Cthulhu7th_Korean_getHitType$15 = function $$getHitType(more_difficlty, hit_result) {
      var $a, $b, self = this, successList = nil, impaleBulletList = nil;

      
      $b = self.$getSuccessListImpaleBulletList(more_difficlty), $a = Opal.to_ary($b), (successList = ($a[0] == null ? nil : $a[0])), (impaleBulletList = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(successList['$include?'](hit_result))) {
        return "hit"};
      if ($truthy(impaleBulletList['$include?'](hit_result))) {
        return "impale"};
      return "";
    }, $Cthulhu7th_Korean_getHitType$15.$$arity = 2);
    
    Opal.def(self, '$getBulletResults', $Cthulhu7th_Korean_getBulletResults$16 = function $$getBulletResults(bullet_count, hit_type, diff) {
      var self = this, bullet_set_count = nil, hit_bullet_count_base = nil, impale_bullet_count_base = nil, lost_bullet_count = nil, hit_bullet_count = nil, impale_bullet_count = nil, $case = nil, halfbull = nil;

      
      bullet_set_count = self.$getSetOfBullet(diff);
      hit_bullet_count_base = self.$getHitBulletCountBase(diff, bullet_set_count);
      impale_bullet_count_base = $rb_divide(bullet_set_count, (2).$to_f());
      lost_bullet_count = 0;
      hit_bullet_count = 0;
      impale_bullet_count = 0;
      if ($truthy(self.$isLastBulletTurn(bullet_count, bullet_set_count)['$!']())) {
        
        $case = hit_type;
        if ("hit"['$===']($case)) {hit_bullet_count = hit_bullet_count_base}
        else if ("impale"['$===']($case)) {
        hit_bullet_count = impale_bullet_count_base.$floor();
        impale_bullet_count = impale_bullet_count_base.$ceil();};
        lost_bullet_count = bullet_set_count;
      } else {
        
        $case = hit_type;
        if ("hit"['$===']($case)) {hit_bullet_count = self.$getLastHitBulletCount(bullet_count)}
        else if ("impale"['$===']($case)) {
        halfbull = $rb_divide(bullet_count, (2).$to_f());
        hit_bullet_count = halfbull.$floor();
        impale_bullet_count = halfbull.$ceil();};
        lost_bullet_count = bullet_count;
      };
      return [hit_bullet_count, impale_bullet_count, lost_bullet_count];
    }, $Cthulhu7th_Korean_getBulletResults$16.$$arity = 3);
    
    Opal.def(self, '$getSuccessListImpaleBulletList', $Cthulhu7th_Korean_getSuccessListImpaleBulletList$17 = function $$getSuccessListImpaleBulletList(more_difficlty) {
      var self = this, successList = nil, impaleBulletList = nil, $case = nil;

      
      successList = [];
      impaleBulletList = [];
      $case = more_difficlty;
      if ((0)['$===']($case)) {
      successList = ["어려운 성공", "보통 성공"];
      impaleBulletList = ["대성공", "대단한 성공"];}
      else if ((1)['$===']($case)) {
      successList = ["어려운 성공"];
      impaleBulletList = ["대성공", "대단한 성공"];}
      else if ((2)['$===']($case)) {
      successList = [];
      impaleBulletList = ["대성공", "대단한 성공"];}
      else if ((3)['$===']($case)) {
      successList = ["대성공"];
      impaleBulletList = [];};
      return [successList, impaleBulletList];
    }, $Cthulhu7th_Korean_getSuccessListImpaleBulletList$17.$$arity = 1);
    
    Opal.def(self, '$getNextDifficltyMessage', $Cthulhu7th_Korean_getNextDifficltyMessage$18 = function $$getNextDifficltyMessage(more_difficlty) {
      var self = this, $case = nil;

      
      $case = more_difficlty;
      if ((1)['$===']($case)) {return "\n    난이도가 어려운 성공으로 변경"}
      else if ((2)['$===']($case)) {return "\n    난이도가 대단한 성공으로 변경"}
      else if ((3)['$===']($case)) {return "\n    난이도가 대성공으로 변경"};
      return "";
    }, $Cthulhu7th_Korean_getNextDifficltyMessage$18.$$arity = 1);
    
    Opal.def(self, '$getSetOfBullet', $Cthulhu7th_Korean_getSetOfBullet$19 = function $$getSetOfBullet(diff) {
      var $a, self = this, bullet_set_count = nil;

      
      bullet_set_count = $rb_divide(diff, 10).$floor();
      if ($truthy(($truthy($a = $rb_ge(diff, 1)) ? $rb_lt(diff, 10) : $a))) {
        bullet_set_count = 1};
      return bullet_set_count;
    }, $Cthulhu7th_Korean_getSetOfBullet$19.$$arity = 1);
    
    Opal.def(self, '$getHitBulletCountBase', $Cthulhu7th_Korean_getHitBulletCountBase$20 = function $$getHitBulletCountBase(diff, bullet_set_count) {
      var $a, self = this, hit_bullet_count_base = nil;

      
      hit_bullet_count_base = $rb_divide(bullet_set_count, 2).$floor();
      if ($truthy(($truthy($a = $rb_ge(diff, 1)) ? $rb_lt(diff, 10) : $a))) {
        hit_bullet_count_base = 1};
      return hit_bullet_count_base;
    }, $Cthulhu7th_Korean_getHitBulletCountBase$20.$$arity = 2);
    
    Opal.def(self, '$isLastBulletTurn', $Cthulhu7th_Korean_isLastBulletTurn$21 = function $$isLastBulletTurn(bullet_count, bullet_set_count) {
      var self = this;

      return $rb_lt($rb_minus(bullet_count, bullet_set_count), 0)
    }, $Cthulhu7th_Korean_isLastBulletTurn$21.$$arity = 2);
    
    Opal.def(self, '$getLastHitBulletCount', $Cthulhu7th_Korean_getLastHitBulletCount$22 = function $$getLastHitBulletCount(bullet_count) {
      var self = this, count = nil;

      
      if (bullet_count['$=='](1)) {
        return 1};
      count = $rb_divide(bullet_count, (2).$to_f()).$floor();
      return count;
    }, $Cthulhu7th_Korean_getLastHitBulletCount$22.$$arity = 1);
    return (Opal.def(self, '$getFumbleable', $Cthulhu7th_Korean_getFumbleable$23 = function $$getFumbleable(more_difficlty) {
      var self = this;

      return $rb_ge(more_difficlty, 1)
    }, $Cthulhu7th_Korean_getFumbleable$23.$$arity = 1), nil) && 'getFumbleable';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
