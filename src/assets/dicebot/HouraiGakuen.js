/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$setPrefixes', '$===', '$getRollResult', '$getMedResult', '$getResResult', '$getInnyouResult', '$getHattokuResult', '$getGogyouResult', '$=~', '$to_i', '$last_match', '$roll', '$getCheckResult', '$sort', '$map', '$split', '$to_proc', '$isFamble', '$isCritical', '$<=', '$getTargetFromValue', '$+', '$-', '$getResistCheckResult', '$getResultRank', '$>', '$<', '$index', '$times', '$even?', '$<<', '$getOddEven', '$join', '$getGogyouTable', '$get_table_by_1d6']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'HouraiGakuen');

    var $nesting = [self].concat($parent_nesting), $HouraiGakuen_rollDiceCommand$1, $HouraiGakuen_getRollResult$2, $HouraiGakuen_getCheckResult$3, $HouraiGakuen_isFamble$4, $HouraiGakuen_isCritical$5, $HouraiGakuen_getMedResult$6, $HouraiGakuen_getTargetFromValue$7, $HouraiGakuen_getResResult$8, $HouraiGakuen_getResistCheckResult$9, $HouraiGakuen_getResultRank$10, $HouraiGakuen_getInnyouResult$11, $HouraiGakuen_getHattokuResult$13, $HouraiGakuen_getOddEven$15, $HouraiGakuen_getGogyouResult$16, $HouraiGakuen_getGogyouTable$17;

    
    Opal.const_set($nesting[0], 'ID', "HouraiGakuen");
    Opal.const_set($nesting[0], 'NAME', "蓬莱学園の冒険!!");
    Opal.const_set($nesting[0], 'SORT_KEY', "ほうらいかくえんのほうけん");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・基本ロール：ROL(x+n)\n" + "  ROLL(自分の能力値 + 簡単値 + 応石 or 蓬莱パワー)と記述します。3D6をロールし、成功したかどうかを表示します。\n" + "  例）ROL(4+6)\n" + "・対人判定：MED(x,y)\n" + "  自分の能力値 x と 相手の能力値 y でロールを行い、成功したかどうかを表示します。\n" + "  例）MED(5,2)\n" + "・対抗判定：RES(x,y)\n" + "  自分の能力値 x と 相手の能力値 y で相互にロールし、どちらが成功したかを表示します。両者とも成功 or 失敗の場合は引き分けとなります。\n" + "  例）RES(6,4)\n" + "・陰陽コマンド INY\n" + "  例）Hourai : 陽（奇数の方が多い）\n" + "・五行コマンド：GOG\n" + "  例）Hourai : 五行表(3) → 五行【土】\n" + "・八徳コマンド：HTK\n" + "  例）Hourai : 仁義八徳は、【義】(奇数、奇数、偶数)\n");
    self.$setPrefixes(["ROL.*", "MED\\(\\d+,\\d+\\)", "RES\\(\\d+,\\d+\\)", "INY.*", "HTK.*", "GOG.*"]);
    
    Opal.def(self, '$rollDiceCommand', $HouraiGakuen_rollDiceCommand$1 = function $$rollDiceCommand(command) {
      var self = this, $case = nil;

      
      $case = command;
      if (/^ROL/i['$===']($case)) {return self.$getRollResult(command)}
      else if (/^MED/i['$===']($case)) {return self.$getMedResult(command)}
      else if (/^RES/i['$===']($case)) {return self.$getResResult(command)}
      else if (/^INY/i['$===']($case)) {return self.$getInnyouResult(command)}
      else if (/^HTK/i['$===']($case)) {return self.$getHattokuResult(command)}
      else if (/^GOG$/i['$===']($case)) {return self.$getGogyouResult(command)};
      return nil;
    }, $HouraiGakuen_rollDiceCommand$1.$$arity = 1);
    Opal.const_set($nesting[0], 'CRITICAL', "大成功");
    Opal.const_set($nesting[0], 'SUCCESS', "成功");
    Opal.const_set($nesting[0], 'FAILURE', "失敗");
    Opal.const_set($nesting[0], 'FUMBLE', "大失敗");
    
    Opal.def(self, '$getRollResult', $HouraiGakuen_getRollResult$2 = function $$getRollResult(command) {
      var $a, $b, self = this, target = nil, total = nil, diceText = nil, result = nil;

      
      if ($truthy(/rol([-\d]+)/i['$=~'](command))) {
      } else {
        return nil
      };
      target = $$($nesting, 'Regexp').$last_match(1).$to_i();
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      result = self.$getCheckResult(diceText, total, target);
      return "" + "(3d6<=" + (target) + ") ＞ 出目" + (diceText) + "＝合計" + (total) + " ＞ " + (result);
    }, $HouraiGakuen_getRollResult$2.$$arity = 1);
    
    Opal.def(self, '$getCheckResult', $HouraiGakuen_getCheckResult$3 = function $$getCheckResult(diceText, total, target) {
      var self = this, diceList = nil;

      
      diceList = $send(diceText.$split(","), 'map', [], "to_i".$to_proc()).$sort();
      if ($truthy(self.$isFamble(diceList))) {
        return $$($nesting, 'FUMBLE')};
      if ($truthy(self.$isCritical(diceList))) {
        return $$($nesting, 'CRITICAL')};
      if ($truthy($rb_le(total, target))) {
        return $$($nesting, 'SUCCESS')};
      return $$($nesting, 'FAILURE');
    }, $HouraiGakuen_getCheckResult$3.$$arity = 3);
    
    Opal.def(self, '$isFamble', $HouraiGakuen_isFamble$4 = function $$isFamble(diceList) {
      var self = this;

      return diceList['$===']([6, 6, 6])
    }, $HouraiGakuen_isFamble$4.$$arity = 1);
    
    Opal.def(self, '$isCritical', $HouraiGakuen_isCritical$5 = function $$isCritical(diceList) {
      var self = this;

      return diceList['$===']([1, 2, 3])
    }, $HouraiGakuen_isCritical$5.$$arity = 1);
    
    Opal.def(self, '$getMedResult', $HouraiGakuen_getMedResult$6 = function $$getMedResult(command) {
      var $a, $b, self = this, yourValue = nil, enemyValue = nil, target = nil, total = nil, diceText = nil, result = nil;

      
      if ($truthy(/med\((\d+),(\d+)\)/i['$=~'](command))) {
      } else {
        return nil
      };
      yourValue = $$($nesting, 'Regexp').$last_match(1).$to_i();
      enemyValue = $$($nesting, 'Regexp').$last_match(2).$to_i();
      target = self.$getTargetFromValue(yourValue, enemyValue);
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), (total = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      result = self.$getCheckResult(diceText, total, target);
      return "" + "(あなたの値" + (yourValue) + "、相手の値" + (enemyValue) + "、3d6<=" + (target) + ") ＞ 出目" + (diceText) + "＝合計" + (total) + " ＞ " + (result);
    }, $HouraiGakuen_getMedResult$6.$$arity = 1);
    
    Opal.def(self, '$getTargetFromValue', $HouraiGakuen_getTargetFromValue$7 = function $$getTargetFromValue(yourValue, enemyValue) {
      var self = this;

      return $rb_plus(yourValue, $rb_minus(10, enemyValue))
    }, $HouraiGakuen_getTargetFromValue$7.$$arity = 2);
    
    Opal.def(self, '$getResResult', $HouraiGakuen_getResResult$8 = function $$getResResult(command) {
      var $a, $b, self = this, yourValue = nil, enemyValue = nil, yourTarget = nil, enemyTarget = nil, yourTotal = nil, yourDiceText = nil, enemyTotal = nil, enemyDiceText = nil, yourResult = nil, enemyResult = nil, result = nil;

      
      if ($truthy(/res\((\d+),(\d+)\)/i['$=~'](command))) {
      } else {
        return nil
      };
      yourValue = $$($nesting, 'Regexp').$last_match(1).$to_i();
      enemyValue = $$($nesting, 'Regexp').$last_match(2).$to_i();
      yourTarget = self.$getTargetFromValue(yourValue, enemyValue);
      enemyTarget = self.$getTargetFromValue(enemyValue, yourValue);
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), (yourTotal = ($a[0] == null ? nil : $a[0])), (yourDiceText = ($a[1] == null ? nil : $a[1])), $b;
      $b = self.$roll(3, 6), $a = Opal.to_ary($b), (enemyTotal = ($a[0] == null ? nil : $a[0])), (enemyDiceText = ($a[1] == null ? nil : $a[1])), $b;
      yourResult = self.$getCheckResult(yourDiceText, yourTotal, yourTarget);
      enemyResult = self.$getCheckResult(enemyDiceText, enemyTotal, enemyTarget);
      result = self.$getResistCheckResult(yourResult, enemyResult);
      return "" + "あなたの値" + (yourValue) + "、相手の値" + (enemyValue) + "\n" + "(あなたのロール 3d6<=" + (yourTarget) + ") ＞ " + (yourDiceText) + "=" + (yourTotal) + " ＞ " + (yourResult) + "\n" + "(相手のロール 3d6<=" + (enemyTarget) + ") ＞ " + (enemyDiceText) + "=" + (enemyTotal) + " ＞ " + (enemyResult) + "\n" + "＞" + (result);
    }, $HouraiGakuen_getResResult$8.$$arity = 1);
    
    Opal.def(self, '$getResistCheckResult', $HouraiGakuen_getResistCheckResult$9 = function $$getResistCheckResult(yourResult, enemyResult) {
      var self = this, yourRank = nil, enemyRank = nil;

      
      yourRank = self.$getResultRank(yourResult);
      enemyRank = self.$getResultRank(enemyResult);
      if ($truthy($rb_gt(yourRank, enemyRank))) {
        return "あなたが勝利"};
      if ($truthy($rb_lt(yourRank, enemyRank))) {
        return "相手が勝利"};
      return "引き分け";
    }, $HouraiGakuen_getResistCheckResult$9.$$arity = 2);
    
    Opal.def(self, '$getResultRank', $HouraiGakuen_getResultRank$10 = function $$getResultRank(result) {
      var self = this, ranks = nil;

      
      ranks = [$$($nesting, 'FUMBLE'), $$($nesting, 'FAILURE'), $$($nesting, 'SUCCESS'), $$($nesting, 'CRITICAL')];
      return ranks.$index(result);
    }, $HouraiGakuen_getResultRank$10.$$arity = 1);
    
    Opal.def(self, '$getInnyouResult', $HouraiGakuen_getInnyouResult$11 = function $$getInnyouResult(_command) {
      var $$12, self = this, oddCount = nil, evenCount = nil;

      
      oddCount = 0;
      evenCount = 0;
      $send((3), 'times', [], ($$12 = function(){var self = $$12.$$s || this, $a, $b, dice = nil;

      
        $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
        if ($truthy(dice['$even?']())) {
          return (evenCount = $rb_plus(evenCount, 1))
        } else {
          return (oddCount = $rb_plus(oddCount, 1))
        };}, $$12.$$s = self, $$12.$$arity = 0, $$12));
      if ($truthy($rb_lt(evenCount, oddCount))) {
        return "陽（奇数の方が多い）"
      } else {
        return "陰（偶数の方が多い）"
      };
    }, $HouraiGakuen_getInnyouResult$11.$$arity = 1);
    
    Opal.def(self, '$getHattokuResult', $HouraiGakuen_getHattokuResult$13 = function $$getHattokuResult(_command) {
      var $$14, self = this, oddEvenList = nil, oddEvenText = nil, $case = nil;

      
      oddEvenList = [];
      $send((3), 'times', [], ($$14 = function(){var self = $$14.$$s || this;

      return oddEvenList['$<<'](self.$getOddEven())}, $$14.$$s = self, $$14.$$arity = 0, $$14));
      oddEvenText = oddEvenList.$join("、");
      return (function() {$case = oddEvenText;
      if ("奇数、奇数、奇数"['$===']($case)) {return "" + "仁義八徳は、【仁】(" + (oddEvenText) + ")"}
      else if ("奇数、奇数、偶数"['$===']($case)) {return "" + "仁義八徳は、【義】(" + (oddEvenText) + ")"}
      else if ("奇数、偶数、奇数"['$===']($case)) {return "" + "仁義八徳は、【礼】(" + (oddEvenText) + ")"}
      else if ("奇数、偶数、偶数"['$===']($case)) {return "" + "仁義八徳は、【智】(" + (oddEvenText) + ")"}
      else if ("偶数、奇数、奇数"['$===']($case)) {return "" + "仁義八徳は、【忠】(" + (oddEvenText) + ")"}
      else if ("偶数、奇数、偶数"['$===']($case)) {return "" + "仁義八徳は、【信】(" + (oddEvenText) + ")"}
      else if ("偶数、偶数、奇数"['$===']($case)) {return "" + "仁義八徳は、【孝】(" + (oddEvenText) + ")"}
      else if ("偶数、偶数、偶数"['$===']($case)) {return "" + "仁義八徳は、【悌】(" + (oddEvenText) + ")"}
      else {return "異常終了"}})();
    }, $HouraiGakuen_getHattokuResult$13.$$arity = 1);
    
    Opal.def(self, '$getOddEven', $HouraiGakuen_getOddEven$15 = function $$getOddEven() {
      var $a, $b, self = this, dice = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
      if ($truthy(dice['$even?']())) {
        return "偶数"};
      return "奇数";
    }, $HouraiGakuen_getOddEven$15.$$arity = 0);
    
    Opal.def(self, '$getGogyouResult', $HouraiGakuen_getGogyouResult$16 = function $$getGogyouResult(_command) {
      var $a, $b, self = this, type = nil, table = nil, text = nil, number = nil, output = nil;

      
      type = "五行表";
      table = self.$getGogyouTable();
      $b = self.$get_table_by_1d6(table), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), $b;
      output = "" + (type) + "(" + (number) + ") ＞ " + (text);
      return output;
    }, $HouraiGakuen_getGogyouResult$16.$$arity = 1);
    return (Opal.def(self, '$getGogyouTable', $HouraiGakuen_getGogyouTable$17 = function $$getGogyouTable() {
      var self = this, table = nil;

      
      table = ["五行【木】", "五行【火】", "五行【土】", "五行【金】", "五行【水】", "五行は【任意選択】"];
      return table;
    }, $HouraiGakuen_getGogyouTable$17.$$arity = 0), nil) && 'getGogyouTable';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
