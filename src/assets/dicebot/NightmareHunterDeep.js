/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$debug', '$sub', '$last_match', '$-', '$*', '$to_i', '$+', '$==', '$!=', '$>=', '$<=', '$>']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NightmareHunterDeep');

    var $nesting = [self].concat($parent_nesting), $NightmareHunterDeep_initialize$1, $NightmareHunterDeep_changeText$2, $NightmareHunterDeep_check_nD6$5, $NightmareHunterDeep_getDiceRolledAdditionalText$6, $NightmareHunterDeep_getDiceRevision$7;

    
    Opal.const_set($nesting[0], 'ID', "NightmareHunterDeep");
    Opal.const_set($nesting[0], 'NAME', "ナイトメアハンター=ディープ");
    Opal.const_set($nesting[0], 'SORT_KEY', "ないとめあはんたあていいふ");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "加算ロール時に６の個数をカウントして、その４倍を自動的に加算します。\n" + "(出目はそのまま表示で合計値が6-10の読み替えになります)\n");
    
    Opal.def(self, '$initialize', $NightmareHunterDeep_initialize$1 = function $$initialize() {
      var $iter = $NightmareHunterDeep_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $NightmareHunterDeep_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NightmareHunterDeep_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      return (self.sortType = 1);
    }, $NightmareHunterDeep_initialize$1.$$arity = 0);
    
    Opal.def(self, '$changeText', $NightmareHunterDeep_changeText$2 = function $$changeText(string) {
      var $$3, $$4, self = this;

      
      self.$debug("parren_killer_add before string", string);
      string = $send(string, 'sub', [/^(.+?)Lv(\d+)(.*)/i], ($$3 = function(){var self = $$3.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + ($rb_minus($rb_times($$($nesting, 'Regexp').$last_match(2).$to_i(), 5), 1)) + ($$($nesting, 'Regexp').$last_match(3))}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'sub', [/^(.+?)NL(\d+)(.*)/i], ($$4 = function(){var self = $$4.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + ($rb_plus($rb_times($$($nesting, 'Regexp').$last_match(2).$to_i(), 5), 5)) + ($$($nesting, 'Regexp').$last_match(3))}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      self.$debug("parren_killer_add after string", string);
      return string;
    }, $NightmareHunterDeep_changeText$2.$$arity = 1);
    
    Opal.def(self, '$check_nD6', $NightmareHunterDeep_check_nD6$5 = function $$check_nD6(total, _dice_total, _dice_list, cmp_op, target) {
      var $a, self = this, sucLv = nil, sucNL = nil;

      
      if (cmp_op['$=='](">=")) {
      } else {
        return ""
      };
      if ($truthy(target['$!=']("?"))) {
        if ($truthy($rb_ge(total, target))) {
          return " ＞ 成功"
        } else {
          return " ＞ 失敗"
        }};
      sucLv = 1;
      sucNL = 0;
      while ($truthy($rb_ge(total, $rb_minus($rb_times(sucLv, 5), 1)))) {
        sucLv = $rb_plus(sucLv, 1)
      };
      while ($truthy($rb_ge(total, $rb_plus($rb_times(sucNL, 5), 5)))) {
        sucNL = $rb_plus(sucNL, 1)
      };
      sucLv = $rb_minus(sucLv, 1);
      sucNL = $rb_minus(sucNL, 1);
      if ($truthy($rb_le(sucLv, 0))) {
        return " ＞ 失敗"
      } else {
        return "" + " ＞ Lv" + (sucLv) + "/NL" + (sucNL) + "成功"
      };
    }, $NightmareHunterDeep_check_nD6$5.$$arity = 5);
    
    Opal.def(self, '$getDiceRolledAdditionalText', $NightmareHunterDeep_getDiceRolledAdditionalText$6 = function $$getDiceRolledAdditionalText(n1, n_max, dice_max) {
      var $a, self = this;

      
      self.$debug("getDiceRolledAdditionalText begin: n1, n_max, dice_max", n1, n_max, dice_max);
      if ($truthy(($truthy($a = n1['$!='](0)) ? dice_max['$=='](6) : $a))) {
        return " ＞ 宿命獲得"};
      return "";
    }, $NightmareHunterDeep_getDiceRolledAdditionalText$6.$$arity = 3);
    return (Opal.def(self, '$getDiceRevision', $NightmareHunterDeep_getDiceRevision$7 = function $$getDiceRevision(n_max, dice_max, total_n) {
      var $a, self = this, addText = nil, revision = nil;

      
      addText = "";
      revision = 0;
      if ($truthy(($truthy($a = $rb_gt(n_max, 0)) ? dice_max['$=='](6) : $a))) {
        
        revision = $rb_times(n_max, 4);
        addText = "" + "+" + (n_max) + "*4 ＞ " + ($rb_plus(total_n, revision));};
      return [addText, revision];
    }, $NightmareHunterDeep_getDiceRevision$7.$$arity = 3), nil) && 'getDiceRevision';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
