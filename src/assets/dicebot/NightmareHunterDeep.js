/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$debug', '$sub', '$last_match', '$-', '$*', '$to_i', '$+', '$==', '$!=', '$>=', '$<=', '$>']);
  return (function($base, $super, $parent_nesting) {
    function $NightmareHunterDeep(){};
    var self = $NightmareHunterDeep = $klass($base, $super, 'NightmareHunterDeep', $NightmareHunterDeep);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NightmareHunterDeep_initialize_1, TMP_NightmareHunterDeep_gameName_2, TMP_NightmareHunterDeep_gameType_3, TMP_NightmareHunterDeep_getHelpMessage_4, TMP_NightmareHunterDeep_changeText_7, TMP_NightmareHunterDeep_check_nD6_8, TMP_NightmareHunterDeep_getDiceRolledAdditionalText_9, TMP_NightmareHunterDeep_getDiceRevision_10;

    
    
    Opal.defn(self, '$initialize', TMP_NightmareHunterDeep_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_NightmareHunterDeep_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_NightmareHunterDeep_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_NightmareHunterDeep_initialize_1, false), $zuper, $iter);
      self.sendMode = 2;
      return (self.sortType = 1);
    }, TMP_NightmareHunterDeep_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_NightmareHunterDeep_gameName_2 = function $$gameName() {
      var self = this;

      return "ナイトメアハンター=ディープ"
    }, TMP_NightmareHunterDeep_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_NightmareHunterDeep_gameType_3 = function $$gameType() {
      var self = this;

      return "NightmareHunterDeep"
    }, TMP_NightmareHunterDeep_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_NightmareHunterDeep_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "加算ロール時に６の個数をカウントして、その４倍を自動的に加算します。\n" + "(出目はそのまま表示で合計値が6-10の読み替えになります)\n"
    }, TMP_NightmareHunterDeep_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$changeText', TMP_NightmareHunterDeep_changeText_7 = function $$changeText(string) {
      var TMP_5, TMP_6, self = this;

      
      self.$debug("parren_killer_add before string", string);
      string = $send(string, 'sub', [/^(.+?)Lv(\d+)(.*)/i], (TMP_5 = function(){var self = TMP_5.$$s || this;

      return "" + (Opal.const_get_relative($nesting, 'Regexp').$last_match(1)) + ($rb_minus($rb_times(Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i(), 5), 1)) + (Opal.const_get_relative($nesting, 'Regexp').$last_match(3))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
      string = $send(string, 'sub', [/^(.+?)NL(\d+)(.*)/i], (TMP_6 = function(){var self = TMP_6.$$s || this;

      return "" + (Opal.const_get_relative($nesting, 'Regexp').$last_match(1)) + ($rb_plus($rb_times(Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i(), 5), 5)) + (Opal.const_get_relative($nesting, 'Regexp').$last_match(3))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
      self.$debug("parren_killer_add after string", string);
      return string;
    }, TMP_NightmareHunterDeep_changeText_7.$$arity = 1);
    
    Opal.defn(self, '$check_nD6', TMP_NightmareHunterDeep_check_nD6_8 = function $$check_nD6(total_n, _dice_n, signOfInequality, diff, _dice_cnt, _dice_max, _n1, _n_max) {
      var $a, self = this, sucLv = nil, sucNL = nil;

      
      if (signOfInequality['$=='](">=")) {
        } else {
        return ""
      };
      if ($truthy(diff['$!=']("?"))) {
        
        if ($truthy($rb_ge(total_n, diff))) {
          return " ＞ 成功"};
        return " ＞ 失敗";};
      sucLv = 1;
      sucNL = 0;
      while ($truthy($rb_ge(total_n, $rb_minus($rb_times(sucLv, 5), 1)))) {
        sucLv = $rb_plus(sucLv, 1)
      };
      while ($truthy($rb_ge(total_n, $rb_plus($rb_times(sucNL, 5), 5)))) {
        sucNL = $rb_plus(sucNL, 1)
      };
      sucLv = $rb_minus(sucLv, 1);
      sucNL = $rb_minus(sucNL, 1);
      if ($truthy($rb_le(sucLv, 0))) {
        return " ＞ 失敗"
        } else {
        return "" + " ＞ Lv" + (sucLv) + "/NL" + (sucNL) + "成功"
      };
    }, TMP_NightmareHunterDeep_check_nD6_8.$$arity = 8);
    
    Opal.defn(self, '$getDiceRolledAdditionalText', TMP_NightmareHunterDeep_getDiceRolledAdditionalText_9 = function $$getDiceRolledAdditionalText(n1, n_max, dice_max) {
      var $a, self = this;

      
      self.$debug("getDiceRolledAdditionalText begin: n1, n_max, dice_max", n1, n_max, dice_max);
      if ($truthy(($truthy($a = n1['$!='](0)) ? dice_max['$=='](6) : $a))) {
        return " ＞ 宿命獲得"};
      return "";
    }, TMP_NightmareHunterDeep_getDiceRolledAdditionalText_9.$$arity = 3);
    return (Opal.defn(self, '$getDiceRevision', TMP_NightmareHunterDeep_getDiceRevision_10 = function $$getDiceRevision(n_max, dice_max, total_n) {
      var $a, self = this, addText = nil, revision = nil;

      
      addText = "";
      revision = 0;
      if ($truthy(($truthy($a = $rb_gt(n_max, 0)) ? dice_max['$=='](6) : $a))) {
        
        revision = $rb_times(n_max, 4);
        addText = "" + "+" + (n_max) + "*4 ＞ " + ($rb_plus(total_n, revision));};
      return [addText, revision];
    }, TMP_NightmareHunterDeep_getDiceRevision_10.$$arity = 3), nil) && 'getDiceRevision';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
