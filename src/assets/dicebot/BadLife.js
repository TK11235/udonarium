/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$upcase', '$judgeDice', '$nil?', '$===', '$last_match', '$get_name_table', '$get_skill_table', '$match', '$to_i', '$[]', '$==', '$-', '$+', '$get_value', '$get_critival_fumble', '$checkRoll', '$include?', '$roll', '$collect', '$split', '$each', '$>', '$<=', '$>=', '$!=', '$to_s', '$get_badlife_1d20_table_result', '$get_table_by_number', '$get_badlife_table_result', '$parren_killer']);
  return (function($base, $super, $parent_nesting) {
    function $BadLife(){};
    var self = $BadLife = $klass($base, $super, 'BadLife', $BadLife);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BadLife_initialize_1, TMP_BadLife_gameName_2, TMP_BadLife_gameType_3, TMP_BadLife_getHelpMessage_4, TMP_BadLife_rollDiceCommand_5, TMP_BadLife_judgeDice_6, TMP_BadLife_get_critival_fumble_7, TMP_BadLife_checkRoll_10, TMP_BadLife_get_name_table_11, TMP_BadLife_get_skill_table_12, TMP_BadLife_get_badlife_1d20_table_result_13, TMP_BadLife_get_badlife_table_result_14, TMP_BadLife_get_value_15;

    
    self.$setPrefixes(["\\d?(BAD|BL|GL).*", "[TDGKSB]RN", "SKL"]);
    
    Opal.defn(self, '$initialize', TMP_BadLife_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_BadLife_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_BadLife_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_BadLife_initialize_1, false), $zuper, $iter)
    }, TMP_BadLife_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_BadLife_gameName_2 = function $$gameName() {
      var self = this;

      return "犯罪活劇RPGバッドライフ"
    }, TMP_BadLife_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_BadLife_gameType_3 = function $$gameType() {
      var self = this;

      return "BadLife"
    }, TMP_BadLife_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_BadLife_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・判定：nBADm[±a][Cb±c][Fd±e][@X±f][!OP]　　[]内のコマンドは省略可。\n" + "・BADコマンドは「BL」コマンドで代用可。\n" + "・博徒は「GL」コマンドで〈波乱万丈〉の効果を適用。\n" + "\n" + "「n」で振るダイス数、「m」で特性値、「±a」で達成値への修正値、\n" + "「Cb±c」でクリティカル値への修正、「Fd±e」でファンブル値への修正、\n" + "「@X」で目標難易度を指定。\n" + "「±a」「Cb±c」「Fd±e」[@X±f]部分は「4+1-3」などの複数回指定可。\n" + "「!OP」部分で、一部のスキルやガジェットの追加効果を指定可。\n" + "使用可能なコマンドは以下の通り。順不同、複数同時使用も可。\n" + "A：〈先見の明〉　　H：［重撃］\n" + "\n" + "【書式例】\n" + "BAD → 1ダイスで達成値を表示。\n" + "3BAD10+2-1 → 3ダイスで修正+11の達成値を表示。\n" + "BL8@15 → 1ダイスで修正+8、難易度15の判定。\n" + "2BL8C-1F1@15 → 2ダイスで修正+8、C値-1、F値+1、難易度15の判定。\n" + "GL6@20 → 1ダイスで修正+6、難易度20の判定。〈波乱万丈〉の効果。\n" + "GL6@20!HA → 上記に加えて〈先見の明〉［重撃］の効果。\n" + "\n" + "・コードネーム表\n" + "怪盗：TRN　　　闇医者：DRN　　博徒：GRN\n" + "殺シ屋：KRN　　業師：SRN　　　遊ビ人：BRN\n" + "\n" + "・スキル表：SKL\n"
    }, TMP_BadLife_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_BadLife_rollDiceCommand_5 = function $$rollDiceCommand(command) {
      var self = this, result = nil, output = nil, $case = nil, initials = nil;

      
      command = command.$upcase();
      result = self.$judgeDice(command);
      if ($truthy(result['$nil?']())) {
        } else {
        return result
      };
      output = (function() {$case = command;
      if (/([TDGKSB])RN/i['$===']($case)) {
      initials = Opal.const_get_relative($nesting, 'Regexp').$last_match(1);
      return self.$get_name_table(initials);}
      else if ("SKL"['$===']($case)) {return self.$get_skill_table()}
      else { return nil }})();
      return output;
    }, TMP_BadLife_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$judgeDice', TMP_BadLife_judgeDice_6 = function $$judgeDice(command) {
      var $a, $b, self = this, m = nil, diceCount = nil, critical = nil, fumble = nil, isStormy = nil, modify = nil, target = nil, optionalText = nil;

      
      if ($truthy((m = /(\d+)?(BAD|BL|GL)([\+\-\d+]*)((C|F)([\+\-\d+]*)?)?((C|F)([\+\-\d+]*))?(\@([\+\-\d+]*))?(\!(\D*))?/i.$match(command)))) {
        } else {
        return nil
      };
      diceCount = ($truthy($a = m['$[]'](1)) ? $a : 1).$to_i();
      critical = 20;
      fumble = 1;
      isStormy = m['$[]'](2)['$==']("GL");
      if ($truthy(isStormy)) {
        
        critical = $rb_minus(critical, 3);
        fumble = $rb_plus(fumble, 1);};
      modify = self.$get_value(m['$[]'](3));
      $b = self.$get_critival_fumble(critical, fumble, m['$[]'](5), m['$[]'](6)), $a = Opal.to_ary($b), (critical = ($a[0] == null ? nil : $a[0])), (fumble = ($a[1] == null ? nil : $a[1])), $b;
      $b = self.$get_critival_fumble(critical, fumble, m['$[]'](8), m['$[]'](9)), $a = Opal.to_ary($b), (critical = ($a[0] == null ? nil : $a[0])), (fumble = ($a[1] == null ? nil : $a[1])), $b;
      target = self.$get_value(m['$[]'](11));
      optionalText = ($truthy($a = m['$[]'](13)) ? $a : "");
      return self.$checkRoll(diceCount, modify, critical, fumble, target, isStormy, optionalText);
    }, TMP_BadLife_judgeDice_6.$$arity = 1);
    
    Opal.defn(self, '$get_critival_fumble', TMP_BadLife_get_critival_fumble_7 = function $$get_critival_fumble(critical, fumble, marker, text) {
      var self = this, $case = nil;

      
      $case = marker;
      if ("C"['$===']($case)) {critical = $rb_plus(critical, self.$get_value(text))}
      else if ("F"['$===']($case)) {fumble = $rb_plus(fumble, self.$get_value(text))};
      return [critical, fumble];
    }, TMP_BadLife_get_critival_fumble_7.$$arity = 4);
    
    Opal.defn(self, '$checkRoll', TMP_BadLife_checkRoll_10 = function $$checkRoll(diceCount, modify, critical, fumble, target, isStormy, optionalText) {
      var $a, $b, TMP_8, TMP_9, self = this, isAnticipation = nil, isHeavyAttack = nil, dice = nil, diceText = nil, diceMax = nil, diceArray = nil, isCritical = nil, isFumble = nil, total = nil, result = nil, success = nil, skillText = nil;

      
      isAnticipation = optionalText['$include?']("A");
      isHeavyAttack = optionalText['$include?']("H");
      $b = self.$roll(diceCount, 20), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      diceMax = 0;
      diceArray = $send(diceText.$split(/,/), 'collect', [], (TMP_8 = function(i){var self = TMP_8.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
      $send(diceArray, 'each', [], (TMP_9 = function(i){var self = TMP_9.$$s || this;
if (i == null) i = nil;
      if ($truthy($rb_gt(i, diceMax))) {
          return (diceMax = i)
          } else {
          return nil
        }}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
      if ($truthy(($truthy($a = isHeavyAttack) ? $rb_le(diceMax, 5) : $a))) {
        diceMax = 5};
      isCritical = $rb_ge(diceMax, critical);
      isFumble = $rb_le(diceMax, fumble);
      if ($truthy(isCritical)) {
        diceMax = 20};
      total = $rb_plus(diceMax, modify);
      if ($truthy(($truthy($a = isAnticipation) ? $rb_le(diceMax, 7) : $a))) {
        total = $rb_plus(total, 5)};
      if ($truthy(isFumble)) {
        total = 0};
      result = "" + (diceCount) + "D20(C:" + (critical) + ",F:" + (fumble) + ") ＞ ";
      result = $rb_plus(result, "" + (diceMax) + "[" + (diceText) + "]");
      if ($truthy($rb_gt(modify, 0))) {
        result = $rb_plus(result, "+")};
      if ($truthy(modify['$!='](0))) {
        result = $rb_plus(result, modify.$to_s())};
      if ($truthy(($truthy($a = isAnticipation) ? $rb_le(diceMax, 7) : $a))) {
        result = $rb_plus(result, "+5")};
      result = $rb_plus(result, "" + " ＞ 達成値：" + (total));
      if ($truthy($rb_gt(target, 0))) {
        
        success = $rb_minus(total, target);
        result = $rb_plus(result, "" + ">=" + (target) + " 成功度：" + (success) + " ＞ ");
        if ($truthy(isCritical)) {
          result = $rb_plus(result, "成功（クリティカル）")
        } else if ($truthy($rb_ge(total, target))) {
          result = $rb_plus(result, "成功")
          } else {
          
          result = $rb_plus(result, "失敗");
          if ($truthy(isFumble)) {
            result = $rb_plus(result, "（ファンブル）")};
        };
        } else {
        
        if ($truthy(isCritical)) {
          result = $rb_plus(result, " クリティカル")};
        if ($truthy(isFumble)) {
          result = $rb_plus(result, " ファンブル")};
      };
      skillText = "";
      if ($truthy(isStormy)) {
        skillText = $rb_plus(skillText, "〈波乱万丈〉")};
      if ($truthy(isAnticipation)) {
        skillText = $rb_plus(skillText, "〈先見の明〉")};
      if ($truthy(isHeavyAttack)) {
        skillText = $rb_plus(skillText, "［重撃］")};
      if ($truthy(skillText['$!='](""))) {
        result = $rb_plus(result, "" + " " + (skillText))};
      return result;
    }, TMP_BadLife_checkRoll_10.$$arity = 7);
    
    Opal.defn(self, '$get_name_table', TMP_BadLife_get_name_table_11 = function $$get_name_table(initials) {
      var self = this, $case = nil, name = nil, table = nil;

      
      $case = initials;
      if ("T"['$===']($case)) {
      name = "怪盗コードネーム表";
      table = [[1, "フォックス"], [2, "フォックス"], [3, "ラット"], [4, "ラット"], [5, "キャット"], [6, "キャット"], [7, "タイガー"], [8, "タイガー"], [9, "シャーク"], [10, "シャーク"], [11, "コンドル"], [12, "コンドル"], [13, "スパイダー"], [14, "スパイダー"], [15, "ウルフ"], [16, "ウルフ"], [17, "コヨーテ"], [18, "コヨーテ"], [19, "ジャガー"], [20, "ジャガー"]];}
      else if ("D"['$===']($case)) {
      name = "闇医者コードネーム表";
      table = [[1, "キャンサー"], [2, "キャンサー"], [3, "ヘッドエイク"], [4, "ヘッドエイク"], [5, "ブラッド"], [6, "ブラッド"], [7, "ウーンズ"], [8, "ウーンズ"], [9, "ポイズン"], [10, "ポイズン"], [11, "ペイン"], [12, "ペイン"], [13, "スリープ"], [14, "スリープ"], [15, "キュア"], [16, "キュア"], [17, "デス"], [18, "デス"], [19, "リーンカーネイション"], [20, "リーンカーネイション"]];}
      else if ("G"['$===']($case)) {
      name = "博徒コードネーム表";
      table = [[1, "リトルダイス"], [2, "リトルダイス"], [3, "プラチナム"], [4, "プラチナム"], [5, "プレジデント"], [6, "プレジデント"], [7, "ドリーム"], [8, "ドリーム"], [9, "アクシデント"], [10, "アクシデント"], [11, "グリード"], [12, "グリード"], [13, "フォーチュン"], [14, "フォーチュン"], [15, "ミラクル"], [16, "ミラクル"], [17, "ホープ"], [18, "ホープ"], [19, "ビッグヒット"], [20, "ビッグヒット"]];}
      else if ("K"['$===']($case)) {
      name = "殺シ屋コードネーム表";
      table = [[1, "ハンマー"], [2, "ハンマー"], [3, "アロー"], [4, "アロー"], [5, "ボマー"], [6, "ボマー"], [7, "キャノン"], [8, "キャノン"], [9, "ブレード"], [10, "ブレード"], [11, "スティング"], [12, "スティング"], [13, "ガロット"], [14, "ガロット"], [15, "パイルバンカー"], [16, "パイルバンカー"], [17, "レイザー"], [18, "レイザー"], [19, "カタナ"], [20, "カタナ"]];}
      else if ("S"['$===']($case)) {
      name = "業師コードネーム表";
      table = [[1, "ローズ"], [2, "ローズ"], [3, "サクラ"], [4, "サクラ"], [5, "ライラック"], [6, "ライラック"], [7, "ダンデライオン"], [8, "ダンデライオン"], [9, "フリージア"], [10, "フリージア"], [11, "カクタス"], [12, "カクタス"], [13, "ロータス"], [14, "ロータス"], [15, "リリィ"], [16, "リリィ"], [17, "ラフレシア"], [18, "ラフレシア"], [19, "ヒヤシンス"], [20, "ヒヤシンス"]];}
      else if ("B"['$===']($case)) {
      name = "遊ビ人コードネーム表";
      table = [[1, "モノポリー"], [2, "モノポリー"], [3, "ブリッジ"], [4, "ブリッジ"], [5, "チェッカー"], [6, "チェッカー"], [7, "アクワイア"], [8, "アクワイア"], [9, "ジャンケン"], [10, "ジャンケン"], [11, "トランプ"], [12, "トランプ"], [13, "ケイドロ"], [14, "ケイドロ"], [15, "パンデミック"], [16, "パンデミック"], [17, "スゴロク"], [18, "スゴロク"], [19, "キャベツカンテイ"], [20, "キャベツカンテイ"]];}
      else {return nil};
      return self.$get_badlife_1d20_table_result(name, table);
    }, TMP_BadLife_get_name_table_11.$$arity = 1);
    
    Opal.defn(self, '$get_skill_table', TMP_BadLife_get_skill_table_12 = function $$get_skill_table() {
      var $a, $b, self = this, name = nil, table = nil, dice = nil, result = nil;

      
      name = "スキル表";
      table = [[1, "一撃離脱"], [2, "一撃離脱"], [3, "チェイサー"], [4, "チェイサー"], [5, "影の外套"], [6, "影の外套"], [7, "二段ジャンプ"], [8, "二段ジャンプ"], [9, "韋駄天"], [10, "韋駄天"], [11, "手練"], [12, "手練"], [13, "ハニーテイスト"], [14, "ハニーテイスト"], [15, "先見の明"], [16, "先見の明"], [17, "ベテラン"], [18, "ベテラン"], [19, "応急手当"], [20, "応急手当"], [21, "セラピー"], [22, "セラピー"], [23, "緊急治療"], [24, "緊急治療"], [25, "ゴールドディガー"], [26, "ゴールドディガー"], [27, "デイリーミッション"], [28, "デイリーミッション"], [29, "見切り"], [30, "見切り"], [31, "鷹の目"], [32, "鷹の目"], [33, "しびれ罠"], [34, "しびれ罠"], [35, "大逆転"], [36, "大逆転"], [37, "武器習熟：○○"], [38, "武器習熟：○○"], [39, "百発百中"], [40, "百発百中"], [41, "屈強な肉体"], [42, "屈強な肉体"], [43, "二刀流"], [44, "二刀流"], [45, "クイックリカバリー"], [46, "クイックリカバリー"], [47, "体験主義"], [48, "体験主義"], [49, "破釜沈船"], [50, "破釜沈船"], [51, "想定の範囲内"], [52, "想定の範囲内"], [53, "セカンドチャンス"], [54, "セカンドチャンス"], [55, "優秀な子分"], [56, "優秀な子分"], [57, "時間管理術"], [58, "時間管理術"], [59, "連撃術"], [60, "連撃術"], [61, "罵詈雑言"], [62, "罵詈雑言"], [63, "ケセラセラ"], [64, "ケセラセラ"], [65, "ダンス＆ミュージック"], [66, "ダンス＆ミュージック"], [67, "フェイント"], [68, "フェイント"], [69, "ヘイトコントロール"], [70, "ヘイトコントロール"], [71, "惜別"], [72, "惜別"], [73, "戦闘マシーン"], [74, "戦闘マシーン"], [75, "戦闘マシーン"], [76, "名医"], [77, "名医"], [78, "名医"], [79, "忍者"], [80, "忍者"], [81, "忍者"], [82, "観察眼"], [83, "観察眼"], [84, "観察眼"], [85, "クレバー"], [86, "クレバー"], [87, "クレバー"], [88, "フェイスマン"], [89, "フェイスマン"], [90, "フェイスマン"], [91, "スポーツマン"], [92, "スポーツマン"], [93, "スポーツマン"], [94, "不屈"], [95, "不屈"], [96, "不屈"], [97, "慎重"], [98, "慎重"], [99, "慎重"], [100, "この表を2回振る"]];
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
      result = self.$get_table_by_number(dice, table);
      return self.$get_badlife_table_result(name, dice, result);
    }, TMP_BadLife_get_skill_table_12.$$arity = 0);
    
    Opal.defn(self, '$get_badlife_1d20_table_result', TMP_BadLife_get_badlife_1d20_table_result_13 = function $$get_badlife_1d20_table_result(name, table) {
      var $a, $b, self = this, dice = nil, output = nil;

      
      $b = self.$roll(1, 20), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), $b;
      output = self.$get_table_by_number(dice, table);
      return self.$get_badlife_table_result(name, dice, output);
    }, TMP_BadLife_get_badlife_1d20_table_result_13.$$arity = 2);
    
    Opal.defn(self, '$get_badlife_table_result', TMP_BadLife_get_badlife_table_result_14 = function $$get_badlife_table_result(name, dice, output) {
      var self = this;

      return "" + (name) + "(" + (dice) + ") ＞ " + (output)
    }, TMP_BadLife_get_badlife_table_result_14.$$arity = 3);
    return (Opal.defn(self, '$get_value', TMP_BadLife_get_value_15 = function $$get_value(text) {
      var $a, self = this;

      
      text = ($truthy($a = text) ? $a : "");
      return self.$parren_killer("" + "(0" + (text) + ")").$to_i();
    }, TMP_BadLife_get_value_15.$$arity = 1), nil) && 'get_value';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
