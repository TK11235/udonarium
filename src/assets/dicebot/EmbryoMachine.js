/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$gsub', '$last_match', '$checkRoll', '$==', '$<=', '$>=', '$=~', '$to_i', '$parren_killer', '$roll', '$&', '$sortType', '$collect', '$split', '$[]', '$+', '$>', '$<', '$to_s', '$get_hit_level_table', '$get_hit_location_table', '$debug', '$===', '$get_shoot_fumble_table', '$get_melee_fumble_table', '$!=', '$get_table_by_number', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EmbryoMachine');

    var $nesting = [self].concat($parent_nesting), $EmbryoMachine_initialize$1, $EmbryoMachine_changeText$2, $EmbryoMachine_dice_command_xRn$11, $EmbryoMachine_check_nD10$12, $EmbryoMachine_checkRoll$13, $EmbryoMachine_rollDiceCommand$15, $EmbryoMachine_get_hit_location_table$16, $EmbryoMachine_get_shoot_fumble_table$17, $EmbryoMachine_get_melee_fumble_table$18, $EmbryoMachine_get_hit_level_table$19;

    
    Opal.const_set($nesting[0], 'ID', "EmbryoMachine");
    Opal.const_set($nesting[0], 'NAME', "エムブリオマシン");
    Opal.const_set($nesting[0], 'SORT_KEY', "えむふりおましん");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定ロール(EMt+m@c#f)\n" + "　目標値t、修正値m、クリティカル値c(省略時は20)、ファンブル値f(省略時は2)で攻撃判定を行います。\n" + "　命中した場合は命中レベルと命中部位も自動出力します。\n" + "　Rコマンドに読み替えされます。\n" + "・各種表\n" + "　・命中部位表　HLT\n" + "　・白兵攻撃ファンブル表　MFT\n" + "　・射撃攻撃ファンブル表　SFT\n");
    self.$setPrefixes(["(EM\\t+|HLT|MFT|SFT)"]);
    
    Opal.def(self, '$initialize', $EmbryoMachine_initialize$1 = function $$initialize() {
      var $iter = $EmbryoMachine_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $EmbryoMachine_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $EmbryoMachine_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      return (self.sortType = 1);
    }, $EmbryoMachine_initialize$1.$$arity = 0);
    
    Opal.def(self, '$changeText', $EmbryoMachine_changeText$2 = function $$changeText(string) {
      var $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10, self = this;

      
      string = $send(string, 'gsub', [/EM(\d+)([\+\-][\+\-\d]+)(@(\d+))(\#(\d+))/i], ($$3 = function(){var self = $$3.$$s || this;

      return "" + "2R10" + ($$($nesting, 'Regexp').$last_match(2)) + ">=" + ($$($nesting, 'Regexp').$last_match(1)) + "[" + ($$($nesting, 'Regexp').$last_match(4)) + "," + ($$($nesting, 'Regexp').$last_match(6)) + "]"}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'gsub', [/EM(\d+)([\+\-][\+\-\d]+)(\#(\d+))/i], ($$4 = function(){var self = $$4.$$s || this;

      return "" + "2R10" + ($$($nesting, 'Regexp').$last_match(2)) + ">=" + ($$($nesting, 'Regexp').$last_match(1)) + "[20," + ($$($nesting, 'Regexp').$last_match(4)) + "]"}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      string = $send(string, 'gsub', [/EM(\d+)([\+\-][\+\-\d]+)(@(\d+))/i], ($$5 = function(){var self = $$5.$$s || this;

      return "" + "2R10" + ($$($nesting, 'Regexp').$last_match(2)) + ">=" + ($$($nesting, 'Regexp').$last_match(1)) + "[" + ($$($nesting, 'Regexp').$last_match(4)) + ",2]"}, $$5.$$s = self, $$5.$$arity = 0, $$5));
      string = $send(string, 'gsub', [/EM(\d+)([\+\-][\+\-\d]+)/i], ($$6 = function(){var self = $$6.$$s || this;

      return "" + "2R10" + ($$($nesting, 'Regexp').$last_match(2)) + ">=" + ($$($nesting, 'Regexp').$last_match(1)) + "[20,2]"}, $$6.$$s = self, $$6.$$arity = 0, $$6));
      string = $send(string, 'gsub', [/EM(\d+)(@(\d+))(\#(\d+))/i], ($$7 = function(){var self = $$7.$$s || this;

      return "" + "2R10>=" + ($$($nesting, 'Regexp').$last_match(1)) + "[" + ($$($nesting, 'Regexp').$last_match(3)) + "," + ($$($nesting, 'Regexp').$last_match(5)) + "]"}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      string = $send(string, 'gsub', [/EM(\d+)(\#(\d+))/i], ($$8 = function(){var self = $$8.$$s || this;

      return "" + "2R10>=" + ($$($nesting, 'Regexp').$last_match(1)) + "[20," + ($$($nesting, 'Regexp').$last_match(3)) + "]"}, $$8.$$s = self, $$8.$$arity = 0, $$8));
      string = $send(string, 'gsub', [/EM(\d+)(@(\d+))/i], ($$9 = function(){var self = $$9.$$s || this;

      return "" + "2R10>=" + ($$($nesting, 'Regexp').$last_match(1)) + "[" + ($$($nesting, 'Regexp').$last_match(3)) + ",2]"}, $$9.$$s = self, $$9.$$arity = 0, $$9));
      return (string = $send(string, 'gsub', [/EM(\d+)/i], ($$10 = function(){var self = $$10.$$s || this;

      return "" + "2R10>=" + ($$($nesting, 'Regexp').$last_match(1)) + "[20,2]"}, $$10.$$s = self, $$10.$$arity = 0, $$10)));
    }, $EmbryoMachine_changeText$2.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $EmbryoMachine_dice_command_xRn$11 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$checkRoll(string, nick_e)
    }, $EmbryoMachine_dice_command_xRn$11.$$arity = 2);
    
    Opal.def(self, '$check_nD10', $EmbryoMachine_check_nD10$12 = function $$check_nD10(total, dice_total, _dice_list, cmp_op, target) {
      var self = this;

      
      if (cmp_op['$=='](">=")) {
      } else {
        return ""
      };
      if ($truthy($rb_le(dice_total, 2))) {
        return " ＞ ファンブル"
      } else if ($truthy($rb_ge(dice_total, 20))) {
        return " ＞ クリティカル"
      } else if ($truthy($rb_ge(total, target))) {
        return " ＞ 成功"
      } else {
        return " ＞ 失敗"
      };
    }, $EmbryoMachine_check_nD10$12.$$arity = 5);
    
    Opal.def(self, '$checkRoll', $EmbryoMachine_checkRoll$13 = function $$checkRoll(string, nick_e) {
      var $a, $b, $$14, self = this, output = nil, diff = nil, crit = nil, fumble = nil, mod = nil, total_n = nil, modText = nil, dice_now = nil, dice_str = nil, dice_loc = nil, dice_arr = nil, big_dice = nil;

      
      output = "1";
      if ($truthy(/(^|\s)S?(2[rR]10([\+\-\d]+)?([>=]+(\d+))(\[(\d+),(\d+)\]))(\s|$)/i['$=~'](string))) {
      } else {
        return output
      };
      string = $$($nesting, 'Regexp').$last_match(2);
      diff = 0;
      crit = 20;
      fumble = 2;
      mod = 0;
      total_n = 0;
      modText = $$($nesting, 'Regexp').$last_match(3);
      if ($truthy($$($nesting, 'Regexp').$last_match(5))) {
        diff = $$($nesting, 'Regexp').$last_match(5).$to_i()};
      if ($truthy($$($nesting, 'Regexp').$last_match(7))) {
        crit = $$($nesting, 'Regexp').$last_match(7).$to_i()};
      if ($truthy($$($nesting, 'Regexp').$last_match(8))) {
        fumble = $$($nesting, 'Regexp').$last_match(8).$to_i()};
      if ($truthy(modText)) {
        mod = self.$parren_killer("" + "(0" + (modText) + ")").$to_i()};
      $b = self.$roll(2, 10, self.$sortType()['$&'](1)), $a = Opal.to_ary($b), (dice_now = ($a[0] == null ? nil : $a[0])), (dice_str = ($a[1] == null ? nil : $a[1])), $b;
      $b = self.$roll(2, 10), $a = Opal.to_ary($b), (dice_loc = ($a[0] == null ? nil : $a[0])), $b;
      dice_arr = $send(dice_str.$split(/,/), 'collect', [], ($$14 = function(i){var self = $$14.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      big_dice = dice_arr['$[]'](1);
      output = "" + (dice_now) + "[" + (dice_str) + "]";
      total_n = $rb_plus(dice_now, mod);
      if ($truthy($rb_gt(mod, 0))) {
        output = $rb_plus(output, "" + "+" + (mod))
      } else if ($truthy($rb_lt(mod, 0))) {
        output = $rb_plus(output, mod.$to_s())};
      if ($truthy(output['$=~'](/[^\d\[\]]+/))) {
        output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output) + " ＞ " + (total_n)
      } else {
        output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output)
      };
      if ($truthy($rb_le(dice_now, fumble))) {
        output = $rb_plus(output, " ＞ ファンブル")
      } else if ($truthy($rb_ge(dice_now, crit))) {
        output = $rb_plus(output, $rb_plus($rb_plus(" ＞ クリティカル ＞ ", self.$get_hit_level_table(big_dice)), "" + "(ダメージ+10) ＞ [" + (dice_loc) + "]" + (self.$get_hit_location_table(dice_loc))))
      } else if ($truthy($rb_ge(total_n, diff))) {
        output = $rb_plus(output, $rb_plus($rb_plus(" ＞ 成功 ＞ ", self.$get_hit_level_table(big_dice)), "" + " ＞ [" + (dice_loc) + "]" + (self.$get_hit_location_table(dice_loc))))
      } else {
        output = $rb_plus(output, " ＞ 失敗")
      };
      return output;
    }, $EmbryoMachine_checkRoll$13.$$arity = 2);
    
    Opal.def(self, '$rollDiceCommand', $EmbryoMachine_rollDiceCommand$15 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, output = nil, type = nil, number = nil, $case = nil;

      
      self.$debug("rollDiceCommand command", command);
      output = "1";
      type = "";
      number = 0;
      $case = command;
      if (/HLT/i['$===']($case)) {
      type = "命中部位";
      $b = self.$roll(2, 10), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), $b;
      output = self.$get_hit_location_table(number);}
      else if (/SFT/i['$===']($case)) {
      type = "射撃ファンブル";
      $b = self.$roll(2, 10), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), $b;
      output = self.$get_shoot_fumble_table(number);}
      else if (/MFT/i['$===']($case)) {
      type = "白兵ファンブル";
      $b = self.$roll(2, 10), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), $b;
      output = self.$get_melee_fumble_table(number);};
      if ($truthy(output['$!=']("1"))) {
        output = "" + (type) + "表(" + (number) + ") ＞ " + (output)};
      return output;
    }, $EmbryoMachine_rollDiceCommand$15.$$arity = 1);
    
    Opal.def(self, '$get_hit_location_table', $EmbryoMachine_get_hit_location_table$16 = function $$get_hit_location_table(num) {
      var self = this, table = nil;

      
      table = [[4, "頭"], [7, "左脚"], [9, "左腕"], [12, "胴"], [14, "右腕"], [17, "右脚"], [20, "頭"]];
      return self.$get_table_by_number(num, table);
    }, $EmbryoMachine_get_hit_location_table$16.$$arity = 1);
    
    Opal.def(self, '$get_shoot_fumble_table', $EmbryoMachine_get_shoot_fumble_table$17 = function $$get_shoot_fumble_table(num) {
      var self = this, output = nil, table = nil, dc = nil;

      
      output = "1";
      table = ["暴発した。使用した射撃武器が搭載されている部位に命中レベルAで命中する。", "あまりに無様な誤射をした。パイロットの精神的負傷が2段階上昇する。", "誤射をした。自機に最も近い味方機体に命中レベルAで命中する。", "誤射をした。対象に最も近い味方機体に命中レベルAで命中する。", "武装が暴発した。使用した射撃武器が破損する。ダメージは発生しない。", "転倒した。次のセグメントのアクションが待機に変更される。", "弾詰まりを起こした。使用した射撃武器は戦闘終了まで使用できなくなる。", "砲身が大きく歪んだ。使用した射撃武器による射撃攻撃の命中値が戦闘終了まで-3される。", "熱量が激しく増大した。使用した射撃武器の消費弾薬が戦闘終了まで+3される。", "暴発した。使用した射撃武器が搭載されている部位に命中レベルBで命中する。", "弾薬が劣化した。使用した射撃武器の全てのダメージが戦闘終了まで-2される。", "無様な誤射をした。パイロットの精神的負傷が1段階上昇する。", "誤射をした。対象に最も近い味方機体に命中レベルBで命中する。", "誤射をした。自機に最も近い味方機体に命中レベルBで命中する。", "砲身が歪んだ。使用した射撃武器による射撃攻撃の命中値が戦闘終了まで-2される。", "熱量が増大した。使用した射撃武器の消費弾薬が戦闘終了まで+2される。", "砲身がわずかに歪んだ。使用した射撃武器による射撃攻撃の命中値が戦闘終了まで-1される。", "熱量がやや増大した。使用した射撃武器の消費弾薬が戦闘終了まで+1される。", "何も起きなかった。"];
      dc = 2;
      if ($truthy(table['$[]']($rb_minus(num, dc)))) {
        output = table['$[]']($rb_minus(num, dc))};
      return output;
    }, $EmbryoMachine_get_shoot_fumble_table$17.$$arity = 1);
    
    Opal.def(self, '$get_melee_fumble_table', $EmbryoMachine_get_melee_fumble_table$18 = function $$get_melee_fumble_table(num) {
      var self = this, output = nil, table = nil, dc = nil;

      
      output = "1";
      table = ["大振りしすぎた。使用した白兵武器が搭載されている部位の反対の部位(右腕に搭載されているなら左側)に命中レベルAで命中する。", "激しく頭を打った。パイロットの肉体的負傷が2段階上昇する。", "過負荷で部位が爆発した。使用した白兵武器が搭載されている部位が全壊する。ダメージは発生せず、搭載されている武装も破損しない。", "大振りしすぎた。使用した白兵武器が搭載されている部位の反対の部位(右腕に搭載されているなら左側)に命中レベルBで命中する。", "武装が爆発した。使用した白兵武器が破損する。ダメージは発生しない。", "部分的に機能停止した。使用した白兵武器は戦闘終了まで使用できなくなる。", "転倒した。次のセグメントのアクションが待機に変更される。", "激しい刃こぼれを起こした。使用した白兵武器の全てのダメージが戦闘終了まで-3される。", "地面の凹凸にはまった。次の2セグメントは移動を行うことができない。", "刃こぼれを起こした。使用した白兵武器の全てのダメージが戦闘終了まで-2される。", "大振りしすぎた。使用した白兵武器が搭載されている部位の反対の部位(右腕に搭載されているなら左側)に命中レベルCで命中する。", "頭を打った。パイロットの肉体的負傷が1段階上昇する。", "駆動系が損傷した。移動力が戦闘終了まで-2される(最低1)。", "間合いを取り損ねた。隣接している機体(複数の場合は1機をランダムに決定)に激突する。", "機体ごと突っ込んだ。機体が向いている方角へ移動力をすべて消費するまで移動する。", "制御系が損傷した。回避値が戦闘終了まで-1される(最低1)。", "踏み誤った。機体が向いている方角へ移動力の半分を消費するまで移動する。", "たたらを踏んだ。機体が向いている方角へ1の移動力で移動する。", "何も起きなかった。"];
      dc = 2;
      if ($truthy(table['$[]']($rb_minus(num, dc)))) {
        output = table['$[]']($rb_minus(num, dc))};
      return output;
    }, $EmbryoMachine_get_melee_fumble_table$18.$$arity = 1);
    return (Opal.def(self, '$get_hit_level_table', $EmbryoMachine_get_hit_level_table$19 = function $$get_hit_level_table(num) {
      var self = this, table = nil;

      
      table = [[6, "命中レベルC"], [9, "命中レベルB"], [10, "命中レベルA"]];
      return self.$get_table_by_number(num, table);
    }, $EmbryoMachine_get_hit_level_table$19.$$arity = 1), nil) && 'get_hit_level_table';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
