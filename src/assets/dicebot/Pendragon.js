/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$<=', '$>=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Pendragon');

    var $nesting = [self].concat($parent_nesting), $Pendragon_check_1D20$1;

    
    Opal.const_set($nesting[0], 'ID', "Pendragon");
    Opal.const_set($nesting[0], 'NAME', "ペンドラゴン");
    Opal.const_set($nesting[0], 'SORT_KEY', "へんとらこん");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "クリティカル、成功、失敗、ファンブルの自動判定を行います。\n");
    return (Opal.def(self, '$check_1D20', $Pendragon_check_1D20$1 = function $$check_1D20(total, _dice_total, cmp_op, target) {
      var $a, self = this;

      
      if (cmp_op['$==']("<=")) {
      } else {
        return ""
      };
      if ($truthy($rb_le(total, target))) {
        if ($truthy(($truthy($a = $rb_ge(total, $rb_minus(40, target))) ? $a : total['$=='](target)))) {
          return " ＞ クリティカル"
        } else {
          return " ＞ 成功"
        }
      } else if (total['$=='](20)) {
        return " ＞ ファンブル"
      } else {
        return " ＞ 失敗"
      };
    }, $Pendragon_check_1D20$1.$$arity = 4), nil) && 'check_1D20';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
