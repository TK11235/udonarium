/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$debug', '$/', '$*', '$>=', '$==']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ShadowRun4');

    var $nesting = [self].concat($parent_nesting), $ShadowRun4_initialize$1, $ShadowRun4_getGrichText$2;

    
    Opal.const_set($nesting[0], 'ID', "ShadowRun4");
    Opal.const_set($nesting[0], 'NAME', "シャドウラン第4版");
    Opal.const_set($nesting[0], 'SORT_KEY', "しやとうらん4");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "個数振り足しロール(xRn)の境界値を6にセット、バラバラロール(xBn)の目標値を5以上にセットします。\n" + "BコマンドとRコマンド時に、グリッチの表示を行います。\n");
    
    Opal.def(self, '$initialize', $ShadowRun4_initialize$1 = function $$initialize() {
      var $iter = $ShadowRun4_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $ShadowRun4_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $ShadowRun4_initialize$1, false), $zuper, $iter);
      self.sortType = 3;
      self.rerollNumber = 6;
      return (self.defaultSuccessTarget = ">=5");
    }, $ShadowRun4_initialize$1.$$arity = 0);
    return (Opal.def(self, '$getGrichText', $ShadowRun4_getGrichText$2 = function $$getGrichText(numberSpot1, dice_cnt_total, successCount) {
      var self = this, dice_cnt_total_half = nil;

      
      self.$debug("getGrichText numberSpot1", numberSpot1);
      self.$debug("dice_cnt_total", dice_cnt_total);
      self.$debug("successCount", successCount);
      dice_cnt_total_half = $rb_divide($rb_times(1.0, dice_cnt_total), 2);
      self.$debug("dice_cnt_total_half", dice_cnt_total_half);
      if ($truthy($rb_ge(numberSpot1, dice_cnt_total_half))) {
      } else {
        return ""
      };
      if (successCount['$=='](0)) {
        return " ＞ クリティカルグリッチ"};
      return " ＞ グリッチ";
    }, $ShadowRun4_getGrichText$2.$$arity = 3), nil) && 'getGrichText';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
Opal.loaded(["diceBot/ShadowRun4.js"]);
/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$setPrefixes', '$debug', '$match', '$[]', '$to_i', '$bdice', '$bcdice', '$>', '$-', '$gsub', '$+', '$slice', '$/', '$to_f', '$==']);
  
  self.$require("diceBot/ShadowRun4");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ShadowRun5');

    var $nesting = [self].concat($parent_nesting), $ShadowRun5_initialize$1, $ShadowRun5_rollDiceCommand$2, $ShadowRun5_getGrichText$3;

    
    Opal.const_set($nesting[0], 'ID', "ShadowRun5");
    Opal.const_set($nesting[0], 'NAME', "シャドウラン第5版");
    Opal.const_set($nesting[0], 'SORT_KEY', "しやとうらん5");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "個数振り足しロール(xRn)の境界値を6にセット、バラバラロール(xBn)の目標値を5以上にセットします。\n" + "バラバラロール(xBn)のみ、リミットをセットできます。リミットの指定は(xBn@l)のように指定します。(省略可)\n" + "BコマンドとRコマンド時に、グリッチの表示を行います。\n");
    self.$setPrefixes(["(\\d+)B6@(\\d+)"]);
    
    Opal.def(self, '$initialize', $ShadowRun5_initialize$1 = function $$initialize() {
      var $iter = $ShadowRun5_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $ShadowRun5_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $ShadowRun5_initialize$1, false), $zuper, $iter);
      self.sortType = 3;
      self.rerollNumber = 6;
      return (self.defaultSuccessTarget = ">=5");
    }, $ShadowRun5_initialize$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $ShadowRun5_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var self = this, m = nil, b_dice = nil, limit = nil, output_before_limited = nil, output_after_limited = nil, before_suc_cnt = nil, after_suc_cnt = nil, over_suc_cnt = nil, output = nil;

      
      self.$debug("chatch limit prefix");
      m = /(\d+B6)@(\d+)/.$match(command);
      b_dice = m['$[]'](1);
      limit = m['$[]'](2).$to_i();
      output_before_limited = self.$bcdice().$bdice(b_dice);
      m = /成功数(\d+)/.$match(output_before_limited);
      output_after_limited = output_before_limited;
      before_suc_cnt = m['$[]'](1).$to_i();
      after_suc_cnt = m['$[]'](1).$to_i();
      over_suc_cnt = 0;
      if ($truthy($rb_gt(before_suc_cnt, limit))) {
        
        after_suc_cnt = limit;
        over_suc_cnt = $rb_minus(before_suc_cnt, limit);
        output_after_limited = output_before_limited.$gsub(/成功数(\d+)/, "" + "成功数" + (after_suc_cnt));
        output_after_limited = $rb_plus(output_after_limited, "" + "(リミット超過" + (over_suc_cnt) + ")");};
      output = output_after_limited;
      output = output.$slice($range(2, -1, false));
      output = output.$gsub("B", "B6");
      output = output.$gsub("6>=5", "" + "[6]Limit[" + (limit) + "]>=5");
      self.$debug(output);
      return output;
    }, $ShadowRun5_rollDiceCommand$2.$$arity = 1);
    return (Opal.def(self, '$getGrichText', $ShadowRun5_getGrichText$3 = function $$getGrichText(numberSpot1, dice_cnt_total, successCount) {
      var self = this, dice_cnt_total_half = nil;

      
      self.$debug("getGrichText numberSpot1", numberSpot1);
      self.$debug("dice_cnt_total", dice_cnt_total);
      self.$debug("successCount", successCount);
      dice_cnt_total_half = $rb_divide(dice_cnt_total.$to_f(), 2);
      self.$debug("dice_cnt_total_half", dice_cnt_total_half);
      if ($truthy($rb_gt(numberSpot1, dice_cnt_total_half))) {
      } else {
        return ""
      };
      if (successCount['$=='](0)) {
        return " ＞ クリティカルグリッチ"};
      return " ＞ グリッチ";
    }, $ShadowRun5_getGrichText$3.$$arity = 3), nil) && 'getGrichText';
  })($nesting[0], $$($nesting, 'ShadowRun4'), $nesting);
})(Opal);
