/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$gsub', '$last_match', '$checkGehenaAn', '$=~', '$to_i', '$parren_killer', '$roll', '$&', '$sortType', '$collect', '$split', '$each', '$!=', '$<', '$>=', '$+', '$>', '$*', '$-', '$to_s', '$getAnastasisBonusText', '$==', '$/', '$getTougiBonus', '$get_table_by_number']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GehennaAn');

    var $nesting = [self].concat($parent_nesting), $GehennaAn_initialize$1, $GehennaAn_changeText$2, $GehennaAn_dice_command_xRn$7, $GehennaAn_checkGehenaAn$8, $GehennaAn_getAnastasisBonusText$11, $GehennaAn_getTougiBonus$12;

    
    Opal.const_set($nesting[0], 'ID', "GehennaAn");
    Opal.const_set($nesting[0], 'NAME', "ゲヘナ・アナスタシス");
    Opal.const_set($nesting[0], 'SORT_KEY', "けへなあなすたしす");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "戦闘判定と通常判定に対応。幸運の助け、連撃増加値(戦闘判定)、闘技チット(戦闘判定)を自動表示します。\n" + "・戦闘判定　(nGAt+m)\n" + "　ダイス数n、目標値t、修正値mで戦闘判定を行います。\n" + "　幸運の助け、連撃増加値、闘技チットを自動処理します。\n" + "・通常判定　(nGt+m)\n" + "　ダイス数n、目標値t、修正値mで通常判定を行います。\n" + "　幸運の助けを自動処理します。(連撃増加値、闘技チットを表示抑制します)\n");
    self.$setPrefixes(["(\\d+G\\d+|\\d+GA\\d+)"]);
    
    Opal.def(self, '$initialize', $GehennaAn_initialize$1 = function $$initialize() {
      var $iter = $GehennaAn_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $GehennaAn_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $GehennaAn_initialize$1, false), $zuper, $iter);
      self.sendMode = 3;
      return (self.sortType = 3);
    }, $GehennaAn_initialize$1.$$arity = 0);
    
    Opal.def(self, '$changeText', $GehennaAn_changeText$2 = function $$changeText(string) {
      var $$3, $$4, $$5, $$6, self = this;

      
      string = $send(string, 'gsub', [/(\d+)GA(\d+)([\+\-][\+\-\d]+)/], ($$3 = function(){var self = $$3.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6" + ($$($nesting, 'Regexp').$last_match(3)) + ">=" + ($$($nesting, 'Regexp').$last_match(2)) + "[1]"}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'gsub', [/(\d+)GA(\d+)/], ($$4 = function(){var self = $$4.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6>=" + ($$($nesting, 'Regexp').$last_match(2)) + "[1]"}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      string = $send(string, 'gsub', [/(\d+)G(\d+)([\+\-][\+\-\d]+)/], ($$5 = function(){var self = $$5.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6" + ($$($nesting, 'Regexp').$last_match(3)) + ">=" + ($$($nesting, 'Regexp').$last_match(2)) + "[0]"}, $$5.$$s = self, $$5.$$arity = 0, $$5));
      return (string = $send(string, 'gsub', [/(\d+)G(\d+)/], ($$6 = function(){var self = $$6.$$s || this;

      return "" + ($$($nesting, 'Regexp').$last_match(1)) + "R6>=" + ($$($nesting, 'Regexp').$last_match(2)) + "[0]"}, $$6.$$s = self, $$6.$$arity = 0, $$6)));
    }, $GehennaAn_changeText$2.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $GehennaAn_dice_command_xRn$7 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$checkGehenaAn(string, nick_e)
    }, $GehennaAn_dice_command_xRn$7.$$arity = 2);
    
    Opal.def(self, '$checkGehenaAn', $GehennaAn_checkGehenaAn$8 = function $$checkGehenaAn(string, nick_e) {
      var $a, $b, $$9, $$10, self = this, output = nil, diceCount = nil, modText = nil, diff = nil, mode = nil, mod = nil, diceValue = nil, diceText = nil, diceArray = nil, dice_1st = nil, isLuck = nil, success = nil, failed = nil;

      
      output = "1";
      if ($truthy(/(^|\s)S?((\d+)[rR]6([\+\-\d]+)?([>=]+(\d+))(\[(\d)\]))(\s|$)/i['$=~'](string))) {
      } else {
        return output
      };
      string = $$($nesting, 'Regexp').$last_match(2);
      diceCount = $$($nesting, 'Regexp').$last_match(3).$to_i();
      modText = $$($nesting, 'Regexp').$last_match(4);
      diff = $$($nesting, 'Regexp').$last_match(6).$to_i();
      mode = $$($nesting, 'Regexp').$last_match(8).$to_i();
      mod = self.$parren_killer("" + "(0" + (modText) + ")").$to_i();
      $b = self.$roll(diceCount, 6, self.$sortType()['$&'](1)), $a = Opal.to_ary($b), (diceValue = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      diceArray = $send(diceText.$split(/,/), 'collect', [], ($$9 = function(i){var self = $$9.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$9.$$s = self, $$9.$$arity = 1, $$9));
      dice_1st = "";
      isLuck = true;
      diceValue = 0;
      $send(diceArray, 'each', [], ($$10 = function(i){var self = $$10.$$s || this, $c;

      
        
        if (i == null) {
          i = nil;
        };
        if ($truthy(dice_1st['$!='](""))) {
          if ($truthy(($truthy($c = dice_1st['$!='](i)) ? $c : $rb_lt(i, diff)))) {
            isLuck = false}
        } else {
          dice_1st = i
        };
        if ($truthy($rb_ge(i, diff))) {
          return (diceValue = $rb_plus(diceValue, 1))
        } else {
          return nil
        };}, $$10.$$s = self, $$10.$$arity = 1, $$10));
      if ($truthy(($truthy($a = isLuck) ? $rb_gt(diceCount, 1) : $a))) {
        diceValue = $rb_times(diceValue, 2)};
      output = "" + (diceValue) + "[" + (diceText) + "]";
      success = $rb_plus(diceValue, mod);
      if ($truthy($rb_lt(success, 0))) {
        success = 0};
      failed = $rb_minus(diceCount, diceValue);
      if ($truthy($rb_lt(failed, 0))) {
        failed = 0};
      if ($truthy($rb_gt(mod, 0))) {
        output = $rb_plus(output, "" + "+" + (mod))
      } else if ($truthy($rb_lt(mod, 0))) {
        output = $rb_plus(output, mod.$to_s())};
      if ($truthy(/[^\d\[\]]+/['$=~'](output))) {
        output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output) + " ＞ 成功" + (success) + "、失敗" + (failed)
      } else {
        output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output)
      };
      output = $rb_plus(output, self.$getAnastasisBonusText(mode, success));
      return output;
    }, $GehennaAn_checkGehenaAn$8.$$arity = 2);
    
    Opal.def(self, '$getAnastasisBonusText', $GehennaAn_getAnastasisBonusText$11 = function $$getAnastasisBonusText(mode, success) {
      var self = this, ma_bonus = nil, bonus_str = nil;

      
      if (mode['$=='](0)) {
        return ""};
      ma_bonus = $rb_divide($rb_minus(success, 1), 2).$to_i();
      if ($truthy($rb_gt(ma_bonus, 7))) {
        ma_bonus = 7};
      bonus_str = "";
      if ($truthy($rb_gt(ma_bonus, 0))) {
        bonus_str = $rb_plus(bonus_str, "" + "連撃[+" + (ma_bonus) + "]/")};
      bonus_str = $rb_plus(bonus_str, "" + "闘技[" + (self.$getTougiBonus(success)) + "]");
      return "" + " ＞ " + (bonus_str);
    }, $GehennaAn_getAnastasisBonusText$11.$$arity = 2);
    return (Opal.def(self, '$getTougiBonus', $GehennaAn_getTougiBonus$12 = function $$getTougiBonus(success) {
      var self = this, table = nil;

      
      table = [[6, "1"], [13, "2"], [18, "3"], [22, "4"], [99, "5"]];
      return self.$get_table_by_number(success, table);
    }, $GehennaAn_getTougiBonus$12.$$arity = 1), nil) && 'getTougiBonus';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
