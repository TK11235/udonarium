/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  return (function($base, $super, $parent_nesting) {
    function $ShadowRun(){};
    var self = $ShadowRun = $klass($base, $super, 'ShadowRun', $ShadowRun);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ShadowRun_initialize_1, TMP_ShadowRun_gameName_2, TMP_ShadowRun_gameType_3, TMP_ShadowRun_getHelpMessage_4;

    
    
    Opal.defn(self, '$initialize', TMP_ShadowRun_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_ShadowRun_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_ShadowRun_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ShadowRun_initialize_1, false), $zuper, $iter);
      self.sortType = 3;
      self.upplerRollThreshold = 6;
      return (self.unlimitedRollDiceType = 6);
    }, TMP_ShadowRun_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_ShadowRun_gameName_2 = function $$gameName() {
      var self = this;

      return "シャドウラン"
    }, TMP_ShadowRun_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_ShadowRun_gameType_3 = function $$gameType() {
      var self = this;

      return "ShadowRun"
    }, TMP_ShadowRun_gameType_3.$$arity = 0);
    return (Opal.defn(self, '$getHelpMessage', TMP_ShadowRun_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "上方無限ロール(xUn)の境界値を6にセットします。\n"
    }, TMP_ShadowRun_getHelpMessage_4.$$arity = 0), nil) && 'getHelpMessage';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
