/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$<=', '$/']);
  return (function($base, $super, $parent_nesting) {
    function $InfiniteFantasia(){};
    var self = $InfiniteFantasia = $klass($base, $super, 'InfiniteFantasia', $InfiniteFantasia);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InfiniteFantasia_gameName_1, TMP_InfiniteFantasia_gameType_2, TMP_InfiniteFantasia_getHelpMessage_3, TMP_InfiniteFantasia_check_1D20_4;

    
    
    Opal.defn(self, '$gameName', TMP_InfiniteFantasia_gameName_1 = function $$gameName() {
      var self = this;

      return "無限のファンタジア"
    }, TMP_InfiniteFantasia_gameName_1.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_InfiniteFantasia_gameType_2 = function $$gameType() {
      var self = this;

      return "InfiniteFantasia"
    }, TMP_InfiniteFantasia_gameType_2.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_InfiniteFantasia_getHelpMessage_3 = function $$getHelpMessage() {
      var self = this;

      return "失敗、成功レベルの自動判定を行います。\n"
    }, TMP_InfiniteFantasia_getHelpMessage_3.$$arity = 0);
    return (Opal.defn(self, '$check_1D20', TMP_InfiniteFantasia_check_1D20_4 = function $$check_1D20(total_n, _dice_n, signOfInequality, diff, _dice_cnt, _dice_max, _n1, _n_max) {
      var self = this, critical = nil;

      
      if (signOfInequality['$==']("<=")) {
        } else {
        return ""
      };
      if ($truthy($rb_le(total_n, diff))) {
        } else {
        return " ＞ 失敗"
      };
      critical = "";
      if ($truthy($rb_le(total_n, 1))) {
        critical = "/クリティカル"};
      if ($truthy($rb_le(total_n, $rb_divide(diff, 32)))) {
        return "" + " ＞ 32レベル成功(32Lv+)" + (critical)
      } else if ($truthy($rb_le(total_n, $rb_divide(diff, 16)))) {
        return "" + " ＞ 16レベル成功(16LV+)" + (critical)
      } else if ($truthy($rb_le(total_n, $rb_divide(diff, 8)))) {
        return "" + " ＞ 8レベル成功" + (critical)
      } else if ($truthy($rb_le(total_n, $rb_divide(diff, 4)))) {
        return "" + " ＞ 4レベル成功" + (critical)
      } else if ($truthy($rb_le(total_n, $rb_divide(diff, 2)))) {
        return "" + " ＞ 2レベル成功" + (critical)};
      return "" + " ＞ 1レベル成功" + (critical);
    }, TMP_InfiniteFantasia_check_1D20_4.$$arity = 8), nil) && 'check_1D20';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
