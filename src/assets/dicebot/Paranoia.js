/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$setPrefixes', '$debug', '$===', '$getaRoll', '$empty?', '$roll', '$collect', '$split', '$to_i', '$+', '$[]']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Paranoia');

    var $nesting = [self].concat($parent_nesting), $Paranoia_isGetOriginalMessage$1, $Paranoia_rollDiceCommand$2, $Paranoia_getaRoll$3;

    
    Opal.const_set($nesting[0], 'ID', "Paranoia");
    Opal.const_set($nesting[0], 'NAME', "パラノイア");
    Opal.const_set($nesting[0], 'SORT_KEY', "はらのいあ");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "※「パラノイア」は完璧なゲームであるため特殊なダイスコマンドを必要としません。\n" + "※このダイスボットは部屋のシステム名表示用となります。\n");
    self.$setPrefixes(["geta"]);
    
    Opal.def(self, '$isGetOriginalMessage', $Paranoia_isGetOriginalMessage$1 = function $$isGetOriginalMessage() {
      var self = this;

      return true
    }, $Paranoia_isGetOriginalMessage$1.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $Paranoia_rollDiceCommand$2 = function $$rollDiceCommand(command) {
      var self = this, result = nil, $case = nil;

      
      self.$debug("rollDiceCommand command", command);
      result = "";
      $case = command;
      if (/geta/i['$===']($case)) {result = self.$getaRoll()};
      if ($truthy(result['$empty?']())) {
        return nil};
      return "" + (command) + " ＞ " + (result);
    }, $Paranoia_rollDiceCommand$2.$$arity = 1);
    return (Opal.def(self, '$getaRoll', $Paranoia_getaRoll$3 = function $$getaRoll() {
      var $a, $b, $$4, self = this, result = nil, _ = nil, diceText = nil, diceList = nil, getaString = nil, $case = nil;

      
      result = "";
      $b = self.$roll(1, 2), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      diceList = $send(diceText.$split(/,/), 'collect', [], ($$4 = function(i){var self = $$4.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$4.$$s = self, $$4.$$arity = 1, $$4));
      result = $rb_plus(result, "幸福ですか？ ＞ ");
      getaString = "";
      $case = diceList['$[]'](0);
      if ((1)['$===']($case)) {getaString = "幸福です"}
      else if ((2)['$===']($case)) {getaString = "幸福ではありません"};
      result = $rb_plus(result, getaString);
      return result;
    }, $Paranoia_getaRoll$3.$$arity = 0), nil) && 'getaRoll';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
