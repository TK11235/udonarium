/* Generated by Opal 1.0.3 */
Opal.modules["diceBot/DiceBot"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$freeze', '$attr_reader', '$map', '$to_proc', '$join', '$private', '$clearPrefixes', '$!', '$empty?', '$prefixs', '$prefixes', '$class', '$warn', '$id', '$setPrefixes', '$attr_accessor', '$name', '$sort_key', '$help_message', '$attr_writer', '$rand', '$roll', '$marshalSignOfInequality', '$unlimitedRollDiceType', '$getD66Value', '$parren_killer', '$debug', '$isGetOriginalMessage', '$getOriginalMessage', '$=~', '$prefixesPattern', '$last_match', '$removeDiceCommandMessage', '$rollDiceCommandCatched', '$nil?', '$!=', '$sub', '$rollDiceCommand', '$to_s', '$backtrace', '$size', '$===', '$check_1D100', '$check_1D20', '$check_2D6', '$check_nD10', '$check_nD6', '$check_nDx', '$is_a?', '$==', '$send', '$get_table_by_nD6', '$get_table_by_nDx', '$getTableValue', '$[]', '$-', '$/', '$getD66', '$bcdice', '$get_table_by_number', '$+', '$*', '$<', '$each', '$>=', '$kind_of?', '$lambda', '$call', '$select', '$public_methods', '$upcase', '$to_i', '$getTableInfoFromExtraTableText', '$get_table_by_nDx_extratable', '$get_table_by_d66', '$floor', '$%', '$get_table_by_d66_swap', '$raise', '$gsub', '$rollTableMessageDiceText', '$split', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBot');

    var $nesting = [self].concat($parent_nesting), $DiceBot_initialize$4, $DiceBot_postSet$5, $DiceBot_info$6, $DiceBot_id$7, $DiceBot_gameType$8, $DiceBot_name$9, $DiceBot_gameName$10, $DiceBot_sort_key$11, $DiceBot_help_message$12, $DiceBot_getHelpMessage$13, $DiceBot_prefixes$14, $DiceBot_setSendMode$15, $DiceBot_bcdice$eq$16, $DiceBot_bcdice$17, $DiceBot_rand$18, $DiceBot_roll$19, $DiceBot_marshalSignOfInequality$20, $DiceBot_unlimitedRollDiceType$21, $DiceBot_setSortType$22, $DiceBot_d66$23, $DiceBot_parren_killer$24, $DiceBot_changeText$25, $DiceBot_dice_command$26, $DiceBot_isGetOriginalMessage$27, $DiceBot_removeDiceCommandMessage$28, $DiceBot_rollDiceCommandCatched$29, $DiceBot_rollDiceCommand$30, $DiceBot_dice_command_xRn$31, $DiceBot_check_result$32, $DiceBot_check_nDx$33, $DiceBot_check_1D100$34, $DiceBot_check_1D20$35, $DiceBot_check_nD10$36, $DiceBot_check_2D6$37, $DiceBot_check_nD6$38, $DiceBot_get_table_by_2d6$39, $DiceBot_get_table_by_1d6$40, $DiceBot_get_table_by_nD6$41, $DiceBot_get_table_by_nDx$42, $DiceBot_get_table_by_1d3$43, $DiceBot_getD66$44, $DiceBot_get_table_by_d66_swap$45, $DiceBot_get_table_by_d66$46, $DiceBot_getDiceRolledAdditionalText$47, $DiceBot_getDiceRevision$48, $DiceBot_isD9$49, $DiceBot_getGrichText$50, $DiceBot_check2dCritical$51, $DiceBot_is2dCritical$52, $DiceBot_should_reroll$ques$53, $DiceBot_get_table_by_number$54, $DiceBot_getTableValue$56, $DiceBot_analyzeDiceCommandResultMethod$58, $DiceBot_get_table_by_nDx_extratable$61, $DiceBot_getTableCommandResult$62, $DiceBot_getTableInfoFromExtraTableText$63, $DiceBot_roll_tables$65;

    self.$$prototype.rerollLimitCount = self.$$prototype.d66Type = nil;
    
    Opal.const_set($nesting[0], 'EMPTY_PREFIXES_PATTERN', /(^|\s)(S)?()(\s|$)/i.$freeze());
    Opal.const_set($nesting[0], 'ID', "DiceBot");
    Opal.const_set($nesting[0], 'NAME', "DiceBot");
    Opal.const_set($nesting[0], 'SORT_KEY', "*たいすほつと");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "");
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $setPrefixes$1, $clearPrefixes$2, $inherited$3;

      
      self.$attr_reader("prefixes");
      self.$attr_reader("prefixesPattern");
      
      Opal.def(self, '$setPrefixes', $setPrefixes$1 = function $$setPrefixes(prefixes) {
        var self = this;

        
        self.prefixes = $send(prefixes, 'map', [], "freeze".$to_proc()).$freeze();
        self.prefixesPattern = new RegExp("" + "(^|\\s)(S)?(" + (prefixes.$join("|")) + ")(\\s|$)", 'i').$freeze();
        return self;
      }, $setPrefixes$1.$$arity = 1);
      
      Opal.def(self, '$clearPrefixes', $clearPrefixes$2 = function $$clearPrefixes() {
        var self = this;

        
        self.prefixes = [].$freeze();
        self.prefixesPattern = $$($nesting, 'EMPTY_PREFIXES_PATTERN');
        return self;
      }, $clearPrefixes$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$inherited', $inherited$3 = function $$inherited(subclass) {
        var self = this;

        return subclass.$clearPrefixes()
      }, $inherited$3.$$arity = 1), nil) && 'inherited';
    })(Opal.get_singleton_class(self), $nesting);
    self.$clearPrefixes();
    (Opal.class_variable_set($nesting[0], '@@bcdice', nil));
    Opal.const_set($nesting[0], 'DEFAULT_SEND_MODE', 2);
    
    Opal.def(self, '$initialize', $DiceBot_initialize$4 = function $$initialize() {
      var $a, self = this;

      
      self.sendMode = $$($nesting, 'DEFAULT_SEND_MODE');
      self.sortType = 0;
      self.sameDiceRerollCount = 0;
      self.sameDiceRerollType = 0;
      self.d66Type = 1;
      self.isPrintMaxDice = false;
      self.upplerRollThreshold = 0;
      self.unlimitedRollDiceType = 0;
      self.rerollNumber = 0;
      self.defaultSuccessTarget = "";
      self.rerollLimitCount = 10000;
      self.fractionType = "omit";
      if ($truthy(($truthy($a = self.$prefixs()['$empty?']()['$!']()) ? self.$class().$prefixes()['$empty?']() : $a))) {
        
        self.$warn("" + (self.$id()) + ": #prefixs is deprecated. Please use .setPrefixes.");
        return self.$class().$setPrefixes(self.$prefixs());
      } else {
        return nil
      };
    }, $DiceBot_initialize$4.$$arity = 0);
    self.$attr_accessor("rerollLimitCount");
    self.$attr_reader("sendMode", "sameDiceRerollCount", "sameDiceRerollType", "d66Type");
    self.$attr_reader("isPrintMaxDice", "upplerRollThreshold");
    self.$attr_reader("defaultSuccessTarget", "rerollNumber", "fractionType");
    
    Opal.def(self, '$postSet', $DiceBot_postSet$5 = function $$postSet() {
      var self = this;

      return nil
    }, $DiceBot_postSet$5.$$arity = 0);
    
    Opal.def(self, '$info', $DiceBot_info$6 = function $$info() {
      var self = this;

      return $hash2(["gameType", "name", "sortKey", "prefixs", "info"], {"gameType": self.$id(), "name": self.$name(), "sortKey": self.$sort_key(), "prefixs": self.$class().$prefixes(), "info": self.$help_message()})
    }, $DiceBot_info$6.$$arity = 0);
    
    Opal.def(self, '$id', $DiceBot_id$7 = function $$id() {
      var self = this;

      return $$$(self.$class(), 'ID')
    }, $DiceBot_id$7.$$arity = 0);
    
    Opal.def(self, '$gameType', $DiceBot_gameType$8 = function $$gameType() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameType is deprecated. Please use #id.");
      return self.$id();
    }, $DiceBot_gameType$8.$$arity = 0);
    
    Opal.def(self, '$name', $DiceBot_name$9 = function $$name() {
      var self = this;

      return $$$(self.$class(), 'NAME')
    }, $DiceBot_name$9.$$arity = 0);
    
    Opal.def(self, '$gameName', $DiceBot_gameName$10 = function $$gameName() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #gameName is deprecated. Please use #name.");
      return self.$name();
    }, $DiceBot_gameName$10.$$arity = 0);
    
    Opal.def(self, '$sort_key', $DiceBot_sort_key$11 = function $$sort_key() {
      var self = this;

      return $$$(self.$class(), 'SORT_KEY')
    }, $DiceBot_sort_key$11.$$arity = 0);
    
    Opal.def(self, '$help_message', $DiceBot_help_message$12 = function $$help_message() {
      var self = this;

      return $$$(self.$class(), 'HELP_MESSAGE')
    }, $DiceBot_help_message$12.$$arity = 0);
    
    Opal.def(self, '$getHelpMessage', $DiceBot_getHelpMessage$13 = function $$getHelpMessage() {
      var self = this;

      
      self.$warn("" + (self.$id()) + ": #getHelpMessage is deprecated. Please use #help_message.");
      return self.$help_message();
    }, $DiceBot_getHelpMessage$13.$$arity = 0);
    
    Opal.def(self, '$prefixes', $DiceBot_prefixes$14 = function $$prefixes() {
      var self = this;

      return self.$class().$prefixes()
    }, $DiceBot_prefixes$14.$$arity = 0);
    Opal.alias(self, "prefixs", "prefixes");
    
    Opal.def(self, '$setSendMode', $DiceBot_setSendMode$15 = function $$setSendMode(m) {
      var self = this;

      return (self.sendMode = m)
    }, $DiceBot_setSendMode$15.$$arity = 1);
    self.$attr_writer("upplerRollThreshold");
    
    Opal.def(self, '$bcdice=', $DiceBot_bcdice$eq$16 = function(b) {
      var self = this;

      return (Opal.class_variable_set($nesting[0], '@@bcdice', b))
    }, $DiceBot_bcdice$eq$16.$$arity = 1);
    
    Opal.def(self, '$bcdice', $DiceBot_bcdice$17 = function $$bcdice() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a)
    }, $DiceBot_bcdice$17.$$arity = 0);
    
    Opal.def(self, '$rand', $DiceBot_rand$18 = function $$rand(max) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rand(max)
    }, $DiceBot_rand$18.$$arity = 1);
    
    Opal.def(self, '$roll', $DiceBot_roll$19 = function $$roll($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'roll', Opal.to_a(args));
    }, $DiceBot_roll$19.$$arity = -1);
    
    Opal.def(self, '$marshalSignOfInequality', $DiceBot_marshalSignOfInequality$20 = function $$marshalSignOfInequality($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'marshalSignOfInequality', Opal.to_a(args));
    }, $DiceBot_marshalSignOfInequality$20.$$arity = -1);
    
    Opal.def(self, '$unlimitedRollDiceType', $DiceBot_unlimitedRollDiceType$21 = function $$unlimitedRollDiceType() {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$unlimitedRollDiceType()
    }, $DiceBot_unlimitedRollDiceType$21.$$arity = 0);
    self.$attr_reader("sortType");
    
    Opal.def(self, '$setSortType', $DiceBot_setSortType$22 = function $$setSortType(s) {
      var self = this;

      return (self.sortType = s)
    }, $DiceBot_setSortType$22.$$arity = 1);
    
    Opal.def(self, '$d66', $DiceBot_d66$23 = function $$d66($a) {
      var $post_args, args, $b, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send((($b = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $b), 'getD66Value', Opal.to_a(args));
    }, $DiceBot_d66$23.$$arity = -1);
    
    Opal.def(self, '$parren_killer', $DiceBot_parren_killer$24 = function $$parren_killer(string) {
      var $a, self = this;

      return (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$parren_killer(string)
    }, $DiceBot_parren_killer$24.$$arity = 1);
    
    Opal.def(self, '$changeText', $DiceBot_changeText$25 = function $$changeText(string) {
      var self = this;

      
      self.$debug("DiceBot.parren_killer_add called");
      return string;
    }, $DiceBot_changeText$25.$$arity = 1);
    
    Opal.def(self, '$dice_command', $DiceBot_dice_command$26 = function $$dice_command(string, nick_e) {
      var $a, $b, self = this, secret_flg = nil, secretMarker = nil, command = nil, output_msg = nil;

      
      if ($truthy(self.$isGetOriginalMessage())) {
        string = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$getOriginalMessage()};
      self.$debug("dice_command Begin string", string);
      secret_flg = false;
      if ($truthy(self.$class().$prefixesPattern()['$=~'](string))) {
      } else {
        
        self.$debug("not match in prefixes");
        return ["1", secret_flg];
      };
      secretMarker = $$($nesting, 'Regexp').$last_match(2);
      command = $$($nesting, 'Regexp').$last_match(3);
      command = self.$removeDiceCommandMessage(command);
      self.$debug("dicebot after command", command);
      self.$debug("match");
      $b = self.$rollDiceCommandCatched(command), $a = Opal.to_ary($b), (output_msg = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(($truthy($a = output_msg['$nil?']()) ? $a : output_msg['$empty?']()))) {
        output_msg = "1"};
      secret_flg = ($truthy($a = secret_flg) ? $a : false);
      if ($truthy(output_msg['$!=']("1"))) {
        output_msg = "" + (nick_e) + ": " + (output_msg)};
      if ($truthy(secretMarker)) {
        if ($truthy(output_msg['$!=']("1"))) {
          secret_flg = true}};
      return [output_msg, secret_flg];
    }, $DiceBot_dice_command$26.$$arity = 2);
    
    Opal.def(self, '$isGetOriginalMessage', $DiceBot_isGetOriginalMessage$27 = function $$isGetOriginalMessage() {
      var self = this;

      return false
    }, $DiceBot_isGetOriginalMessage$27.$$arity = 0);
    
    Opal.def(self, '$removeDiceCommandMessage', $DiceBot_removeDiceCommandMessage$28 = function $$removeDiceCommandMessage(command) {
      var self = this;

      return command.$sub(/[\s　].+/, "")
    }, $DiceBot_removeDiceCommandMessage$28.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommandCatched', $DiceBot_rollDiceCommandCatched$29 = function $$rollDiceCommandCatched(command) {
      var $a, $b, self = this, result = nil, secret_flg = nil, e = nil;

      
      result = nil;
      
      try {
        
        self.$debug("call rollDiceCommand command", command);
        $b = self.$rollDiceCommand(command), $a = Opal.to_ary($b), (result = ($a[0] == null ? nil : $a[0])), (secret_flg = ($a[1] == null ? nil : $a[1])), $b;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {e = $err;
          try {
            self.$debug("executeCommand exception", e.$to_s(), e.$backtrace().$join("\n"))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      self.$debug("rollDiceCommand result", result);
      return [result, secret_flg];
    }, $DiceBot_rollDiceCommandCatched$29.$$arity = 1);
    
    Opal.def(self, '$rollDiceCommand', $DiceBot_rollDiceCommand$30 = function $$rollDiceCommand(_command) {
      var self = this;

      return nil
    }, $DiceBot_rollDiceCommand$30.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $DiceBot_dice_command_xRn$31 = function $$dice_command_xRn(_string, _nick_e) {
      var self = this;

      return ""
    }, $DiceBot_dice_command_xRn$31.$$arity = 2);
    
    Opal.def(self, '$check_result', $DiceBot_check_result$32 = function $$check_result(total, dice_total, dice_list, sides, cmp_op, target) {
      var $a, self = this, ret = nil, $case = nil;

      
      ret = (function() {$case = [dice_list.$size(), sides];
      if ([1, 100]['$===']($case)) {return self.$check_1D100(total, dice_total, cmp_op, target)}
      else if ([1, 20]['$===']($case)) {return self.$check_1D20(total, dice_total, cmp_op, target)}
      else if ([2, 6]['$===']($case)) {return self.$check_2D6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      ret = (function() {$case = sides;
      if ((10)['$===']($case)) {return self.$check_nD10(total, dice_total, dice_list, cmp_op, target)}
      else if ((6)['$===']($case)) {return self.$check_nD6(total, dice_total, dice_list, cmp_op, target)}
      else { return nil }})();
      if ($truthy(($truthy($a = ret['$nil?']()) ? $a : ret['$empty?']()))) {
      } else {
        return ret
      };
      return self.$check_nDx(total, cmp_op, target);
    }, $DiceBot_check_result$32.$$arity = 6);
    
    Opal.def(self, '$check_nDx', $DiceBot_check_nDx$33 = function $$check_nDx(total, cmp_op, target) {
      var self = this, success = nil;

      
      if ($truthy(target['$is_a?']($$($nesting, 'String')))) {
        return " ＞ 失敗"};
      success = (function() {if (cmp_op['$==']("!=")) {
        return total['$!='](target)
      } else {
        return total.$send(cmp_op, target)
      }; return nil; })();
      if ($truthy(success)) {
        return " ＞ 成功"
      } else {
        return " ＞ 失敗"
      };
    }, $DiceBot_check_nDx$33.$$arity = 3);
    
    Opal.def(self, '$check_1D100', $DiceBot_check_1D100$34 = function $$check_1D100(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D100$34.$$arity = 4);
    
    Opal.def(self, '$check_1D20', $DiceBot_check_1D20$35 = function $$check_1D20(total, dice_total, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_1D20$35.$$arity = 4);
    
    Opal.def(self, '$check_nD10', $DiceBot_check_nD10$36 = function $$check_nD10(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD10$36.$$arity = 5);
    
    Opal.def(self, '$check_2D6', $DiceBot_check_2D6$37 = function $$check_2D6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_2D6$37.$$arity = 5);
    
    Opal.def(self, '$check_nD6', $DiceBot_check_nD6$38 = function $$check_nD6(total, dice_total, dice_list, cmp_op, target) {
      var self = this;

      return nil
    }, $DiceBot_check_nD6$38.$$arity = 5);
    
    Opal.def(self, '$get_table_by_2d6', $DiceBot_get_table_by_2d6$39 = function $$get_table_by_2d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 2)
    }, $DiceBot_get_table_by_2d6$39.$$arity = 1);
    
    Opal.def(self, '$get_table_by_1d6', $DiceBot_get_table_by_1d6$40 = function $$get_table_by_1d6(table) {
      var self = this;

      return self.$get_table_by_nD6(table, 1)
    }, $DiceBot_get_table_by_1d6$40.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nD6', $DiceBot_get_table_by_nD6$41 = function $$get_table_by_nD6(table, count) {
      var self = this;

      return self.$get_table_by_nDx(table, count, 6)
    }, $DiceBot_get_table_by_nD6$41.$$arity = 2);
    
    Opal.def(self, '$get_table_by_nDx', $DiceBot_get_table_by_nDx$42 = function $$get_table_by_nDx(table, count, diceType) {
      var $a, $b, self = this, num = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(num, count)));
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_nDx$42.$$arity = 3);
    
    Opal.def(self, '$get_table_by_1d3', $DiceBot_get_table_by_1d3$43 = function $$get_table_by_1d3(table) {
      var $a, $b, self = this, count = nil, num = nil, index = nil, text = nil;

      
      self.$debug("get_table_by_1d3");
      count = 1;
      $b = self.$roll(count, 6), $a = Opal.to_ary($b), (num = ($a[0] == null ? nil : $a[0])), $b;
      self.$debug("num", num);
      index = $rb_divide($rb_minus(num, 1), 2);
      self.$debug("index", index);
      text = table['$[]'](index);
      if ($truthy(text['$nil?']())) {
        return ["1", 0]};
      return [text, num];
    }, $DiceBot_get_table_by_1d3$43.$$arity = 1);
    
    Opal.def(self, '$getD66', $DiceBot_getD66$44 = function $$getD66(isSwap) {
      var self = this;

      return self.$bcdice().$getD66(isSwap)
    }, $DiceBot_getD66$44.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66_swap', $DiceBot_get_table_by_d66_swap$45 = function $$get_table_by_d66_swap(table) {
      var self = this, isSwap = nil, number = nil;

      
      isSwap = true;
      number = self.$bcdice().$getD66(isSwap);
      return [self.$get_table_by_number(number, table), number];
    }, $DiceBot_get_table_by_d66_swap$45.$$arity = 1);
    
    Opal.def(self, '$get_table_by_d66', $DiceBot_get_table_by_d66$46 = function $$get_table_by_d66(table) {
      var $a, $b, self = this, dice1 = nil, dice2 = nil, num = nil, text = nil, indexText = nil;

      
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice1 = ($a[0] == null ? nil : $a[0])), $b;
      $b = self.$roll(1, 6), $a = Opal.to_ary($b), (dice2 = ($a[0] == null ? nil : $a[0])), $b;
      num = $rb_plus($rb_times($rb_minus(dice1, 1), 6), $rb_minus(dice2, 1));
      text = table['$[]'](num);
      indexText = "" + (dice1) + (dice2);
      if ($truthy(text['$nil?']())) {
        return ["1", indexText]};
      return [text, indexText];
    }, $DiceBot_get_table_by_d66$46.$$arity = 1);
    
    Opal.def(self, '$getDiceRolledAdditionalText', $DiceBot_getDiceRolledAdditionalText$47 = function $$getDiceRolledAdditionalText(_n1, _n_max, _dice_max) {
      var self = this;

      return ""
    }, $DiceBot_getDiceRolledAdditionalText$47.$$arity = 3);
    
    Opal.def(self, '$getDiceRevision', $DiceBot_getDiceRevision$48 = function $$getDiceRevision(_n_max, _dice_max, _total_n) {
      var self = this;

      return ["", 0]
    }, $DiceBot_getDiceRevision$48.$$arity = 3);
    
    Opal.def(self, '$isD9', $DiceBot_isD9$49 = function $$isD9() {
      var self = this;

      return false
    }, $DiceBot_isD9$49.$$arity = 0);
    
    Opal.def(self, '$getGrichText', $DiceBot_getGrichText$50 = function $$getGrichText(_numberSpot1, _dice_cnt_total, _suc) {
      var self = this;

      return ""
    }, $DiceBot_getGrichText$50.$$arity = 3);
    
    Opal.def(self, '$check2dCritical', $DiceBot_check2dCritical$51 = function $$check2dCritical(critical, dice_new, dice_arry, loop_count) {
      var self = this;

      return nil
    }, $DiceBot_check2dCritical$51.$$arity = 4);
    
    Opal.def(self, '$is2dCritical', $DiceBot_is2dCritical$52 = function $$is2dCritical() {
      var self = this;

      return false
    }, $DiceBot_is2dCritical$52.$$arity = 0);
    
    Opal.def(self, '$should_reroll?', $DiceBot_should_reroll$ques$53 = function(loop_count) {
      var $a, self = this;

      return ($truthy($a = $rb_lt(loop_count, self.rerollLimitCount)) ? $a : self.rerollLimitCount['$=='](0))
    }, $DiceBot_should_reroll$ques$53.$$arity = 1);
    
    Opal.def(self, '$get_table_by_number', $DiceBot_get_table_by_number$54 = function $$get_table_by_number(index, table, default$) {try {

      var $$55, self = this;

      
      
      if (default$ == null) {
        default$ = "1";
      };
      $send(table, 'each', [], ($$55 = function(item){var self = $$55.$$s || this, number = nil;

      
        
        if (item == null) {
          item = nil;
        };
        number = item['$[]'](0);
        if ($truthy($rb_ge(number, index))) {
          Opal.ret(self.$getTableValue(item['$[]'](1)))
        } else {
          return nil
        };}, $$55.$$s = self, $$55.$$arity = 1, $$55));
      return self.$getTableValue(default$);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_get_table_by_number$54.$$arity = -3);
    
    Opal.def(self, '$getTableValue', $DiceBot_getTableValue$56 = function $$getTableValue(data) {try {

      var $$57, self = this, lambdaBlock = nil;

      
      if ($truthy(data['$kind_of?']($$($nesting, 'Proc')))) {
        
        lambdaBlock = $send(self, 'lambda', [], ($$57 = function(){var self = $$57.$$s || this;

        Opal.ret(data.$call())}, $$57.$$s = self, $$57.$$arity = 0, $$57));
        return lambdaBlock.$call();};
      return data;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_getTableValue$56.$$arity = 1);
    
    Opal.def(self, '$analyzeDiceCommandResultMethod', $DiceBot_analyzeDiceCommandResultMethod$58 = function $$analyzeDiceCommandResultMethod(command) {try {

      var $$59, $$60, self = this, methodList = nil;

      
      methodList = $send(self.$public_methods(), 'select', [], ($$59 = function(method){var self = $$59.$$s || this;

      
        
        if (method == null) {
          method = nil;
        };
        return /^get.+DiceCommandResult$/['$==='](method.$to_s());}, $$59.$$s = self, $$59.$$arity = 1, $$59));
      $send(methodList, 'each', [], ($$60 = function(method){var self = $$60.$$s || this, result = nil;

      
        
        if (method == null) {
          method = nil;
        };
        result = self.$send(method, command);
        if ($truthy(result['$nil?']())) {
          return nil
        } else {
          Opal.ret(result)
        };}, $$60.$$s = self, $$60.$$arity = 1, $$60));
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $DiceBot_analyzeDiceCommandResultMethod$58.$$arity = 1);
    
    Opal.def(self, '$get_table_by_nDx_extratable', $DiceBot_get_table_by_nDx_extratable$61 = function $$get_table_by_nDx_extratable(table, count, diceType) {
      var $a, $b, self = this, number = nil, diceText = nil, text = nil;

      
      $b = self.$roll(count, diceType), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      text = self.$getTableValue(table['$[]']($rb_minus(number, count)));
      return [text, number, diceText];
    }, $DiceBot_get_table_by_nDx_extratable$61.$$arity = 3);
    
    Opal.def(self, '$getTableCommandResult', $DiceBot_getTableCommandResult$62 = function $$getTableCommandResult(command, tables, isPrintDiceText) {
      var $a, $b, $c, $d, self = this, info = nil, name = nil, type = nil, table = nil, $case = nil, count = nil, diceType = nil, limit = nil, item = nil, value = nil, output = nil, diceText = nil, text = nil, number = nil;

      
      
      if (isPrintDiceText == null) {
        isPrintDiceText = true;
      };
      info = tables['$[]'](command.$upcase());
      if ($truthy(info['$nil?']())) {
        return nil};
      name = info['$[]']("name");
      type = info['$[]']("type").$upcase();
      table = info['$[]']("table");
      if ($truthy(($truthy($a = type['$==']("D66")) ? self.d66Type['$=='](2) : $a))) {
        type = "D66S"};
      $b = (function() {$case = type;
      if (/(\d+)D(\d+)/['$===']($case)) {
      count = $$($nesting, 'Regexp').$last_match(1).$to_i();
      diceType = $$($nesting, 'Regexp').$last_match(2).$to_i();
      limit = $rb_minus($rb_times(diceType, count), $rb_minus(count, 1));
      table = self.$getTableInfoFromExtraTableText(table, limit);
      return self.$get_table_by_nDx_extratable(table, count, diceType);}
      else if ("D66"['$===']($case) || "D66N"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 36);
      $d = self.$get_table_by_d66(table), $c = Opal.to_ary($d), (item = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      output = item['$[]'](1);
      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else if ("D66S"['$===']($case)) {
      table = self.$getTableInfoFromExtraTableText(table, 21);
      $d = self.$get_table_by_d66_swap(table), $c = Opal.to_ary($d), (output = ($c[0] == null ? nil : $c[0])), (value = ($c[1] == null ? nil : $c[1])), $d;
      value = value.$to_i();
      diceText = $rb_plus($rb_plus($rb_divide(value, 10).$floor().$to_s(), ","), value['$%'](10).$to_s());
      return [output, value, diceText];}
      else {return self.$raise("" + "invalid dice Type " + (command))}})(), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), (diceText = ($a[2] == null ? nil : $a[2])), $b;
      text = text.$gsub("\\n", "\n");
      text = (($a = $nesting[0].$$cvars['@@bcdice']) == null ? nil : $a).$rollTableMessageDiceText(text);
      if ($truthy(text['$nil?']())) {
        return nil};
      if ($truthy(($truthy($a = isPrintDiceText) ? diceText['$nil?']()['$!']() : $a))) {
        return "" + (name) + "(" + (number) + "[" + (diceText) + "]) ＞ " + (text)};
      return "" + (name) + "(" + (number) + ") ＞ " + (text);
    }, $DiceBot_getTableCommandResult$62.$$arity = -3);
    
    Opal.def(self, '$getTableInfoFromExtraTableText', $DiceBot_getTableInfoFromExtraTableText$63 = function $$getTableInfoFromExtraTableText(text, count) {
      var $$64, self = this, newTable = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(text['$is_a?']($$($nesting, 'String')))) {
        text = text.$split(/\n/)};
      newTable = $send(text, 'map', [], ($$64 = function(item){var self = $$64.$$s || this, $a;

      
        
        if (item == null) {
          item = nil;
        };
        if ($truthy(($truthy($a = item['$is_a?']($$($nesting, 'String'))) ? /^(\d+):(.*)/['$==='](item) : $a))) {
          return [$$($nesting, 'Regexp').$last_match(1).$to_i(), $$($nesting, 'Regexp').$last_match(2)]
        } else {
          return item
        };}, $$64.$$s = self, $$64.$$arity = 1, $$64));
      if ($truthy(count['$nil?']())) {
      } else if ($truthy(newTable.$size()['$!='](count))) {
        self.$raise("" + "invalid table size:" + (newTable.$size()) + "\n" + (newTable.$inspect()))};
      return newTable;
    }, $DiceBot_getTableInfoFromExtraTableText$63.$$arity = -2);
    return (Opal.def(self, '$roll_tables', $DiceBot_roll_tables$65 = function $$roll_tables(command, tables) {
      var self = this, table = nil;

      
      table = tables['$[]'](command.$upcase());
      if ($truthy(table)) {
      } else {
        return nil
      };
      return table.$roll(self.$bcdice()).$to_s();
    }, $DiceBot_roll_tables$65.$$arity = 2), nil) && 'roll_tables';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
Opal.modules["utils/ArithmeticEvaluator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$tokenize', '$expr', '$private', '$split', '$gsub', '$mul', '$loop', '$consume', '$+', '$-', '$unary', '$*', '$div', '$zero?', '$===', '$ceil', '$/', '$to_f', '$round', '$floor', '$-@', '$term', '$expect', '$expect_number', '$!=', '$[]', '$integer?', '$to_i', '$!', '$nil?', '$match']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArithmeticEvaluator');

    var $nesting = [self].concat($parent_nesting), $ArithmeticEvaluator_eval$1, $ArithmeticEvaluator_tokenize$2, $ArithmeticEvaluator_add$4, $ArithmeticEvaluator_mul$6, $ArithmeticEvaluator_div$8, $ArithmeticEvaluator_unary$9, $ArithmeticEvaluator_term$10, $ArithmeticEvaluator_consume$11, $ArithmeticEvaluator_expect$12, $ArithmeticEvaluator_expect_number$13, $ArithmeticEvaluator_integer$ques$14;

    self.$$prototype.error = self.$$prototype.round_type = self.$$prototype.tokens = self.$$prototype.idx = nil;
    
    
    Opal.def(self, '$eval', $ArithmeticEvaluator_eval$1 = function(expr, round_type) {
      var self = this, ret = nil;

      
      
      if (round_type == null) {
        round_type = "omit";
      };
      self.tokens = self.$tokenize(expr);
      self.idx = 0;
      self.error = false;
      self.round_type = round_type;
      ret = self.$expr();
      if ($truthy(self.error)) {
        return 0
      } else {
        return ret
      };
    }, $ArithmeticEvaluator_eval$1.$$arity = -2);
    self.$private();
    
    Opal.def(self, '$tokenize', $ArithmeticEvaluator_tokenize$2 = function $$tokenize(expr) {
      var $$3, self = this;

      return $send(expr, 'gsub', [/[\(\)\+\-\*\/]/], ($$3 = function(e){var self = $$3.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return "" + " " + (e) + " ";}, $$3.$$s = self, $$3.$$arity = 1, $$3)).$split(" ")
    }, $ArithmeticEvaluator_tokenize$2.$$arity = 1);
    
    Opal.def(self, '$add', $ArithmeticEvaluator_add$4 = function $$add() {
      var $$5, self = this, ret = nil;

      
      ret = self.$mul();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$5 = function(){var self = $$5.$$s || this;

      if ($truthy(self.$consume("+"))) {
          return (ret = $rb_plus(ret, self.$mul()))
        } else if ($truthy(self.$consume("-"))) {
          return (ret = $rb_minus(ret, self.$mul()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$5.$$s = self, $$5.$$brk = $brk, $$5.$$arity = 0, $$5))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_add$4.$$arity = 0);
    Opal.alias(self, "expr", "add");
    
    Opal.def(self, '$mul', $ArithmeticEvaluator_mul$6 = function $$mul() {
      var $$7, self = this, ret = nil;

      
      ret = self.$unary();
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$7 = function(){var self = $$7.$$s || this;

      if ($truthy(self.$consume("*"))) {
          return (ret = $rb_times(ret, self.$unary()))
        } else if ($truthy(self.$consume("/"))) {
          return (ret = self.$div(ret, self.$unary()))
        } else {
          
          Opal.brk(nil, $brk)
        }}, $$7.$$s = self, $$7.$$brk = $brk, $$7.$$arity = 0, $$7))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return ret;
    }, $ArithmeticEvaluator_mul$6.$$arity = 0);
    
    Opal.def(self, '$div', $ArithmeticEvaluator_div$8 = function $$div(left, right) {
      var self = this, $case = nil;

      
      if ($truthy(right['$zero?']())) {
        
        self.error = true;
        return 0;};
      return (function() {$case = self.round_type;
      if ("roundUp"['$===']($case)) {return $rb_divide(left.$to_f(), right).$ceil()}
      else if ("roundOff"['$===']($case)) {return $rb_divide(left.$to_f(), right).$round()}
      else {return $rb_divide(left, right).$floor()}})();
    }, $ArithmeticEvaluator_div$8.$$arity = 2);
    
    Opal.def(self, '$unary', $ArithmeticEvaluator_unary$9 = function $$unary() {
      var self = this;

      if ($truthy(self.$consume("+"))) {
        return self.$unary()
      } else if ($truthy(self.$consume("-"))) {
        return self.$unary()['$-@']()
      } else {
        return self.$term()
      }
    }, $ArithmeticEvaluator_unary$9.$$arity = 0);
    
    Opal.def(self, '$term', $ArithmeticEvaluator_term$10 = function $$term() {
      var self = this, ret = nil;

      if ($truthy(self.$consume("("))) {
        
        ret = self.$expr();
        self.$expect(")");
        return ret;
      } else {
        return self.$expect_number()
      }
    }, $ArithmeticEvaluator_term$10.$$arity = 0);
    
    Opal.def(self, '$consume', $ArithmeticEvaluator_consume$11 = function $$consume(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        return false};
      self.idx = $rb_plus(self.idx, 1);
      return true;
    }, $ArithmeticEvaluator_consume$11.$$arity = 1);
    
    Opal.def(self, '$expect', $ArithmeticEvaluator_expect$12 = function $$expect(str) {
      var self = this;

      
      if ($truthy(self.tokens['$[]'](self.idx)['$!='](str))) {
        self.error = true};
      return (self.idx = $rb_plus(self.idx, 1));
    }, $ArithmeticEvaluator_expect$12.$$arity = 1);
    
    Opal.def(self, '$expect_number', $ArithmeticEvaluator_expect_number$13 = function $$expect_number() {
      var self = this, ret = nil;

      
      if ($truthy(self['$integer?'](self.tokens['$[]'](self.idx)))) {
      } else {
        
        self.error = true;
        self.idx = $rb_plus(self.idx, 1);
        return 0;
      };
      ret = self.tokens['$[]'](self.idx).$to_i();
      self.idx = $rb_plus(self.idx, 1);
      return ret;
    }, $ArithmeticEvaluator_expect_number$13.$$arity = 0);
    return (Opal.def(self, '$integer?', $ArithmeticEvaluator_integer$ques$14 = function(str) {
      var self = this;

      return /^\d+$/.$match(str)['$nil?']()['$!']()
    }, $ArithmeticEvaluator_integer$ques$14.$$arity = 1), nil) && 'integer?';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$setPrefixes', '$include', '$new', '$[]', '$roll', '$>=', '$count', '$floor', '$/', '$+', '$length', '$sort', '$calculate_roll_result', '$-', '$!', '$send', '$class', '$expression', '$test_value_expression', '$result_str', '$join', '$private', '$format_modifier', '$last', '$sum_of_highest_set_of_multiples', '$sum_of_largest_straight', '$max', '$map', '$group_by', '$reduce', '$to_proc', '$<', '$each', '$uniq', '$>', '$ceil', '$parse', '$execute', '$freeze', '$match', '$to_i', '$eval', '$==']);
  
  self.$require("diceBot/DiceBot");
  self.$require("utils/modifier_formatter");
  self.$require("utils/ArithmeticEvaluator");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'CthulhuTech');

    var $nesting = [self].concat($parent_nesting), $CthulhuTech_initialize$14, $CthulhuTech_rollDiceCommand$15, $CthulhuTech_parse$16;

    
    self.$setPrefixes(["\\d+D10.*"]);
    Opal.const_set($nesting[0], 'ID', "CthulhuTech");
    Opal.const_set($nesting[0], 'NAME', "クトゥルフテック");
    Opal.const_set($nesting[0], 'SORT_KEY', "くとうるふてつく");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・行為判定（test）：nD10+m>=d\n" + "　n個のダイスを使用して、修正値m、難易度dで行為判定（test）を行います。\n" + "　修正値mは省略可能、複数指定可能（例：+2-4）です。\n" + "　成功、失敗、クリティカル、ファンブルを自動判定します。\n" + "　例）2D10>=12　4D10+2>=28　5D10+2-4>=32\n" + "\n" + "・対抗判定（contest）：nD10+m>d\n" + "　行為判定と同様ですが、防御側有利のため「>=」ではなく「>」を入力します。\n" + "　ダメージダイスも表示します。\n");
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Test');

      var $nesting = [self].concat($parent_nesting), $Test_initialize$1, $Test_execute$2, $Test_expression$4, $Test_test_value_expression$5, $Test_result_str$6, $Test_calculate_roll_result$7, $Test_sum_of_highest_set_of_multiples$8, $Test_sum_of_largest_straight$11;

      self.$$prototype.num = self.$$prototype.modifier = self.$$prototype.difficulty = nil;
      
      self.$include($$($nesting, 'ModifierFormatter'));
      Opal.const_set($nesting[0], 'COMPARE_OP', ">=");
      
      Opal.def(self, '$initialize', $Test_initialize$1 = function $$initialize(num, modifier, difficulty) {
        var self = this;

        
        self.num = num;
        self.modifier = modifier;
        return (self.difficulty = difficulty);
      }, $Test_initialize$1.$$arity = 3);
      
      Opal.def(self, '$execute', $Test_execute$2 = function $$execute(bot) {
        var $$3, $a, self = this, dice_values = nil, fumble = nil, sorted_dice_values = nil, roll_result = nil, test_value = nil, diff = nil, success = nil, critical = nil, output_parts = nil;

        
        dice_values = $send($$($nesting, 'Array'), 'new', [self.num], ($$3 = function(){var self = $$3.$$s || this;

        return bot.$roll(1, 10)['$[]'](0)}, $$3.$$s = self, $$3.$$arity = 0, $$3));
        fumble = $rb_ge(dice_values.$count(1), $rb_divide($rb_plus(dice_values.$length(), 1), 2).$floor());
        sorted_dice_values = dice_values.$sort();
        roll_result = self.$calculate_roll_result(sorted_dice_values);
        test_value = $rb_plus(roll_result, self.modifier);
        diff = $rb_minus(test_value, self.difficulty);
        success = ($truthy($a = fumble['$!']()) ? diff.$send($$$(self.$class(), 'COMPARE_OP'), 0) : $a);
        critical = $rb_ge(diff, 10);
        output_parts = ["" + "(" + (self.$expression()) + ")", self.$test_value_expression(sorted_dice_values, roll_result), test_value, self.$result_str(success, fumble, critical, diff)];
        return output_parts.$join(" ＞ ");
      }, $Test_execute$2.$$arity = 1);
      self.$private();
      
      Opal.def(self, '$expression', $Test_expression$4 = function $$expression() {
        var self = this, modifier_str = nil;

        
        modifier_str = self.$format_modifier(self.modifier);
        return "" + (self.num) + "D10" + (modifier_str) + ($$$(self.$class(), 'COMPARE_OP')) + (self.difficulty);
      }, $Test_expression$4.$$arity = 0);
      
      Opal.def(self, '$test_value_expression', $Test_test_value_expression$5 = function $$test_value_expression(dice_values, roll_result) {
        var self = this, dice_str = nil, modifier_str = nil;

        
        dice_str = dice_values.$join(",");
        modifier_str = self.$format_modifier(self.modifier);
        return "" + (roll_result) + "[" + (dice_str) + "]" + (modifier_str);
      }, $Test_test_value_expression$5.$$arity = 2);
      
      Opal.def(self, '$result_str', $Test_result_str$6 = function $$result_str(success, fumble, critical, _diff) {
        var self = this;

        
        if ($truthy(fumble)) {
          return "ファンブル"};
        if ($truthy(critical)) {
          return "クリティカル"};
        return (function() {if ($truthy(success)) {
          return "成功"
        } else {
          return "失敗"
        }; return nil; })();
      }, $Test_result_str$6.$$arity = 4);
      
      Opal.def(self, '$calculate_roll_result', $Test_calculate_roll_result$7 = function $$calculate_roll_result(sorted_dice_values) {
        var self = this, highest_single_roll = nil, candidates = nil;

        
        highest_single_roll = sorted_dice_values.$last();
        candidates = [highest_single_roll, self.$sum_of_highest_set_of_multiples(sorted_dice_values), self.$sum_of_largest_straight(sorted_dice_values)];
        return candidates.$max();
      }, $Test_calculate_roll_result$7.$$arity = 1);
      
      Opal.def(self, '$sum_of_highest_set_of_multiples', $Test_sum_of_highest_set_of_multiples$8 = function $$sum_of_highest_set_of_multiples(dice_values) {
        var $$9, $$10, self = this;

        return $send($send(dice_values, 'group_by', [], ($$9 = function(i){var self = $$9.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i;}, $$9.$$s = self, $$9.$$arity = 1, $$9)), 'map', [], ($$10 = function(_, value_group){var self = $$10.$$s || this;

        
          
          if (_ == null) {
            _ = nil;
          };
          
          if (value_group == null) {
            value_group = nil;
          };
          return $send(value_group, 'reduce', [0], "+".$to_proc());}, $$10.$$s = self, $$10.$$arity = 2, $$10)).$max()
      }, $Test_sum_of_highest_set_of_multiples$8.$$arity = 1);
      return (Opal.def(self, '$sum_of_largest_straight', $Test_sum_of_largest_straight$11 = function $$sum_of_largest_straight(sorted_dice_values) {
        var $$12, self = this, max_sum = nil, n_consecutive_values = nil, sum = nil, last = nil;

        
        if ($truthy($rb_lt(sorted_dice_values.$length(), 3))) {
          return 0};
        max_sum = 0;
        n_consecutive_values = 0;
        sum = 0;
        last = -1;
        $send(sorted_dice_values.$uniq(), 'each', [], ($$12 = function(value){var self = $$12.$$s || this, $a;

        
          
          if (value == null) {
            value = nil;
          };
          if ($truthy($rb_gt($rb_minus(value, last), 1))) {
            
            n_consecutive_values = 1;
            sum = value;
            last = value;
            return nil;;};
          n_consecutive_values = $rb_plus(n_consecutive_values, 1);
          sum = $rb_plus(sum, value);
          last = value;
          if ($truthy(($truthy($a = $rb_ge(n_consecutive_values, 3)) ? $rb_gt(sum, max_sum) : $a))) {
            return (max_sum = sum)
          } else {
            return nil
          };}, $$12.$$s = self, $$12.$$arity = 1, $$12));
        return max_sum;
      }, $Test_sum_of_largest_straight$11.$$arity = 1), nil) && 'sum_of_largest_straight';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Contest');

      var $nesting = [self].concat($parent_nesting), $Contest_result_str$13;

      
      Opal.const_set($nesting[0], 'COMPARE_OP', ">");
      return (Opal.def(self, '$result_str', $Contest_result_str$13 = function $$result_str(success, _fumble, _critical, diff) {
        var $iter = $Contest_result_str$13.$$p, $yield = $iter || nil, self = this, formatted = nil, damage_roll_num = nil, damage_roll = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $Contest_result_str$13.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        formatted = $send(self, Opal.find_super_dispatcher(self, 'result_str', $Contest_result_str$13, false), $zuper, $iter);
        if ($truthy(success)) {
          
          damage_roll_num = $rb_divide(diff, 5.0).$ceil();
          damage_roll = "" + (damage_roll_num) + "D10";
          return "" + (formatted) + "（ダメージ：" + (damage_roll) + "）";
        } else {
          return formatted
        };
      }, $Contest_result_str$13.$$arity = 4), nil) && 'result_str';
    })($nesting[0], $$($nesting, 'Test'), $nesting);
    
    Opal.def(self, '$initialize', $CthulhuTech_initialize$14 = function $$initialize() {
      var $iter = $CthulhuTech_initialize$14.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $CthulhuTech_initialize$14.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $CthulhuTech_initialize$14, false), $zuper, $iter);
      return (self.sortType = 1);
    }, $CthulhuTech_initialize$14.$$arity = 0);
    
    Opal.def(self, '$rollDiceCommand', $CthulhuTech_rollDiceCommand$15 = function $$rollDiceCommand(command) {
      var self = this, node = nil;

      
      node = self.$parse(command);
      if ($truthy(node)) {
      } else {
        return nil
      };
      return node.$execute(self);
    }, $CthulhuTech_rollDiceCommand$15.$$arity = 1);
    self.$private();
    Opal.const_set($nesting[0], 'TEST_RE', /^(\d+)D10((?:[-+]\d+)+)?(>=?)(\d+)$/.$freeze());
    return (Opal.def(self, '$parse', $CthulhuTech_parse$16 = function $$parse(command) {
      var self = this, m = nil, num = nil, modifier = nil, node_class = nil, difficulty = nil;

      
      m = $$($nesting, 'TEST_RE').$match(command);
      if ($truthy(m)) {
      } else {
        return nil
      };
      num = m['$[]'](1).$to_i();
      modifier = (function() {if ($truthy(m['$[]'](2))) {
        return $$($nesting, 'ArithmeticEvaluator').$new().$eval(m['$[]'](2))
      } else {
        return 0
      }; return nil; })();
      node_class = (function() {if (m['$[]'](3)['$=='](">")) {
        return $$($nesting, 'Contest')
      } else {
        return $$($nesting, 'Test')
      }; return nil; })();
      difficulty = m['$[]'](4).$to_i();
      return node_class.$new(num, modifier, difficulty);
    }, $CthulhuTech_parse$16.$$arity = 1), nil) && 'parse';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
