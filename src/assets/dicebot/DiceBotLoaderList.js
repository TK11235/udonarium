/* Generated by Opal 1.0.3 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$===', '$!', '$include?', '$debug', '$new', '$const_get', '$to_s', '$downcase', '$map', '$to_proc', '$[]', '$raise', '$first']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBotLoader');

    var $nesting = [self].concat($parent_nesting), $DiceBotLoader_validGameType$ques$1, $DiceBotLoader_loadUnknownGame$2, $DiceBotLoader_collectDiceBots$3, $DiceBotLoader_initialize$4, $DiceBotLoader_match$ques$5, $DiceBotLoader_loadDiceBot$6;

    self.$$prototype.filenames = self.$$prototype.gameTitlePattern = self.$$prototype.diceBotClass = nil;
    
    Opal.const_set($nesting[0], 'BOT_NAME_PATTERN', /^[A-Z]\w*$/.$freeze());
    Opal.const_set($nesting[0], 'BOT_NAMES_TO_IGNORE', ["DiceBot", "DiceBotLoader", "DiceBotLoaderList"].$freeze());
    Opal.defs(self, '$validGameType?', $DiceBotLoader_validGameType$ques$1 = function(gameType) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'BOT_NAME_PATTERN')['$==='](gameType)) ? $$($nesting, 'BOT_NAMES_TO_IGNORE')['$include?'](gameType)['$!']() : $a)
    }, $DiceBotLoader_validGameType$ques$1.$$arity = 1);
    Opal.defs(self, '$loadUnknownGame', $DiceBotLoader_loadUnknownGame$2 = function $$loadUnknownGame(gameType) {
      var self = this, e = nil;

      
      self.$debug("DiceBotLoader.loadUnknownGame gameType", gameType);
      
      try {
        return $$($nesting, 'Object').$const_get(gameType).$new()
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'LoadError'), $$($nesting, 'StandardError')])) {e = $err;
          try {
            
            self.$debug("DiceBotLoader.loadUnknownGame: ダイスボットの読み込みに失敗しました", e.$to_s());
            return nil;
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
    }, $DiceBotLoader_loadUnknownGame$2.$$arity = 1);
    Opal.defs(self, '$collectDiceBots', $DiceBotLoader_collectDiceBots$3 = function $$collectDiceBots() {
      var self = this;

      return nil
    }, $DiceBotLoader_collectDiceBots$3.$$arity = 0);
    
    Opal.def(self, '$initialize', $DiceBotLoader_initialize$4 = function $$initialize(gameTitlePattern, options) {
      var $a, self = this, $case = nil, defaultFilenames = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      $case = gameTitlePattern;
      if ($$($nesting, 'String')['$===']($case)) {self.gameTitlePattern = [gameTitlePattern.$downcase()]}
      else if ($$($nesting, 'Array')['$===']($case)) {self.gameTitlePattern = $send(gameTitlePattern, 'map', [], "downcase".$to_proc())}
      else if ($$($nesting, 'Regexp')['$===']($case)) {
      if ($truthy(options['$[]']("filenames"))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "options[:filenames] is required when gameTitlePattern is a Regexp")
      };
      self.gameTitlePattern = gameTitlePattern;}
      else {self.$raise($$($nesting, 'TypeError'), "gameTitlePattern must be a String or an Array<String> or a Regexp")};
      defaultFilenames = (function() {$case = gameTitlePattern;
      if ($$($nesting, 'String')['$===']($case)) {return [gameTitlePattern]}
      else if ($$($nesting, 'Array')['$===']($case)) {return [gameTitlePattern.$first()]}
      else if ($$($nesting, 'Regexp')['$===']($case)) {return []}
      else { return nil }})();
      self.filenames = ($truthy($a = options['$[]']("filenames")) ? $a : defaultFilenames);
      return (self.diceBotClass = ($truthy($a = options['$[]']("class")) ? $a : self.filenames.$first()));
    }, $DiceBotLoader_initialize$4.$$arity = -2);
    
    Opal.def(self, '$match?', $DiceBotLoader_match$ques$5 = function(gameTitle) {
      var self = this, $case = nil;

      return (function() {$case = self.gameTitlePattern;
      if ($$($nesting, 'Array')['$===']($case)) {return self.gameTitlePattern['$include?'](gameTitle.$downcase())}
      else if ($$($nesting, 'Regexp')['$===']($case)) {return self.gameTitlePattern['$==='](gameTitle)}
      else { return nil }})()
    }, $DiceBotLoader_match$ques$5.$$arity = 1);
    return (Opal.def(self, '$loadDiceBot', $DiceBotLoader_loadDiceBot$6 = function $$loadDiceBot() {
      var self = this;

      return $$($nesting, 'Object').$const_get(self.diceBotClass).$new()
    }, $DiceBotLoader_loadDiceBot$6.$$arity = 0), nil) && 'loadDiceBot';
  })($nesting[0], null, $nesting)
})(Opal);
Opal.loaded(["diceBot/DiceBotLoader.js"]);
/* Generated by Opal 1.0.3 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$strip', '$empty?', '$find', '$match?', '$new']);
  
  self.$require("diceBot/DiceBotLoader");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'DiceBotLoaderList');

    var $nesting = [self].concat($parent_nesting), $DiceBotLoaderList_find$1;

    
    Opal.defs(self, '$find', $DiceBotLoaderList_find$1 = function $$find(gameTitle) {
      var $$2, self = this, strippedTitle = nil;
      if (self.loaders == null) self.loaders = nil;

      
      strippedTitle = gameTitle.$strip();
      if ($truthy(strippedTitle['$empty?']())) {
        return nil};
      return $send(self.loaders, 'find', [], ($$2 = function(loader){var self = $$2.$$s || this;

      
        
        if (loader == null) {
          loader = nil;
        };
        return loader['$match?'](strippedTitle);}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $DiceBotLoaderList_find$1.$$arity = 1);
    return (self.loaders = [$$($nesting, 'DiceBotLoader').$new(["Cthulhu", "COC"]), $$($nesting, 'DiceBotLoader').$new(["Hieizan", "COCH"]), $$($nesting, 'DiceBotLoader').$new(["Elric!", "EL"], $hash2(["filenames"], {"filenames": ["Elric"]})), $$($nesting, 'DiceBotLoader').$new(["RuneQuest", "RQ"]), $$($nesting, 'DiceBotLoader').$new(["Chill", "CH"]), $$($nesting, 'DiceBotLoader').$new(["RoleMaster", "RM"]), $$($nesting, 'DiceBotLoader').$new(["ShadowRun", "SR"]), $$($nesting, 'DiceBotLoader').$new(["ShadowRun4", "SR4"]), $$($nesting, 'DiceBotLoader').$new(["Pendragon", "PD"]), $$($nesting, 'DiceBotLoader').$new(/^(?:SwordWorld|SW)\s*2\.0$/i, $hash2(["filenames", "class"], {"filenames": ["SwordWorld", "SwordWorld2_0"], "class": "SwordWorld2_0"})), $$($nesting, 'DiceBotLoader').$new(/^(?:SwordWorld|SW)\s*2\.5$/i, $hash2(["filenames", "class"], {"filenames": ["SwordWorld", "SwordWorld2_5"], "class": "SwordWorld2_5"})), $$($nesting, 'DiceBotLoader').$new(["SwordWorld", "SW"]), $$($nesting, 'DiceBotLoader').$new(["Arianrhod", "AR"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Infinite\s*Fantasia|IF)$/i, $hash2(["filenames"], {"filenames": ["InfiniteFantasia"]})), $$($nesting, 'DiceBotLoader').$new("WARPS"), $$($nesting, 'DiceBotLoader').$new(/^(?:Demon\s*Parasite|DP)$/i, $hash2(["filenames"], {"filenames": ["DemonParasite"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Parasite\s*Blood|PB)$/i, $hash2(["filenames", "class"], {"filenames": ["DemonParasite", "ParasiteBlood"], "class": "ParasiteBlood"})), $$($nesting, 'DiceBotLoader').$new(/^(?:Gun\s*Dog|GD)$/i, $hash2(["filenames"], {"filenames": ["Gundog"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Gun\s*Dog\s*Zero|GDZ)$/i, $hash2(["filenames", "class"], {"filenames": ["Gundog", "GundogZero"], "class": "GundogZero"})), $$($nesting, 'DiceBotLoader').$new(/^(?:Tunnels\s*&\s*Trolls|TuT)$/i, $hash2(["filenames"], {"filenames": ["TunnelsAndTrolls"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Nightmare\s*Hunter[=\s]*Deep|NHD)$/i, $hash2(["filenames"], {"filenames": ["NightmareHunterDeep"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:War\s*Hammer(FRP)?|WH)$/i, $hash2(["filenames"], {"filenames": ["Warhammer"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Phantasm\s*Adventure|PA)$/i, $hash2(["filenames"], {"filenames": ["PhantasmAdventure"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Chaos\s*Flare|CF)$/i, $hash2(["filenames"], {"filenames": ["ChaosFlare"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Cthulhu\s*Tech|CT)$/i, $hash2(["filenames"], {"filenames": ["CthulhuTech"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Tokumei\s*Tenkousei|ToT)$/i, $hash2(["filenames"], {"filenames": ["TokumeiTenkousei"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Shinobi\s*Gami|SG)$/i, $hash2(["filenames"], {"filenames": ["ShinobiGami"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Double\s*Cross|DX)$/i, $hash2(["filenames"], {"filenames": ["DoubleCross"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Sata\s*Supe|SS)$/i, $hash2(["filenames"], {"filenames": ["Satasupe"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Ars\s*Magica|AM)$/i, $hash2(["filenames"], {"filenames": ["ArsMagica"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Dark\s*Blaze|DB)$/i, $hash2(["filenames"], {"filenames": ["DarkBlaze"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Night\s*Wizard|NW)$/i, $hash2(["filenames"], {"filenames": ["NightWizard"]})), $$($nesting, 'DiceBotLoader').$new("TORG", $hash2(["filenames"], {"filenames": ["Torg"]})), $$($nesting, 'DiceBotLoader').$new(/^TORG1.5$/i, $hash2(["filenames", "class"], {"filenames": ["Torg", "Torg1_5"], "class": "Torg1_5"})), $$($nesting, 'DiceBotLoader').$new(/^(?:hunters\s*moon|HM)$/i, $hash2(["filenames"], {"filenames": ["HuntersMoon"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Blood\s*Crusade|BC)$/i, $hash2(["filenames"], {"filenames": ["BloodCrusade"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Meikyu\s*Kingdom|MK)$/i, $hash2(["filenames"], {"filenames": ["MeikyuKingdom"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Earth\s*Dawn|ED)$/i, $hash2(["filenames"], {"filenames": ["EarthDawn"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:(?:Earth\s*Dawn|ED)3)$/i, $hash2(["filenames", "class"], {"filenames": ["EarthDawn", "EarthDawn3"], "class": "EarthDawn3"})), $$($nesting, 'DiceBotLoader').$new(/^(?:(?:Earth\s*Dawn|ED)4)$/i, $hash2(["filenames", "class"], {"filenames": ["EarthDawn", "EarthDawn4"], "class": "EarthDawn4"})), $$($nesting, 'DiceBotLoader').$new(/^(?:Embryo\s*Machine|EM)$/i, $hash2(["filenames"], {"filenames": ["EmbryoMachine"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Gehenna\s*An|GA)$/i, $hash2(["filenames"], {"filenames": ["GehennaAn"]})), $$($nesting, 'DiceBotLoader').$new(/^(?:Magica\s*Logia|ML)$/i, $hash2(["filenames"], {"filenames": ["MagicaLogia"]})), $$($nesting, 'DiceBotLoader').$new(["Nechronica", "NC"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Meikyu\s*Days|MD)$/i, $hash2(["filenames"], {"filenames": ["MeikyuDays"]})), $$($nesting, 'DiceBotLoader').$new(["Peekaboo", "PK"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Barna\s*Kronika|BK)$/i, $hash2(["filenames"], {"filenames": ["BarnaKronika"]})), $$($nesting, 'DiceBotLoader').$new(["RokumonSekai2", "RS2"]), $$($nesting, 'DiceBotLoader').$new(/^(?:Monotone\s*Museum|MM)$/i, $hash2(["filenames"], {"filenames": ["MonotoneMuseum"]})), $$($nesting, 'DiceBotLoader').$new(/^Zettai\s*Reido$/i, $hash2(["filenames"], {"filenames": ["ZettaiReido"]})), $$($nesting, 'DiceBotLoader').$new(/^Eclipse\s*Phase$/i, $hash2(["filenames"], {"filenames": ["EclipsePhase"]})), $$($nesting, 'DiceBotLoader').$new("NJSLYRBATTLE", $hash2(["filenames"], {"filenames": ["NjslyrBattle"]})), $$($nesting, 'DiceBotLoader').$new(["ShinMegamiTenseiKakuseihen", "SMTKakuseihen"]), $$($nesting, 'DiceBotLoader').$new("Ryutama"), $$($nesting, 'DiceBotLoader').$new("CardRanker"), $$($nesting, 'DiceBotLoader').$new("ShinkuuGakuen"), $$($nesting, 'DiceBotLoader').$new("CrashWorld"), $$($nesting, 'DiceBotLoader').$new("WitchQuest"), $$($nesting, 'DiceBotLoader').$new("BattleTech"), $$($nesting, 'DiceBotLoader').$new("Elysion"), $$($nesting, 'DiceBotLoader').$new("GeishaGirlwithKatana"), $$($nesting, 'DiceBotLoader').$new("GURPS", $hash2(["filenames"], {"filenames": ["Gurps"]})), $$($nesting, 'DiceBotLoader').$new("GurpsFW"), $$($nesting, 'DiceBotLoader').$new("FilledWith"), $$($nesting, 'DiceBotLoader').$new("HarnMaster"), $$($nesting, 'DiceBotLoader').$new("Insane"), $$($nesting, 'DiceBotLoader').$new("KillDeathBusiness"), $$($nesting, 'DiceBotLoader').$new("Kamigakari"), $$($nesting, 'DiceBotLoader').$new("RecordOfSteam"), $$($nesting, 'DiceBotLoader').$new("Oukahoushin3rd"), $$($nesting, 'DiceBotLoader').$new("BeastBindTrinity"), $$($nesting, 'DiceBotLoader').$new("BloodMoon"), $$($nesting, 'DiceBotLoader').$new("Utakaze"), $$($nesting, 'DiceBotLoader').$new("EndBreaker"), $$($nesting, 'DiceBotLoader').$new("KanColle"), $$($nesting, 'DiceBotLoader').$new("GranCrest"), $$($nesting, 'DiceBotLoader').$new("HouraiGakuen"), $$($nesting, 'DiceBotLoader').$new("TwilightGunsmoke"), $$($nesting, 'DiceBotLoader').$new("Garako"), $$($nesting, 'DiceBotLoader').$new("ShoujoTenrankai"), $$($nesting, 'DiceBotLoader').$new("GardenOrder"), $$($nesting, 'DiceBotLoader').$new("DarkSouls"), $$($nesting, 'DiceBotLoader').$new("SterileLife"), $$($nesting, 'DiceBotLoader').$new("Paradiso"), $$($nesting, 'DiceBotLoader').$new("None", $hash2(["filenames", "class"], {"filenames": [], "class": "DiceBot"}))]);
  })($nesting[0], null, $nesting);
})(Opal);
