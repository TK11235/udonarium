/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$setPrefixes', '$===', '$to_i', '$last_match', '$checkRoll', '$getLifeAndDeathUnknownResult', '$debug', '$!=', '$roll', '$sort', '$collect', '$split', '$concat', '$*', '$size', '$select', '$==', '$+', '$join', '$>', '$each', '$get_table_by_d66']);
  return (function($base, $super, $parent_nesting) {
    function $EndBreaker(){};
    var self = $EndBreaker = $klass($base, $super, 'EndBreaker', $EndBreaker);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_EndBreaker_initialize_1, TMP_EndBreaker_gameName_2, TMP_EndBreaker_gameType_3, TMP_EndBreaker_getHelpMessage_4, TMP_EndBreaker_rollDiceCommand_5, TMP_EndBreaker_checkRoll_10, TMP_EndBreaker_getLifeAndDeathUnknownResult_11;

    
    self.$setPrefixes(["\\d+EB", "LDUT"]);
    
    Opal.defn(self, '$initialize', TMP_EndBreaker_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_EndBreaker_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_EndBreaker_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_EndBreaker_initialize_1, false), $zuper, $iter);
      self.sendMode = 2;
      return (self.d66Type = 1);
    }, TMP_EndBreaker_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_EndBreaker_gameName_2 = function $$gameName() {
      var self = this;

      return "エンドブレイカー"
    }, TMP_EndBreaker_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_EndBreaker_gameType_3 = function $$gameType() {
      var self = this;

      return "EndBreaker"
    }, TMP_EndBreaker_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_EndBreaker_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・判定 (nEB)\n" + "  n個のD6を振る判定。ダブルトリガー発動で自動振り足し。\n" + "・各種表\n" + "  ・生死不明表 (LDUT)\n"
    }, TMP_EndBreaker_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_EndBreaker_rollDiceCommand_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, diceCount = nil, tableName = nil, text = nil, number = nil, $case = nil, result = nil;

      
      if ($truthy(/(\d+)EB/i['$==='](command))) {
        
        diceCount = Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i();
        return self.$checkRoll(diceCount);};
      tableName = "";
      text = "";
      number = 0;
      $case = command;
      if ("LDUT"['$===']($case)) {
      tableName = "生死不明表";
      $b = self.$getLifeAndDeathUnknownResult(), $a = Opal.to_ary($b), (text = ($a[0] == null ? nil : $a[0])), (number = ($a[1] == null ? nil : $a[1])), $b;}
      else {return nil};
      result = "" + (tableName) + "(" + (number) + "):" + (text);
      return result;
    }, TMP_EndBreaker_rollDiceCommand_5.$$arity = 1);
    
    Opal.defn(self, '$checkRoll', TMP_EndBreaker_checkRoll_10 = function $$checkRoll(diceCount) {
      var $a, $b, $c, TMP_6, TMP_7, TMP_8, self = this, rollCount = nil, result = nil, diceFullList = nil, _ = nil, dice_str = nil, diceList = nil;

      
      self.$debug("EndBreaker diceCount", diceCount);
      rollCount = diceCount;
      result = "";
      diceFullList = [];
      while ($truthy(rollCount['$!='](0))) {
        
        $c = self.$roll(rollCount, 6), $b = Opal.to_ary($c), (_ = ($b[0] == null ? nil : $b[0])), (dice_str = ($b[1] == null ? nil : $b[1])), $c;
        diceList = $send(dice_str.$split(/,/), 'collect', [], (TMP_6 = function(i){var self = TMP_6.$$s || this;
if (i == null) i = nil;
        return i.$to_i()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6)).$sort();
        diceFullList.$concat(diceList);
        rollCount = $rb_times($send(diceList, 'select', [], (TMP_7 = function(i){var self = TMP_7.$$s || this;
if (i == null) i = nil;
        return i['$=='](1)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7)).$size(), 2);
        result = $rb_plus(result, "" + "[" + (diceList.$join()) + "]");
        if ($truthy($rb_gt(rollCount, 0))) {
          result = $rb_plus(result, " ダブルトリガー! ")};
      };
      result = $rb_plus(result, " ＞");
      $send($range(2, 6, false), 'each', [], (TMP_8 = function(num){var self = TMP_8.$$s || this, TMP_9, count = nil;
if (num == null) num = nil;
      
        count = $send(diceFullList, 'select', [], (TMP_9 = function(i){var self = TMP_9.$$s || this;
if (i == null) i = nil;
        return i['$=='](num)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9)).$size();
        if (count['$=='](0)) {
          return nil
          } else {
          return (result = $rb_plus(result, "" + " [" + (num) + ":" + (count) + "個]"))
        };}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
      return result;
    }, TMP_EndBreaker_checkRoll_10.$$arity = 1);
    return (Opal.defn(self, '$getLifeAndDeathUnknownResult', TMP_EndBreaker_getLifeAndDeathUnknownResult_11 = function $$getLifeAndDeathUnknownResult() {
      var self = this, table = nil;

      
      table = [" 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 1日：生還！", " 5日：敵に捕らわれ、ひどい暴行と拷問を受けた。", " 2日：謎の人物に命を救われた。", "10日：奴隷として売り飛ばされた。", " 8日：おぞましい儀式の生贄として連れ去られた。", " 9日：幽閉・投獄された。", " 1日：生還！", " 7日：モンスター蠢く地下迷宮に滑落した。", "12日強力なマスカレイドにとらわれ、実験台にされた。", " 8日：放浪中に遭遇した事件を、颯爽と解決していた。", " 5日：飢餓状態に追い込まれた。", "15日：記憶を失い放浪した。", " 1日：生還！", "10日：異性に命を救われて、手厚い看病を受けた。", " 3日：負傷からくる熱病で、生死の境を彷徨った。", "11日：闘奴にされたが、戦いと友情の末に自由を獲得した。", " 6日：負傷したまま川に落ち、遥か下流まで流された。", " 9日：敵に連れ去られ、執拗な拷問を受け続けた。", " 1日：生還！", " 4日：繰り返す「死の悪夢」に苛まれた。", " 3日：巨獣の巣に連れ去られた。", "10日：謎の集団に救われて、手厚い看病を受けた。", " 3日：チッタニアンの集落に迷い込み、もてなしを受けた。", " 7日：ピュアリィの群れにとらわれ、弄ばれた。", " 1日：生還！", " 6日：楽園のような場所を発見し、しばらく逗留した。", " 9日：盗賊団に救われ、恩返しとして少し用心棒をした。", "10日：熱病の見せる官能的な幻影にとらわれ、彷徨った。", " 5日：謎の賞金首に狙われ、傷めつけられていた。", " - ：「五分五分」の一般判定。失敗すると死亡。"];
      return self.$get_table_by_d66(table);
    }, TMP_EndBreaker_getLifeAndDeathUnknownResult_11.$$arity = 0), nil) && 'getLifeAndDeathUnknownResult';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
