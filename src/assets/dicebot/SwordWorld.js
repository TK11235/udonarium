/* Generated by Opal 1.0.3 */
Opal.modules["utils/modifier_formatter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$>', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ModifierFormatter');

    var $nesting = [self].concat($parent_nesting), $ModifierFormatter_format_modifier$1;

    
    Opal.def(self, '$format_modifier', $ModifierFormatter_format_modifier$1 = function $$format_modifier(modifier) {
      var self = this;

      if (modifier['$=='](0)) {
        return ""
      } else if ($truthy($rb_gt(modifier, 0))) {
        return "" + "+" + (modifier)
      } else {
        return modifier.$to_s()
      }
    }, $ModifierFormatter_format_modifier$1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$setPrefixes', '$freeze', '$match', '$gsub', '$last_match', '$>=', '$<=', '$!=', '$==', '$rating', '$private', '$debug', '$getRatingCommandStrings', '$[]', '$include?', '$getRateUpFromString', '$getCriticalFromString', '$getDiceChangesFromString', '$getKeyAndAddValueFromString', '$=~', '$to_i', '$getSW2_0_RatingTable', '$-', '$length', '$>', '$getNewRates', '$<', '$+', '$getAdditionalString', '$to_s', '$loop', '$rollDice', '$<<', '$getAdditionalDiceValue', '$min', '$*', '$getResultText', '$parren_killer', '$each', '$split', '$push', '$[]=', '$roll', '$join', '$size', '$format_modifier', '$first', '$ceil', '$/', '$===']);
  
  self.$require("utils/modifier_formatter");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SwordWorld');

    var $nesting = [self].concat($parent_nesting), $SwordWorld_initialize$1, $SwordWorld_changeText$2, $SwordWorld_getRatingCommandStrings$7, $SwordWorld_check_2D6$8, $SwordWorld_rollDiceCommand$9, $SwordWorld_rating$10, $SwordWorld_getAdditionalString$12, $SwordWorld_getAdditionalDiceValue$13, $SwordWorld_getCriticalFromString$14, $SwordWorld_getDiceChangesFromString$15, $SwordWorld_getRateUpFromString$16, $SwordWorld_getKeyAndAddValueFromString$17, $SwordWorld_getSW2_0_RatingTable$18, $SwordWorld_getNewRates$19, $SwordWorld_rollDice$21, $SwordWorld_getResultText$22, $SwordWorld_setRatingTable$23;

    self.$$prototype.rating_table = nil;
    
    self.$include($$($nesting, 'ModifierFormatter'));
    Opal.const_set($nesting[0], 'ID', "SwordWorld");
    Opal.const_set($nesting[0], 'NAME', "ソードワールド");
    Opal.const_set($nesting[0], 'SORT_KEY', "そおとわあると");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "・SW　レーティング表　(Kx[c]+m$f) (x:キー, c:クリティカル値, m:ボーナス, f:出目修正)\n");
    self.$setPrefixes(["H?K\\d+.*"]);
    
    Opal.def(self, '$initialize', $SwordWorld_initialize$1 = function $$initialize() {
      var $iter = $SwordWorld_initialize$1.$$p, $yield = $iter || nil, self = this, rating_table = nil;

      if ($iter) $SwordWorld_initialize$1.$$p = null;
      
      rating_table = 0;
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $SwordWorld_initialize$1, false), [], null);
      return (self.rating_table = rating_table);
    }, $SwordWorld_initialize$1.$$arity = 0);
    Opal.const_set($nesting[0], 'RATING_TABLE_RE_FOR_CHANGE_TEXT', /^S?H?K\d+/i.$freeze());
    
    Opal.def(self, '$changeText', $SwordWorld_changeText$2 = function $$changeText(string) {
      var $$3, $$4, $$5, $$6, self = this;

      
      if ($truthy($$($nesting, 'RATING_TABLE_RE_FOR_CHANGE_TEXT').$match(string))) {
      } else {
        return string
      };
      return $send($send($send($send(string, 'gsub', [/\[(\d+)\]/], ($$3 = function(){var self = $$3.$$s || this;

      return "" + "c[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$3.$$s = self, $$3.$$arity = 0, $$3)), 'gsub', [/@(\d+)/], ($$4 = function(){var self = $$4.$$s || this;

      return "" + "c[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$4.$$s = self, $$4.$$arity = 0, $$4)), 'gsub', [/\$([-+]?\d+)/], ($$5 = function(){var self = $$5.$$s || this;

      return "" + "m[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$5.$$s = self, $$5.$$arity = 0, $$5)), 'gsub', [/r([-+]?\d+)/i], ($$6 = function(){var self = $$6.$$s || this;

      return "" + "r[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$6.$$s = self, $$6.$$arity = 0, $$6));
    }, $SwordWorld_changeText$2.$$arity = 1);
    
    Opal.def(self, '$getRatingCommandStrings', $SwordWorld_getRatingCommandStrings$7 = function $$getRatingCommandStrings() {
      var self = this;

      return "cmCM"
    }, $SwordWorld_getRatingCommandStrings$7.$$arity = 0);
    
    Opal.def(self, '$check_2D6', $SwordWorld_check_2D6$8 = function $$check_2D6(total, dice_total, _dice_list, cmp_op, target) {
      var $a, self = this;

      if ($truthy($rb_ge(dice_total, 12))) {
        return " ＞ 自動的成功"
      } else if ($truthy($rb_le(dice_total, 2))) {
        return " ＞ 自動的失敗"
      } else if ($truthy(($truthy($a = cmp_op['$!='](">=")) ? $a : target['$==']("?")))) {
        return ""
      } else if ($truthy($rb_ge(total, target))) {
        return " ＞ 成功"
      } else {
        return " ＞ 失敗"
      }
    }, $SwordWorld_check_2D6$8.$$arity = 5);
    
    Opal.def(self, '$rollDiceCommand', $SwordWorld_rollDiceCommand$9 = function $$rollDiceCommand(command) {
      var self = this;

      return self.$rating(command)
    }, $SwordWorld_rollDiceCommand$9.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$rating', $SwordWorld_rating$10 = function $$rating(string) {
      var $a, $b, $$11, self = this, commands = nil, m = nil, half = nil, rateUp = nil, crit = nil, firstDiceChanteTo = nil, firstDiceChangeModify = nil, key = nil, addValue = nil, rate_sw2_0 = nil, keyMax = nil, newRates = nil, output = nil, values = nil, diceResultTotals = nil, diceResults = nil, rateResults = nil, dice = nil, diceOnlyTotal = nil, totalValue = nil, round = nil, limitLength = nil;
      if ($gvars.SEND_STR_MAX == null) $gvars.SEND_STR_MAX = nil;

      
      self.$debug("rating string", string);
      commands = self.$getRatingCommandStrings();
      m = new RegExp("" + "^S?(H?K[\\d\\+\\-]+([" + (commands) + "]\\[([\\d\\+\\-]+)\\])*([\\d\\+\\-]*)([CMR]\\[([\\d\\+\\-]+)\\]|GF|H)*)", 'i').$match(string);
      if ($truthy(m)) {
      } else {
        
        self.$debug("not matched");
        return "1";
      };
      string = m['$[]'](1);
      half = string['$include?']("H");
      $b = self.$getRateUpFromString(string), $a = Opal.to_ary($b), (rateUp = ($a[0] == null ? nil : $a[0])), (string = ($a[1] == null ? nil : $a[1])), $b;
      $b = self.$getCriticalFromString(string, half), $a = Opal.to_ary($b), (crit = ($a[0] == null ? nil : $a[0])), (string = ($a[1] == null ? nil : $a[1])), $b;
      $b = self.$getDiceChangesFromString(string), $a = Opal.to_ary($b), (firstDiceChanteTo = ($a[0] == null ? nil : $a[0])), (firstDiceChangeModify = ($a[1] == null ? nil : $a[1])), (string = ($a[2] == null ? nil : $a[2])), $b;
      $b = self.$getKeyAndAddValueFromString(string), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (addValue = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(key['$=~'](/([\d]+)/))) {
      } else {
        return "1"
      };
      key = $$($nesting, 'Regexp').$last_match(1).$to_i();
      rate_sw2_0 = self.$getSW2_0_RatingTable();
      keyMax = $rb_minus(rate_sw2_0.$length(), 1);
      self.$debug("keyMax", keyMax);
      if ($truthy($rb_gt(key, keyMax))) {
        return "" + "キーナンバーは" + (keyMax) + "までです"};
      newRates = self.$getNewRates(rate_sw2_0);
      output = "" + "KeyNo." + (key);
      if ($truthy($rb_lt(crit, 13))) {
        output = $rb_plus(output, "" + "c[" + (crit) + "]")};
      if ($truthy(firstDiceChangeModify['$!='](0))) {
        output = $rb_plus(output, "" + "m[" + (firstDiceChangeModify) + "]")};
      if ($truthy(firstDiceChanteTo['$!='](0))) {
        output = $rb_plus(output, "" + "m[" + (firstDiceChanteTo) + "]")};
      if ($truthy(rateUp['$!='](0))) {
        output = $rb_plus(output, "" + "r[" + (rateUp) + "]")};
      $b = self.$getAdditionalString(string, output), $a = Opal.to_ary($b), (output = ($a[0] == null ? nil : $a[0])), (values = ($a[1] == null ? nil : $a[1])), $b;
      self.$debug("output", output);
      if ($truthy(addValue['$!='](0))) {
        
        if ($truthy($rb_gt(addValue, 0))) {
          output = $rb_plus(output, "" + "+" + (addValue))};
        if ($truthy($rb_lt(addValue, 0))) {
          output = $rb_plus(output, addValue.$to_s())};};
      output = $rb_plus(output, " ＞ ");
      diceResultTotals = [];
      diceResults = [];
      rateResults = [];
      dice = 0;
      diceOnlyTotal = 0;
      totalValue = 0;
      round = 0;
      (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$11 = function(){var self = $$11.$$s || this, $c, $d, dice_raw = nil, diceText = nil, currentKey = nil, rateValue = nil;

      
        $d = self.$rollDice(values), $c = Opal.to_ary($d), (dice_raw = ($c[0] == null ? nil : $c[0])), (diceText = ($c[1] == null ? nil : $c[1])), $d;
        dice = dice_raw;
        if ($truthy(firstDiceChanteTo['$!='](0))) {
          
          dice = (dice_raw = firstDiceChanteTo);
          firstDiceChanteTo = 0;
        } else if ($truthy(firstDiceChangeModify['$!='](0))) {
          
          dice = $rb_plus(dice, firstDiceChangeModify.$to_i());
          firstDiceChangeModify = 0;};
        if ($truthy($rb_le(dice_raw, 2))) {
          
          diceResultTotals['$<<'](dice_raw.$to_s());
          diceResults['$<<'](diceText.$to_s());
          rateResults['$<<']("**");
          round = $rb_plus(round, 1);
          
          Opal.brk(nil, $brk);};
        dice = $rb_plus(dice, self.$getAdditionalDiceValue(dice, values));
        if ($truthy($rb_lt(dice, 2))) {
          dice = 2};
        if ($truthy($rb_gt(dice, 12))) {
          dice = 12};
        currentKey = [$rb_plus(key, $rb_times(round, rateUp)), keyMax].$min();
        self.$debug("currentKey", currentKey);
        rateValue = newRates['$[]'](dice)['$[]'](currentKey);
        self.$debug("rateValue", rateValue);
        totalValue = $rb_plus(totalValue, rateValue);
        diceOnlyTotal = $rb_plus(diceOnlyTotal, dice);
        diceResultTotals['$<<'](dice.$to_s());
        diceResults['$<<'](diceText.$to_s());
        rateResults['$<<']((function() {if ($truthy($rb_gt(dice, 2))) {
          return rateValue
        } else {
          return "**"
        }; return nil; })());
        round = $rb_plus(round, 1);
        if ($truthy($rb_ge(dice, crit))) {
          return nil
        } else {
          
          Opal.brk(nil, $brk)
        };}, $$11.$$s = self, $$11.$$brk = $brk, $$11.$$arity = 0, $$11))
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      limitLength = $rb_minus($gvars.SEND_STR_MAX, output.$length());
      output = $rb_plus(output, self.$getResultText(totalValue, addValue, diceResults, diceResultTotals, rateResults, diceOnlyTotal, round, limitLength, half));
      return output;
    }, $SwordWorld_rating$10.$$arity = 1);
    
    Opal.def(self, '$getAdditionalString', $SwordWorld_getAdditionalString$12 = function $$getAdditionalString(_string, output) {
      var self = this, values = nil;

      
      values = $hash2([], {});
      return [output, values];
    }, $SwordWorld_getAdditionalString$12.$$arity = 2);
    
    Opal.def(self, '$getAdditionalDiceValue', $SwordWorld_getAdditionalDiceValue$13 = function $$getAdditionalDiceValue(_dice, _values) {
      var self = this;

      return 0
    }, $SwordWorld_getAdditionalDiceValue$13.$$arity = 2);
    
    Opal.def(self, '$getCriticalFromString', $SwordWorld_getCriticalFromString$14 = function $$getCriticalFromString(string, half) {
      var self = this, crit = nil, regexp = nil;

      
      crit = (function() {if ($truthy(half)) {
        return 13
      } else {
        return 10
      }; return nil; })();
      regexp = /c\[(\d+)\]/i;
      if ($truthy(regexp['$=~'](string))) {
        
        crit = $$($nesting, 'Regexp').$last_match(1).$to_i();
        if ($truthy($rb_lt(crit, 3))) {
          crit = 3};
        string = string.$gsub(regexp, "");};
      return [crit, string];
    }, $SwordWorld_getCriticalFromString$14.$$arity = 2);
    
    Opal.def(self, '$getDiceChangesFromString', $SwordWorld_getDiceChangesFromString$15 = function $$getDiceChangesFromString(string) {
      var self = this, firstDiceChanteTo = nil, firstDiceChangeModify = nil, regexp = nil;

      
      firstDiceChanteTo = 0;
      firstDiceChangeModify = 0;
      regexp = /m\[([\d\+\-]+)\]/i;
      if ($truthy(regexp['$=~'](string))) {
        
        firstDiceChangeModify = $$($nesting, 'Regexp').$last_match(1);
        if ($truthy(/[\+\-]/['$=~'](firstDiceChangeModify))) {
        } else {
          
          firstDiceChanteTo = firstDiceChangeModify.$to_i();
          firstDiceChangeModify = 0;
        };
        string = string.$gsub(regexp, "");};
      return [firstDiceChanteTo, firstDiceChangeModify, string];
    }, $SwordWorld_getDiceChangesFromString$15.$$arity = 1);
    
    Opal.def(self, '$getRateUpFromString', $SwordWorld_getRateUpFromString$16 = function $$getRateUpFromString(string) {
      var self = this, rateUp = nil;

      
      rateUp = 0;
      return [rateUp, string];
    }, $SwordWorld_getRateUpFromString$16.$$arity = 1);
    
    Opal.def(self, '$getKeyAndAddValueFromString', $SwordWorld_getKeyAndAddValueFromString$17 = function $$getKeyAndAddValueFromString(string) {
      var self = this, key = nil, addValue = nil;

      
      key = nil;
      addValue = 0;
      if ($truthy(/K(\d+)([\d\+\-]*)/i['$=~'](string))) {
        
        key = $$($nesting, 'Regexp').$last_match(1);
        if ($truthy($$($nesting, 'Regexp').$last_match(2))) {
          addValue = self.$parren_killer($rb_plus($rb_plus("(", $$($nesting, 'Regexp').$last_match(2)), ")")).$to_i()};
      } else {
        key = string
      };
      return [key, addValue];
    }, $SwordWorld_getKeyAndAddValueFromString$17.$$arity = 1);
    
    Opal.def(self, '$getSW2_0_RatingTable', $SwordWorld_getSW2_0_RatingTable$18 = function $$getSW2_0_RatingTable() {
      var self = this, rate_sw2_0 = nil;

      
      rate_sw2_0 = ["*,0,0,0,1,2,2,3,3,4,4", "*,0,0,0,1,2,3,3,3,4,4", "*,0,0,0,1,2,3,4,4,4,4", "*,0,0,1,1,2,3,4,4,4,5", "*,0,0,1,2,2,3,4,4,5,5", "*,0,1,1,2,2,3,4,5,5,5", "*,0,1,1,2,3,3,4,5,5,5", "*,0,1,1,2,3,4,4,5,5,6", "*,0,1,2,2,3,4,4,5,6,6", "*,0,1,2,3,3,4,4,5,6,7", "*,1,1,2,3,3,4,5,5,6,7", "*,1,2,2,3,3,4,5,6,6,7", "*,1,2,2,3,4,4,5,6,6,7", "*,1,2,3,3,4,4,5,6,7,7", "*,1,2,3,4,4,4,5,6,7,8", "*,1,2,3,4,4,5,5,6,7,8", "*,1,2,3,4,4,5,6,7,7,8", "*,1,2,3,4,5,5,6,7,7,8", "*,1,2,3,4,5,6,6,7,7,8", "*,1,2,3,4,5,6,7,7,8,9", "*,1,2,3,4,5,6,7,8,9,10", "*,1,2,3,4,6,6,7,8,9,10", "*,1,2,3,5,6,6,7,8,9,10", "*,2,2,3,5,6,7,7,8,9,10", "*,2,3,4,5,6,7,7,8,9,10", "*,2,3,4,5,6,7,8,8,9,10", "*,2,3,4,5,6,8,8,9,9,10", "*,2,3,4,6,6,8,8,9,9,10", "*,2,3,4,6,6,8,9,9,10,10", "*,2,3,4,6,7,8,9,9,10,10", "*,2,4,4,6,7,8,9,10,10,10", "*,2,4,5,6,7,8,9,10,10,11", "*,3,4,5,6,7,8,10,10,10,11", "*,3,4,5,6,8,8,10,10,10,11", "*,3,4,5,6,8,9,10,10,11,11", "*,3,4,5,7,8,9,10,10,11,12", "*,3,5,5,7,8,9,10,11,11,12", "*,3,5,6,7,8,9,10,11,12,12", "*,3,5,6,7,8,10,10,11,12,13", "*,4,5,6,7,8,10,11,11,12,13", "*,4,5,6,7,9,10,11,11,12,13", "*,4,6,6,7,9,10,11,12,12,13", "*,4,6,7,7,9,10,11,12,13,13", "*,4,6,7,8,9,10,11,12,13,14", "*,4,6,7,8,10,10,11,12,13,14", "*,4,6,7,9,10,10,11,12,13,14", "*,4,6,7,9,10,10,12,13,13,14", "*,4,6,7,9,10,11,12,13,13,15", "*,4,6,7,9,10,12,12,13,13,15", "*,4,6,7,10,10,12,12,13,14,15", "*,4,6,8,10,10,12,12,13,15,15", "*,5,7,8,10,10,12,12,13,15,15", "*,5,7,8,10,11,12,12,13,15,15", "*,5,7,9,10,11,12,12,14,15,15", "*,5,7,9,10,11,12,13,14,15,16", "*,5,7,10,10,11,12,13,14,16,16", "*,5,8,10,10,11,12,13,15,16,16", "*,5,8,10,11,11,12,13,15,16,17", "*,5,8,10,11,12,12,13,15,16,17", "*,5,9,10,11,12,12,14,15,16,17", "*,5,9,10,11,12,13,14,15,16,18", "*,5,9,10,11,12,13,14,16,17,18", "*,5,9,10,11,13,13,14,16,17,18", "*,5,9,10,11,13,13,15,17,17,18", "*,5,9,10,11,13,14,15,17,17,18", "*,5,9,10,12,13,14,15,17,18,18", "*,5,9,10,12,13,15,15,17,18,19", "*,5,9,10,12,13,15,16,17,19,19", "*,5,9,10,12,14,15,16,17,19,19", "*,5,9,10,12,14,16,16,17,19,19", "*,5,9,10,12,14,16,17,18,19,19", "*,5,9,10,13,14,16,17,18,19,20", "*,5,9,10,13,15,16,17,18,19,20", "*,5,9,10,13,15,16,17,19,20,21", "*,6,9,10,13,15,16,18,19,20,21", "*,6,9,10,13,16,16,18,19,20,21", "*,6,9,10,13,16,17,18,19,20,21", "*,6,9,10,13,16,17,18,20,21,22", "*,6,9,10,13,16,17,19,20,22,23", "*,6,9,10,13,16,18,19,20,22,23", "*,6,9,10,13,16,18,20,21,22,23", "*,6,9,10,13,17,18,20,21,22,23", "*,6,9,10,14,17,18,20,21,22,24", "*,6,9,11,14,17,18,20,21,23,24", "*,6,9,11,14,17,19,20,21,23,24", "*,6,9,11,14,17,19,21,22,23,24", "*,7,10,11,14,17,19,21,22,23,25", "*,7,10,12,14,17,19,21,22,24,25", "*,7,10,12,14,18,19,21,22,24,25", "*,7,10,12,15,18,19,21,22,24,26", "*,7,10,12,15,18,19,21,23,25,26", "*,7,11,13,15,18,19,21,23,25,26", "*,7,11,13,15,18,20,21,23,25,27", "*,8,11,13,15,18,20,22,23,25,27", "*,8,11,13,16,18,20,22,23,25,28", "*,8,11,14,16,18,20,22,23,26,28", "*,8,11,14,16,19,20,22,23,26,28", "*,8,12,14,16,19,20,22,24,26,28", "*,8,12,15,16,19,20,22,24,27,28", "*,8,12,15,17,19,20,22,24,27,29", "*,8,12,15,18,19,20,22,24,27,30"];
      return rate_sw2_0;
    }, $SwordWorld_getSW2_0_RatingTable$18.$$arity = 0);
    
    Opal.def(self, '$getNewRates', $SwordWorld_getNewRates$19 = function $$getNewRates(rate_sw2_0) {
      var $$20, self = this, rate_3 = nil, rate_4 = nil, rate_5 = nil, rate_6 = nil, rate_7 = nil, rate_8 = nil, rate_9 = nil, rate_10 = nil, rate_11 = nil, rate_12 = nil, zeroArray = nil, $writer = nil, newRates = nil;

      
      rate_3 = [];
      rate_4 = [];
      rate_5 = [];
      rate_6 = [];
      rate_7 = [];
      rate_8 = [];
      rate_9 = [];
      rate_10 = [];
      rate_11 = [];
      rate_12 = [];
      zeroArray = [];
      $send(rate_sw2_0, 'each', [], ($$20 = function(rateText){var self = $$20.$$s || this, rate_arr = nil;

      
        
        if (rateText == null) {
          rateText = nil;
        };
        rate_arr = rateText.$split(/,/);
        zeroArray.$push(0);
        rate_3.$push(rate_arr['$[]'](1).$to_i());
        rate_4.$push(rate_arr['$[]'](2).$to_i());
        rate_5.$push(rate_arr['$[]'](3).$to_i());
        rate_6.$push(rate_arr['$[]'](4).$to_i());
        rate_7.$push(rate_arr['$[]'](5).$to_i());
        rate_8.$push(rate_arr['$[]'](6).$to_i());
        rate_9.$push(rate_arr['$[]'](7).$to_i());
        rate_10.$push(rate_arr['$[]'](8).$to_i());
        rate_11.$push(rate_arr['$[]'](9).$to_i());
        return rate_12.$push(rate_arr['$[]'](10).$to_i());}, $$20.$$s = self, $$20.$$arity = 1, $$20));
      if (self.rating_table['$=='](1)) {
        
        $writer = [31, (($writer = [32, (($writer = [33, 10]), $send(rate_12, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]), $send(rate_12, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
        $send(rate_12, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      newRates = [zeroArray, zeroArray, zeroArray, rate_3, rate_4, rate_5, rate_6, rate_7, rate_8, rate_9, rate_10, rate_11, rate_12];
      return newRates;
    }, $SwordWorld_getNewRates$19.$$arity = 1);
    
    Opal.def(self, '$rollDice', $SwordWorld_rollDice$21 = function $$rollDice(_values) {
      var $a, $b, self = this, dice = nil, diceText = nil;

      
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      return [dice, diceText];
    }, $SwordWorld_rollDice$21.$$arity = 1);
    
    Opal.def(self, '$getResultText', $SwordWorld_getResultText$22 = function $$getResultText(rating_total, modifier, diceResults, diceResultTotals, rateResults, dice_total, round, limitLength, half) {
      var $a, self = this, sequence = nil, short$ = nil, text = nil, round_text = nil, total = nil, total_text = nil, ret = nil;

      
      sequence = [];
      short$ = ["..."];
      sequence.$push("" + "2D:[" + (diceResults.$join(" ")) + "]=" + (diceResultTotals.$join(",")));
      if ($truthy($rb_le(dice_total, 2))) {
        
        sequence.$push(rateResults.$join(","));
        sequence.$push("自動的失敗");
        return sequence.$join(" ＞ ");};
      if ($truthy(($truthy($a = $rb_gt(rateResults.$size(), 1)) ? $a : modifier['$!='](0)))) {
        
        text = $rb_plus(rateResults.$join(","), self.$format_modifier(modifier));
        if ($truthy(half)) {
          text = "" + "(" + (text) + ")/2"};
        sequence.$push(text);
      } else if ($truthy(half)) {
        sequence.$push("" + (rateResults.$first()) + "/2")};
      if ($truthy($rb_gt(round, 1))) {
        
        round_text = "" + ($rb_minus(round, 1)) + "回転";
        sequence.$push(round_text);
        short$.$push(round_text);};
      total = $rb_plus(rating_total, modifier);
      if ($truthy(half)) {
        total = $rb_divide(total, 2.0).$ceil()};
      total_text = total.$to_s();
      sequence.$push(total_text);
      short$.$push(total_text);
      ret = sequence.$join(" ＞ ");
      if ($truthy($rb_gt(ret.$length(), limitLength))) {
        return short$.$join(" ＞ ")
      } else {
        return ret
      };
    }, $SwordWorld_getResultText$22.$$arity = 9);
    return (Opal.def(self, '$setRatingTable', $SwordWorld_setRatingTable$23 = function $$setRatingTable(tnick) {
      var self = this, mode_str = nil, pre_mode = nil, $case = nil;

      
      mode_str = "";
      pre_mode = self.rating_table;
      if ($truthy(/(\d+)/['$=~'](tnick))) {
        
        self.rating_table = $$($nesting, 'Regexp').$last_match(1).$to_i();
        if ($truthy($rb_gt(self.rating_table, 1))) {
          
          mode_str = "2.0-mode";
          self.rating_table = 2;
        } else if ($truthy($rb_gt(self.rating_table, 0))) {
          
          mode_str = "new-mode";
          self.rating_table = 1;
        } else {
          
          mode_str = "old-mode";
          self.rating_table = 0;
        };
      } else {
        $case = tnick;
        if (/old/i['$===']($case)) {
        self.rating_table = 0;
        mode_str = "old-mode";}
        else if (/new/i['$===']($case)) {
        self.rating_table = 1;
        mode_str = "new-mode";}
        else if (/2\.0/i['$===']($case)) {
        self.rating_table = 2;
        mode_str = "2.0-mode";}
      };
      if (self.rating_table['$=='](pre_mode)) {
        return "1"};
      return "" + "RatingTableを" + (mode_str) + "に変更しました";
    }, $SwordWorld_setRatingTable$23.$$arity = 1), nil) && 'setRatingTable';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting);
})(Opal);
