/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$==', '$getCheckResult', '$>', '$getFailResult', '$getSuccessResult', '$%', '$===', '$to_i', '$last_match', '$getCheckShockResult', '$getStrikeLocationHuman', '$roll', '$<=', '$getStrikeLocationHumanUpperTable', '$getStrikeLocationHumanDownTable', '$getStrikeLocationHumanNormalTable', '$raise', '$get_table_by_number', '$getLocationSide', '$getFaceLocation', '$debug', '$odd?', '$sub']);
  return (function($base, $super, $parent_nesting) {
    function $HarnMaster(){};
    var self = $HarnMaster = $klass($base, $super, 'HarnMaster', $HarnMaster);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HarnMaster_initialize_1, TMP_HarnMaster_gameName_2, TMP_HarnMaster_gameType_3, TMP_HarnMaster_getHelpMessage_4, TMP_HarnMaster_check_1D100_5, TMP_HarnMaster_getCheckResult_6, TMP_HarnMaster_getFailResult_7, TMP_HarnMaster_getSuccessResult_8, TMP_HarnMaster_rollDiceCommand_9, TMP_HarnMaster_getCheckShockResult_10, TMP_HarnMaster_getStrikeLocationHuman_11, TMP_HarnMaster_getLocationSide_12, TMP_HarnMaster_getFaceLocation_13, TMP_HarnMaster_getStrikeLocationHumanUpperTable_14, TMP_HarnMaster_getStrikeLocationHumanNormalTable_15, TMP_HarnMaster_getStrikeLocationHumanDownTable_16;

    
    self.$setPrefixes(["SHK\\d+.*", "SLH", "SLHU", "SLHD"]);
    
    Opal.defn(self, '$initialize', TMP_HarnMaster_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_HarnMaster_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_HarnMaster_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_HarnMaster_initialize_1, false), $zuper, $iter)
    }, TMP_HarnMaster_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_HarnMaster_gameName_2 = function $$gameName() {
      var self = this;

      return "ハーンマスター"
    }, TMP_HarnMaster_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_HarnMaster_gameType_3 = function $$gameType() {
      var self = this;

      return "HarnMaster"
    }, TMP_HarnMaster_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_HarnMaster_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "・判定\n" + "　1D100<=XX の判定時に致命的失敗・決定的成功を判定\n" + "・ショック判定（SHKx）\n" + "　例）SHK13,3\n" + "・人型用　中段命中部位表 (SLH)／上段命中部位 (SLHU)／上段命中部位 (SLHD)\n"
    }, TMP_HarnMaster_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$check_1D100', TMP_HarnMaster_check_1D100_5 = function $$check_1D100(total_n, _dice_n, signOfInequality, diff, _dice_cnt, _dice_max, _n1, _n_max) {
      var self = this, result = nil;

      
      if (signOfInequality['$==']("<=")) {
        } else {
        return ""
      };
      result = self.$getCheckResult(total_n, diff);
      return "" + "＞ " + (result);
    }, TMP_HarnMaster_check_1D100_5.$$arity = 8);
    
    Opal.defn(self, '$getCheckResult', TMP_HarnMaster_getCheckResult_6 = function $$getCheckResult(total, diff) {
      var self = this;

      
      if ($truthy($rb_gt(total, diff))) {
        return self.$getFailResult(total)};
      return self.$getSuccessResult(total);
    }, TMP_HarnMaster_getCheckResult_6.$$arity = 2);
    
    Opal.defn(self, '$getFailResult', TMP_HarnMaster_getFailResult_7 = function $$getFailResult(total) {
      var self = this;

      
      if (total['$%'](5)['$=='](0)) {
        return "致命的失敗"};
      return "失敗";
    }, TMP_HarnMaster_getFailResult_7.$$arity = 1);
    
    Opal.defn(self, '$getSuccessResult', TMP_HarnMaster_getSuccessResult_8 = function $$getSuccessResult(total) {
      var self = this;

      
      if (total['$%'](5)['$=='](0)) {
        return "決定的成功"};
      return "成功";
    }, TMP_HarnMaster_getSuccessResult_8.$$arity = 1);
    
    Opal.defn(self, '$rollDiceCommand', TMP_HarnMaster_rollDiceCommand_9 = function $$rollDiceCommand(command) {
      var self = this, result = nil, $case = nil, toughness = nil, damage = nil, type = nil;

      
      result = nil;
      $case = command;
      if (/^SHK(\d*),(\d+)/i['$===']($case)) {
      toughness = Opal.const_get_relative($nesting, 'Regexp').$last_match(1).$to_i();
      damage = Opal.const_get_relative($nesting, 'Regexp').$last_match(2).$to_i();
      result = self.$getCheckShockResult(damage, toughness);}
      else if (/SLH(U|D)?/i['$===']($case)) {
      type = Opal.const_get_relative($nesting, 'Regexp').$last_match(1);
      result = self.$getStrikeLocationHuman(type);}
      else {result = nil};
      return result;
    }, TMP_HarnMaster_rollDiceCommand_9.$$arity = 1);
    
    Opal.defn(self, '$getCheckShockResult', TMP_HarnMaster_getCheckShockResult_10 = function $$getCheckShockResult(damage, toughness) {
      var $a, $b, self = this, dice = nil, diceText = nil, result = nil, text = nil;

      
      $b = self.$roll(damage, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      result = (function() {if ($truthy($rb_le(dice, toughness))) {
        return "成功"
        } else {
        return "失敗"
      }; return nil; })();
      text = "" + "ショック判定(ダメージ:" + (damage) + ", 耐久力:" + (toughness) + ") ＞ (" + (dice) + "[" + (diceText) + "]) ＞ " + (result);
      return text;
    }, TMP_HarnMaster_getCheckShockResult_10.$$arity = 2);
    
    Opal.defn(self, '$getStrikeLocationHuman', TMP_HarnMaster_getStrikeLocationHuman_11 = function $$getStrikeLocationHuman(type) {
      var $a, $b, self = this, typeName = nil, table = nil, $case = nil, number = nil, part = nil, result = nil;

      
      typeName = "";
      table = nil;
      $case = type;
      if ("U"['$===']($case)) {
      typeName = "命中部位(人型 上段)";
      table = self.$getStrikeLocationHumanUpperTable();}
      else if ("D"['$===']($case)) {
      typeName = "命中部位(人型 下段)";
      table = self.$getStrikeLocationHumanDownTable();}
      else if (nil['$===']($case)) {
      typeName = "命中部位(人型 中段)";
      table = self.$getStrikeLocationHumanNormalTable();}
      else {self.$raise("" + "unknow atak type " + (type))};
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), $b;
      part = self.$get_table_by_number(number, table);
      part = self.$getLocationSide(part, number);
      part = self.$getFaceLocation(part);
      result = "" + (typeName) + " ＞ (" + (number) + ")" + (part);
      return result;
    }, TMP_HarnMaster_getStrikeLocationHuman_11.$$arity = 1);
    
    Opal.defn(self, '$getLocationSide', TMP_HarnMaster_getLocationSide_12 = function $$getLocationSide(part, number) {
      var self = this, side = nil;

      
      if ($truthy(/^\*/['$==='](part))) {
        } else {
        
        self.$debug("part has NO side", part);
        return part;
      };
      self.$debug("part has side", part);
      side = (function() {if ($truthy(number['$odd?']())) {
        return "左"
        } else {
        return "右"
      }; return nil; })();
      return part.$sub(/\*/, side);
    }, TMP_HarnMaster_getLocationSide_12.$$arity = 2);
    
    Opal.defn(self, '$getFaceLocation', TMP_HarnMaster_getFaceLocation_13 = function $$getFaceLocation(part) {
      var $a, $b, self = this, table = nil, number = nil, faceLocation = nil, result = nil;

      
      self.$debug("getFaceLocation part", part);
      if ($truthy(/\+$/['$==='](part))) {
        } else {
        
        self.$debug("is NOT Face");
        return part;
      };
      self.$debug("is Face");
      table = [[15, "顎"], [30, "*目"], [64, "*頬"], [80, "鼻"], [90, "*耳"], [100, "口"]];
      $b = self.$roll(1, 100), $a = Opal.to_ary($b), (number = ($a[0] == null ? nil : $a[0])), $b;
      faceLocation = self.$get_table_by_number(number, table);
      self.$debug("faceLocation", faceLocation);
      self.$debug("number", number);
      faceLocation = self.$getLocationSide(faceLocation, number);
      result = part.$sub(/\+$/, "" + " ＞ (" + (number) + ")" + (faceLocation));
      return result;
    }, TMP_HarnMaster_getFaceLocation_13.$$arity = 1);
    
    Opal.defn(self, '$getStrikeLocationHumanUpperTable', TMP_HarnMaster_getStrikeLocationHumanUpperTable_14 = function $$getStrikeLocationHumanUpperTable() {
      var self = this, table = nil;

      
      table = [[15, "頭部"], [30, "顔+"], [45, "首"], [57, "*肩"], [69, "*上腕"], [73, "*肘"], [81, "*前腕"], [85, "*手"], [95, "胸部"], [100, "腹部"]];
      return table;
    }, TMP_HarnMaster_getStrikeLocationHumanUpperTable_14.$$arity = 0);
    
    Opal.defn(self, '$getStrikeLocationHumanNormalTable', TMP_HarnMaster_getStrikeLocationHumanNormalTable_15 = function $$getStrikeLocationHumanNormalTable() {
      var self = this, table = nil;

      
      table = [[5, "頭部"], [10, "顔+"], [15, "首"], [27, "*肩"], [33, "*上腕"], [35, "*肘"], [39, "*前腕"], [43, "*手"], [60, "胸部"], [70, "腹部"], [74, "股間"], [80, "*臀部"], [88, "*腿"], [90, "*膝"], [96, "*脛"], [100, "*足"]];
      return table;
    }, TMP_HarnMaster_getStrikeLocationHumanNormalTable_15.$$arity = 0);
    return (Opal.defn(self, '$getStrikeLocationHumanDownTable', TMP_HarnMaster_getStrikeLocationHumanDownTable_16 = function $$getStrikeLocationHumanDownTable() {
      var self = this, table = nil;

      
      table = [[6, "*前腕"], [12, "*手"], [19, "胸部"], [29, "腹部"], [35, "股間"], [49, "*臀部"], [70, "*腿"], [78, "*膝"], [92, "*脛"], [100, "*足"]];
      return table;
    }, TMP_HarnMaster_getStrikeLocationHumanDownTable_16.$$arity = 0), nil) && 'getStrikeLocationHumanDownTable';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
