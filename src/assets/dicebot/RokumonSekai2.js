/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$debug', '$gsub', '$last_match', '$checkRoll', '$=~', '$to_i', '$parren_killer', '$rokumon2_roll', '$rokumon2_suc_rank', '$!=', '$+', '$roll', '$abs', '$collect', '$split', '$times', '$<', '$shift', '$pop', '$each', '$>=', '$<=', '$==', '$[]']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RokumonSekai2');

    var $nesting = [self].concat($parent_nesting), $RokumonSekai2_initialize$1, $RokumonSekai2_changeText$2, $RokumonSekai2_dice_command_xRn$5, $RokumonSekai2_checkRoll$6, $RokumonSekai2_rokumon2_roll$7, $RokumonSekai2_rokumon2_suc_rank$11;

    
    Opal.const_set($nesting[0], 'ID', "RokumonSekai2");
    Opal.const_set($nesting[0], 'NAME', "六門世界2nd");
    Opal.const_set($nesting[0], 'SORT_KEY', "ろくもんせかい2");
    Opal.const_set($nesting[0], 'HELP_MESSAGE', "" + "・判定\n" + "aRSm<=t\n" + "能力値a,修正値m,目標値tで判定ロールを行います。\n" + "Rコマンド(3R6m<=t[a])に読み替えます。\n" + "成功度、評価、ボーナスダイスを自動表示します。\n" + "　例) 3RS+1<=9　3R6+1<=9[3]\n");
    self.$setPrefixes(["\\d+RS"]);
    
    Opal.def(self, '$initialize', $RokumonSekai2_initialize$1 = function $$initialize() {
      var $iter = $RokumonSekai2_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $RokumonSekai2_initialize$1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $RokumonSekai2_initialize$1, false), $zuper, $iter);
      self.sendMode = 2;
      return (self.sortType = 1);
    }, $RokumonSekai2_initialize$1.$$arity = 0);
    
    Opal.def(self, '$changeText', $RokumonSekai2_changeText$2 = function $$changeText(string) {
      var $$3, $$4, self = this;

      
      self.$debug("parren_killer_add begin stirng", string);
      string = $send(string, 'gsub', [/(\d+)RS([\+\-][\+\-\d]+)<=(\d+)/i], ($$3 = function(){var self = $$3.$$s || this;

      return "" + "3R6" + ($$($nesting, 'Regexp').$last_match(2)) + "<=" + ($$($nesting, 'Regexp').$last_match(3)) + "[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      string = $send(string, 'gsub', [/(\d+)RS<=(\d+)/i], ($$4 = function(){var self = $$4.$$s || this;

      return "" + "3R6<=" + ($$($nesting, 'Regexp').$last_match(2)) + "[" + ($$($nesting, 'Regexp').$last_match(1)) + "]"}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      self.$debug("parren_killer_add end stirng", string);
      return string;
    }, $RokumonSekai2_changeText$2.$$arity = 1);
    
    Opal.def(self, '$dice_command_xRn', $RokumonSekai2_dice_command_xRn$5 = function $$dice_command_xRn(string, nick_e) {
      var self = this;

      return self.$checkRoll(string, nick_e)
    }, $RokumonSekai2_dice_command_xRn$5.$$arity = 2);
    
    Opal.def(self, '$checkRoll', $RokumonSekai2_checkRoll$6 = function $$checkRoll(string, nick_e) {
      var $a, $b, self = this, output = nil, modText = nil, target = nil, abl = nil, mod = nil, dstr = nil, suc = nil, sum = nil;

      
      output = "1";
      if ($truthy(/3R6([\+\-\d]*)<=(\d+)\[(\d+)\]/i['$=~'](string))) {
      } else {
        return output
      };
      modText = $$($nesting, 'Regexp').$last_match(1);
      target = $$($nesting, 'Regexp').$last_match(2).$to_i();
      abl = $$($nesting, 'Regexp').$last_match(3).$to_i();
      mod = 0;
      if ($truthy(modText)) {
        mod = self.$parren_killer("" + "(0" + (modText) + ")").$to_i()};
      $b = self.$rokumon2_roll(mod, target, abl), $a = Opal.to_ary($b), (dstr = ($a[0] == null ? nil : $a[0])), (suc = ($a[1] == null ? nil : $a[1])), (sum = ($a[2] == null ? nil : $a[2])), $b;
      output = "" + (sum) + "[" + (dstr) + "] ＞ " + (suc) + " ＞ 評価" + (self.$rokumon2_suc_rank(suc));
      if ($truthy(suc['$!='](0))) {
        output = $rb_plus(output, "" + "(+" + (suc) + "d6)")};
      output = "" + (nick_e) + ": (" + (string) + ") ＞ " + (output);
      return output;
    }, $RokumonSekai2_checkRoll$6.$$arity = 2);
    
    Opal.def(self, '$rokumon2_roll', $RokumonSekai2_rokumon2_roll$7 = function $$rokumon2_roll(mod, target, abl) {
      var $a, $b, $$8, $$9, $$10, self = this, suc = nil, _ = nil, dicestr = nil, dice = nil, cnt5 = nil, cnt2 = nil, sum = nil;

      
      suc = 0;
      $b = self.$roll($rb_plus(3, mod.$abs()), 6, 1), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (dicestr = ($a[1] == null ? nil : $a[1])), $b;
      dice = $send(dicestr.$split(/,/), 'collect', [], ($$8 = function(i){var self = $$8.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i.$to_i();}, $$8.$$s = self, $$8.$$arity = 1, $$8));
      $send(mod.$abs(), 'times', [], ($$9 = function(_i){var self = $$9.$$s || this;

      
        
        if (_i == null) {
          _i = nil;
        };
        if ($truthy($rb_lt(mod, 0))) {
          return dice.$shift()
        } else {
          return dice.$pop()
        };}, $$9.$$s = self, $$9.$$arity = 1, $$9));
      cnt5 = 0;
      cnt2 = 0;
      sum = 0;
      $send(dice, 'each', [], ($$10 = function(die1){var self = $$10.$$s || this;

      
        
        if (die1 == null) {
          die1 = nil;
        };
        if ($truthy($rb_ge(die1, 5))) {
          cnt5 = $rb_plus(cnt5, 1)};
        if ($truthy($rb_le(die1, 2))) {
          cnt2 = $rb_plus(cnt2, 1)};
        if ($truthy($rb_le(die1, abl))) {
          suc = $rb_plus(suc, 1)};
        return (sum = $rb_plus(sum, die1));}, $$10.$$s = self, $$10.$$arity = 1, $$10));
      if ($truthy($rb_lt(sum, target))) {
        suc = $rb_plus(suc, 2)
      } else if (sum['$=='](target)) {
        suc = $rb_plus(suc, 1)};
      if ($truthy($rb_ge(cnt5, 3))) {
        suc = 0};
      if ($truthy($rb_ge(cnt2, 3))) {
        suc = 5};
      return [dicestr, suc, sum];
    }, $RokumonSekai2_rokumon2_roll$7.$$arity = 3);
    return (Opal.def(self, '$rokumon2_suc_rank', $RokumonSekai2_rokumon2_suc_rank$11 = function $$rokumon2_suc_rank(suc) {
      var self = this, suc_rank = nil;

      
      suc_rank = ["E", "D", "C", "B", "A", "S"];
      return suc_rank['$[]'](suc);
    }, $RokumonSekai2_rokumon2_suc_rank$11.$$arity = 1), nil) && 'rokumon2_suc_rank';
  })($nesting[0], $$($nesting, 'DiceBot'), $nesting)
})(Opal);
