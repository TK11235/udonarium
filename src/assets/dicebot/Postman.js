/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$setPrefixes', '$upcase', '$===', '$to_i', '$last_match', '$<', '$scan', '$each', '$+', '$!=', '$checkRoll', '$get_weather_table', '$get_free_situation_table', '$roll', '$collect', '$split', '$[]', '$count', '$==', '$>', '$to_s', '$>=', '$get_table_by_number']);
  return (function($base, $super, $parent_nesting) {
    function $Postman(){};
    var self = $Postman = $klass($base, $super, 'Postman', $Postman);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Postman_initialize_1, TMP_Postman_gameName_2, TMP_Postman_gameType_3, TMP_Postman_getHelpMessage_4, TMP_Postman_rollDiceCommand_7, TMP_Postman_checkRoll_10, TMP_Postman_get_weather_table_11, TMP_Postman_get_free_situation_table_12;

    def.sortType = nil;
    
    self.$setPrefixes(["WEA\\d*", "(\\d+)?PO.*", "FRE"]);
    
    Opal.defn(self, '$initialize', TMP_Postman_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_Postman_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Postman_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Postman_initialize_1, false), $zuper, $iter);
      return (self.sortType = 1);
    }, TMP_Postman_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_Postman_gameName_2 = function $$gameName() {
      var self = this;

      return "壊れた世界のポストマン"
    }, TMP_Postman_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_Postman_gameType_3 = function $$gameType() {
      var self = this;

      return "Postman"
    }, TMP_Postman_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_Postman_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "◆判定：[n]PO[+-a][> or >= or @X]　　[]内省略可。\n" + "\n" + "達成値と判定の成否、クリティカル、ファンブルを結果表示します。\n" + "「n」で骰子数を指定。省略時は2D。\n" + "「+-a」で達成値への修正を指定。「+2+1-4」のような複数回指定可。\n" + "「>X」「>=X」「@X」で難易度を指定可。\n" + "「>X」は達成値>難易度、「>=X」「@X」は達成値>=難易度で判定します。\n" + "\n" + "【書式例】\n" + "3PO+2-1 → 3Dで達成値修正+1の判定。達成値のみ表示。\n" + "PO@5+2 → 2Dで目標値7の判定。判定の成否と達成値を表示。\n" + "4PO-2+1>7+2 → 4Dで達成値修正-1、目標値9（同値は失敗）の判定。\n" + "\n" + "\n" + "◆天候チェック：WEA[n]　　[]内省略可。\n" + "\n" + "天候チェック表を参照します。\n" + "「n」を指定すると、指定した結果を表示します。（【幸運点】使用時用）\n" + "\n" + "\n" + "◆自由行動シチュエーション表：FRE\n"
    }, TMP_Postman_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$rollDiceCommand', TMP_Postman_rollDiceCommand_7 = function $$rollDiceCommand(command) {
      var $a, TMP_5, TMP_6, self = this, text = nil, $case = nil, diceCount = nil, modify = nil, modifyAddString = nil, type = nil, target = nil, targetAddString = nil, modify_list = nil, target_list = nil, roc = nil;

      
      text = (function() {$case = command.$upcase();
      if (/(\d+)?PO(\d+)?(([+-]\d+)*)?((>|>=|@)(\d+)(([+-]\d+)*)?)?/i['$===']($case)) {
      diceCount = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(1)) ? $a : 2).$to_i();
      if ($truthy($rb_lt(diceCount, 2))) {
        diceCount = 2};
      modify = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(2)) ? $a : 0).$to_i();
      modifyAddString = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(3)) ? $a : "");
      type = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(6)) ? $a : "");
      target = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(7)) ? $a : 0).$to_i();
      targetAddString = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(8)) ? $a : "");
      modify_list = modifyAddString.$scan(/[+-]\d+/);
      $send(modify_list, 'each', [], (TMP_5 = function(i){var self = TMP_5.$$s || this;
if (i == null) i = nil;
      return (modify = $rb_plus(modify, i.$to_i()))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
      if ($truthy(target['$!='](0))) {
        
        target_list = targetAddString.$scan(/[+-]\d+/);
        $send(target_list, 'each', [], (TMP_6 = function(j){var self = TMP_6.$$s || this;
if (j == null) j = nil;
        return (target = $rb_plus(target, j.$to_i()))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));};
      return self.$checkRoll(diceCount, modify, type, target);}
      else if (/WEA(\d+)?/i['$===']($case)) {
      roc = ($truthy($a = Opal.const_get_relative($nesting, 'Regexp').$last_match(1)) ? $a : 0).$to_i();
      return self.$get_weather_table(roc);}
      else if ("FRE"['$===']($case)) {return self.$get_free_situation_table()}
      else { return nil }})();
      return text;
    }, TMP_Postman_rollDiceCommand_7.$$arity = 1);
    
    Opal.defn(self, '$checkRoll', TMP_Postman_checkRoll_10 = function $$checkRoll(diceCount, modify, type, target) {
      var $a, $b, TMP_8, TMP_9, self = this, dice = nil, diceText = nil, diceArray = nil, dice2 = nil, diceText2 = nil, criticalCount = nil, modifyText = nil, result = nil, resultText = nil, operatorText = nil, text = nil;

      
      $b = self.$roll(diceCount, 6, self.sortType), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      diceArray = $send(diceText.$split(/,/), 'collect', [], (TMP_8 = function(i){var self = TMP_8.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
      dice2 = $rb_plus(diceArray['$[]'](-2), diceArray['$[]'](-1));
      diceText2 = "" + (diceArray['$[]'](-2)) + "," + (diceArray['$[]'](-1));
      criticalCount = $send(diceArray, 'count', [], (TMP_9 = function(i){var self = TMP_9.$$s || this;
if (i == null) i = nil;
      return i['$=='](6)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
      if ($truthy(modify['$!='](0))) {
        
        modifyText = "";
        if ($truthy($rb_gt(modify, 0))) {
          modifyText = "+"};
        modifyText = $rb_plus(modifyText, modify.$to_s());};
      result = $rb_plus(dice2, modify);
      if ($truthy(type['$!='](""))) {
        
        resultText = " 【失敗】";
        operatorText = ">";
        if (type['$=='](">")) {
          if ($truthy($rb_gt(result, target))) {
            resultText = " 【成功】"}
          } else {
          
          operatorText = $rb_plus(operatorText, "=");
          if ($truthy($rb_ge(result, target))) {
            resultText = " 【成功】"};
        };};
      if ($truthy($rb_ge(criticalCount, 2))) {
        resultText = " 【成功】（クリティカル）"
      } else if (dice['$=='](diceCount)) {
        resultText = " 【失敗】（ファンブル）"};
      text = "" + (diceCount) + "D6(" + (diceText) + ")" + (modifyText) + " ＞ " + (dice2) + "(" + (diceText2) + ")" + (modifyText) + " = 達成値：" + (result);
      if ($truthy($rb_gt(target, 0))) {
        text = $rb_plus(text, "" + (operatorText) + (target) + " ")};
      text = $rb_plus(text, resultText.$to_s());
      return text;
    }, TMP_Postman_checkRoll_10.$$arity = 4);
    
    Opal.defn(self, '$get_weather_table', TMP_Postman_get_weather_table_11 = function $$get_weather_table(roc) {
      var $a, $b, self = this, name = nil, table = nil, dice = nil, diceText = nil, tableText = nil, text = nil;

      
      name = "天候チェック";
      table = [[2, "大雨と強風。探索判定の難易度に+4。"], [3, "風が強い1日になりそう。探索判定の難易度に+2。"], [4, "晴れ。特になし。"], [5, "夜の間の雨でぬかるむ。探索判定の難易度に+2。"], [6, "それなりの雨足。探索判定の難易度に+2。"], [7, "晴れ。特になし。"], [8, "天気は大荒れ。探索判定の難易度に+4。"], [9, "小雨が降る。探索判定の難易度に+1。"], [10, "それなりの雨足。探索判定の難易度に+2。"], [11, "晴れ。特になし。"], [12, "風が強い1日になりそう。探索判定の難易度に+2。"]];
      if (roc['$=='](0)) {
        $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b
        } else {
        
        if ($truthy($rb_lt(roc, 2))) {
          roc = 2};
        if ($truthy($rb_gt(roc, 12))) {
          roc = 12};
        dice = roc;
        diceText = "" + "Choice:" + (roc);
      };
      tableText = self.$get_table_by_number(dice, table);
      text = "" + (name) + "(" + (diceText) + ") ＞ " + (dice) + "：" + (tableText);
      return text;
    }, TMP_Postman_get_weather_table_11.$$arity = 1);
    return (Opal.defn(self, '$get_free_situation_table', TMP_Postman_get_free_situation_table_12 = function $$get_free_situation_table() {
      var $a, $b, self = this, name = nil, table = nil, dice = nil, diceText = nil, tableText = nil, text = nil;

      
      name = "自由行動シチュエーション表";
      table = [[2, "何をするでもなく、霞がかったような夜空を見上げる。ふと隣に目を向ければ、彼/彼女が居た。彼/彼女は、こうなる前の夜空を知っているのだろうか。"], [3, "夢を見た。大戦の最中、街が、人が、世界が焼けていく悪夢を。追い立てられるようにして目を覚ますと、彼/彼女が君を見ていた。　……もしかして、自分はよほどうなされていたのだろうか。"], [4, "周囲で見つけたガラクタを使って、ちょっとしたビックリ玩具を作ってみた。「彼/ 彼女」にコイツをけしかけたら、どんな反応をするだろうか？"], [5, "使えそうなものがないか探していると、カタンと物音がして何かが落ちた。拾い上げてみたそれは、かつてここで生活していた誰かの名残（写真、家具、玩具等）だった。"], [6, "テントの中で夜を過ごしていると、ふと彼/彼女と話したくてたまらない気持ちになった。言ってしまえば、夜の静けさに寂しさを覚えてしまったのだ。"], [7, "ここまでの配達の記録をつけていたら、背後から視線を感じる……！　もしや、彼/彼女に覗かれている……！？"], [8, "周囲を探索していると、君一人では手の届かないところに金属製の箱か何かがあることに気づいた。彼/彼女に手伝ってもらえば、取れるだろうか……？"], [9, "朝まではまだしばらくあるというのに、目が覚めてしまった。二度寝しようにも寝付けずに居ると、隣でもぞもぞと動く気配がする。彼/彼女も、どうやら同じらしい。"], [10, "他愛のない話をするうちに、君は彼/彼女に問いかけていた。「何故、ポストマンになろうと思ったのか」　……そういえば、君自身はどうだったろうか。"], [11, "保存食にありつこうとしたその時、君は気づいた。一匹のネズミが、彼/彼女の荷物の中に潜り込もうとしている。彼/彼女は気づいていないが、このままでは食料が危ない！"], [12, "テントを設営し、落ち着いた頃にふと気づく。　……身体が熱い。少し、だるさもあるような気もする。大したことはないと思うが、彼/彼女に相談しておいた方がいいだろうか。"]];
      $b = self.$roll(2, 6), $a = Opal.to_ary($b), (dice = ($a[0] == null ? nil : $a[0])), (diceText = ($a[1] == null ? nil : $a[1])), $b;
      tableText = self.$get_table_by_number(dice, table);
      text = "" + (name) + "(" + (diceText) + ") ＞ " + (dice) + "：" + (tableText);
      return text;
    }, TMP_Postman_get_free_situation_table_12.$$arity = 0), nil) && 'get_free_situation_table';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
