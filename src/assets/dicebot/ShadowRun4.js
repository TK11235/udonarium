/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$=~', '$gsub', '$last_match', '$debug', '$/', '$*', '$>=', '$==']);
  return (function($base, $super, $parent_nesting) {
    function $ShadowRun4(){};
    var self = $ShadowRun4 = $klass($base, $super, 'ShadowRun4', $ShadowRun4);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ShadowRun4_initialize_1, TMP_ShadowRun4_gameName_2, TMP_ShadowRun4_gameType_3, TMP_ShadowRun4_getHelpMessage_4, TMP_ShadowRun4_changeText_6, TMP_ShadowRun4_getGrichText_7;

    
    
    Opal.defn(self, '$initialize', TMP_ShadowRun4_initialize_1 = function $$initialize() {
      var self = this, $iter = TMP_ShadowRun4_initialize_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_ShadowRun4_initialize_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ShadowRun4_initialize_1, false), $zuper, $iter);
      self.sortType = 3;
      self.rerollNumber = 6;
      return (self.defaultSuccessTarget = ">=5");
    }, TMP_ShadowRun4_initialize_1.$$arity = 0);
    
    Opal.defn(self, '$gameName', TMP_ShadowRun4_gameName_2 = function $$gameName() {
      var self = this;

      return "シャドウラン第４版"
    }, TMP_ShadowRun4_gameName_2.$$arity = 0);
    
    Opal.defn(self, '$gameType', TMP_ShadowRun4_gameType_3 = function $$gameType() {
      var self = this;

      return "ShadowRun4"
    }, TMP_ShadowRun4_gameType_3.$$arity = 0);
    
    Opal.defn(self, '$getHelpMessage', TMP_ShadowRun4_getHelpMessage_4 = function $$getHelpMessage() {
      var self = this;

      return "" + "個数振り足しロール(xRn)の境界値を6にセット、バラバラロール(xBn)の目標値を5以上にセットします。\n" + "BコマンドとRコマンド時に、グリッチの表示を行います。\n"
    }, TMP_ShadowRun4_getHelpMessage_4.$$arity = 0);
    
    Opal.defn(self, '$changeText', TMP_ShadowRun4_changeText_6 = function $$changeText(string) {
      var TMP_5, self = this;

      
      if ($truthy(string['$=~'](/(\d+)S6/i))) {
        string = $send(string, 'gsub', [/(\d+)S6/i], (TMP_5 = function(){var self = TMP_5.$$s || this;

        return "" + (Opal.const_get_relative($nesting, 'Regexp').$last_match(1)) + "B6"}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))};
      return string;
    }, TMP_ShadowRun4_changeText_6.$$arity = 1);
    return (Opal.defn(self, '$getGrichText', TMP_ShadowRun4_getGrichText_7 = function $$getGrichText(numberSpot1, dice_cnt_total, successCount) {
      var self = this, dice_cnt_total_half = nil;

      
      self.$debug("getGrichText numberSpot1", numberSpot1);
      self.$debug("dice_cnt_total", dice_cnt_total);
      self.$debug("successCount", successCount);
      dice_cnt_total_half = $rb_divide($rb_times(1.0, dice_cnt_total), 2);
      self.$debug("dice_cnt_total_half", dice_cnt_total_half);
      if ($truthy($rb_ge(numberSpot1, dice_cnt_total_half))) {
        } else {
        return ""
      };
      if (successCount['$=='](0)) {
        return " ＞ クリティカルグリッチ"};
      return " ＞ グリッチ";
    }, TMP_ShadowRun4_getGrichText_7.$$arity = 3), nil) && 'getGrichText';
  })($nesting[0], Opal.const_get_relative($nesting, 'DiceBot'), $nesting)
})(Opal);

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return Opal.const_get_relative($nesting, 'Kernel').$exit()
})(Opal);
